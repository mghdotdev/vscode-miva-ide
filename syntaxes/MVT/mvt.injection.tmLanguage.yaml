%YAML 1.2
---
name: MVT (Injection)
scopeName: mvt.injection
injectionSelector:
  - 'L:text.html.mvt -comment.block.mvt'
  - 'L:source.css.mvt -comment.block.mvt'
  - 'L:source.js.mvt -comment.block.mvt'

patterns:

  # MVT Comments
  - include: '#comments'

  # MVT Entities
  - include: '#entities'

  # MVT Tags
  - include: '#tags'

repository:

  # =-======================== Comments ========================-= #
  comments:
    begin: '(?i)<mvt:comment>'
    captures:
      0: {name: punctuation.definition.comment.mvt}
    end: '(?i)</mvt:comment>'
    name: comment.block.mvt

  # =-======================== Entities ========================-= #
  entities:
    patterns:
      - match: (?i)(&)(mvt)(a|e|j|s)?(:)([a-zA-Z_][a-zA-Z0-9_:\[\]-]*)(;)
        name: constant.character.entity.mvt

  # =-======================== Tags ========================-= #
  tags:
    patterns:
      - include: '#tag-assign'
      - include: '#tag-call'
      - include: '#tag-capture'
      - include: '#tag-do'
      - include: '#tag-else'
      - include: '#tag-elseif'
      - include: '#tag-eval'
      - include: '#tag-foreach'
      - include: '#tag-if'
      - include: '#tag-inline'
      - include: '#tag-item'
      - include: '#tag-miva'
      - include: '#tag-while'

  tag-assign:
    patterns:
      - begin: '(?i)(<)(mvt)(:)(assign)(?=\s|/?>)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt}
          2: {name: storage.type.namespace.mvt meta.preprocessor.namespace.mvt}
          3: {name: storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt}
          4: {name: storage.type.localname.mvt meta.preprocessor.localname.mvt}
        end: '/?>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt}
        name: meta.tag.inline.$4.mvt
        patterns:
          - include: '#assign-name-attribute'
          - include: '#value-attribute'
          - include: '#illegal-attributes'

  tag-call:
    patterns:
      - begin: '(</?)(?i:(mvt)(:)(call)\b)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt}
          2: {name: storage.type.namespace.mvt meta.preprocessor.namespace.mvt}
          3: {name: storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt}
          4: {name: storage.type.localname.mvt meta.preprocessor.localname.mvt}
        end: '>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt}
        name: meta.tag.block.$4.mvt
        patterns:
          - include: '#action-attribute'
          - include: '#certfile-attribute'
          - include: '#certpass-attribute'
          - include: '#certtype-attribute'
          - include: '#content-type-attribute'
          - include: '#fields-attribute'
          - include: '#files-attribute'
          - include: '#headers-attribute'
          - include: '#method-attribute'
          - include: '#timeout-attribute'
          - include: '#pin-algorithm-attribute'
          - include: '#pin-digest-attribute'
          - include: '#illegal-attributes'

  tag-capture:
    patterns:
      - begin: '(</?)(?i:(mvt)(:)(capture)\b)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt}
          2: {name: storage.type.namespace.mvt meta.preprocessor.namespace.mvt}
          3: {name: storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt}
          4: {name: storage.type.localname.mvt meta.preprocessor.localname.mvt}
        end: '>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt}
        name: meta.tag.block.$4.mvt
        patterns:
          - include: '#variable-attribute'
          - include: '#illegal-attributes'

  tag-do:
    patterns:
      - begin: '(?i)(<)(mvt)(:)(do)(?=\s|/?>)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt}
          2: {name: storage.type.namespace.mvt meta.preprocessor.namespace.mvt}
          3: {name: storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt}
          4: {name: storage.type.localname.mvt meta.preprocessor.localname.mvt}
        end: '/?>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt}
        name: meta.tag.inline.$4.mvt
        patterns:
          - include: '#file-attribute'
          - include: '#name-attribute'
          - include: '#value-attribute'
          - include: '#illegal-attributes'

  tag-else:
    patterns:
      - begin: '(?i)(<)(mvt)(:)(else)(?=\s|/?>)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt}
          2: {name: storage.type.namespace.mvt meta.preprocessor.namespace.mvt}
          3: {name: storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt}
          4: {name: storage.type.localname.mvt meta.preprocessor.localname.mvt}
        end: '>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt}
        name: meta.tag.inline.$4.mvt
        patterns:
          - match: '\/'
            name: invalid.illegal.slash.mvt
          - include: '#illegal-attributes'

  tag-elseif:
    patterns:
      - begin: '(?i)(<)(mvt)(:)(elseif)(?=\s|/?>)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt}
          2: {name: storage.type.namespace.mvt meta.preprocessor.namespace.mvt}
          3: {name: storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt}
          4: {name: storage.type.localname.mvt meta.preprocessor.localname.mvt}
        end: '>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt}
        name: meta.tag.inline.$4.mvt
        patterns:
          - match: '\/'
            name: invalid.illegal.slash.mvt
          - include: '#expr-attribute'
          - include: '#illegal-attributes'

  tag-eval:
    patterns:
      - begin: '(?i)(<)(mvt)(:)(eval)(?=\s|/?>)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt}
          2: {name: storage.type.namespace.mvt meta.preprocessor.namespace.mvt}
          3: {name: storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt}
          4: {name: storage.type.localname.mvt meta.preprocessor.localname.mvt}
        end: '/?>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt}
        name: meta.tag.inline.$4.mvt
        patterns:
          - include: '#expr-attribute'
          - include: '#illegal-attributes'

  tag-foreach:
    patterns:
      - begin: '(</?)(?i:(mvt)(:)(foreach)\b)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt}
          2: {name: storage.type.namespace.mvt meta.preprocessor.namespace.mvt}
          3: {name: storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt}
          4: {name: storage.type.localname.mvt meta.preprocessor.localname.mvt}
        end: '>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt}
        name: meta.tag.block.$4.mvt
        patterns:
          - include: '#array-attribute'
          - include: '#iterator-attribute'
          - include: '#illegal-attributes'

  tag-if:
    patterns:
      - begin: '(</?)(?i:(mvt)(:)(if)\b)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt}
          2: {name: storage.type.namespace.mvt meta.preprocessor.namespace.mvt}
          3: {name: storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt}
          4: {name: storage.type.localname.mvt meta.preprocessor.localname.mvt}
        end: '>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt}
        name: meta.tag.block.$4.mvt
        patterns:
          - include: '#expr-attribute'
          - include: '#illegal-attributes'

  tag-inline:
    patterns:
      - begin: '(?i)(<)(mvt)(:)(callcontinue|callstop|exit|foreachcontinue|foreachstop|whilecontinue|whilestop)(?=\s|/?>)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt}
          2: {name: storage.type.namespace.mvt meta.preprocessor.namespace.mvt}
          3: {name: storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt}
          4: {name: storage.type.localname.mvt meta.preprocessor.localname.mvt}
        end: '/?>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt}
        name: meta.tag.inline.$4.mvt
        patterns:
          - include: '#illegal-attributes'

  tag-item:
    patterns:
      - begin: '(?i)(<)(mvt)(:)(item)(?=\s|/?>)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt}
          2: {name: storage.type.namespace.mvt meta.preprocessor.namespace.mvt}
          3: {name: storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt}
          4: {name: storage.type.localname.mvt meta.preprocessor.localname.mvt}
        end: '/?>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt}
        name: meta.tag.inline.$4.mvt
        patterns:
          - include: '#item-name-attribute'
          - include: '#param-attribute'
          - include: '#illegal-attributes'

  tag-miva:
    patterns:
      - begin: '(?i)(<)(mvt)(:)(miva)(?=\s|/?>)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt}
          2: {name: storage.type.namespace.mvt meta.preprocessor.namespace.mvt}
          3: {name: storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt}
          4: {name: storage.type.localname.mvt meta.preprocessor.localname.mvt}
        end: '/?>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt}
        name: meta.tag.inline.$4.mvt
        patterns:
          - include: '#compresswhitespace-attribute'
          - include: '#output-attribute'
          - include: '#illegal-attributes'

  tag-while:
    patterns:
      - begin: '(</?)(?i:(mvt)(:)(while)\b)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt}
          2: {name: storage.type.namespace.mvt meta.preprocessor.namespace.mvt}
          3: {name: storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt}
          4: {name: storage.type.localname.mvt meta.preprocessor.localname.mvt}
        end: '>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt}
        name: meta.tag.block.$4.mvt
        patterns:
          - include: '#expr-attribute'
          - include: '#illegal-attributes'


  # =-======================== Tag Attributes ========================-= #
  illegal-attributes:
    patterns:
      - match: '(?<=[^=])\b([a-zA-Z0-9\:\-\_]+)\s*(=?)'
        name: invalid.illegal.attribute-name.mvt

  certfile-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(certfile)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt
        patterns:
          - include: '#source-mvt'
          - include: '#source-functions-builtins'

  compresswhitespace-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(compresswhitespace)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt
        patterns:
          - match: '(off|on)'
            name: string.quoted.single.mvt
          - match: '[^"]'
            name: invalid.illegal.identifier.mvt

  headers-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(headers)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt
        patterns:
          - include: '#source-mvt'
          - include: '#source-functions-builtins'

  method-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(method)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt
        patterns:
          - include: '#source-mvt'
          - include: '#source-functions-builtins'

  fields-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(fields)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt
        patterns:
          - include: '#source-mvt'
          - include: '#source-functions-builtins'

  content-type-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(content-type)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt
        patterns:
          - include: '#source-mvt'
          - include: '#source-functions-builtins'

  certtype-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(certtype)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt
        patterns:
          - include: '#source-mvt'
          - include: '#source-functions-builtins'

  certpass-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(certpass)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt
        patterns:
          - include: '#source-mvt'
          - include: '#source-functions-builtins'

  files-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(files)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt
        patterns:
          - include: '#source-mvt'
          - include: '#source-functions-builtins'

  expr-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(expr)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt
        patterns:
          - include: '#source-mvt'
          - include: '#source-functions-builtins'

  action-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(action)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt
        patterns:
          - include: '#source-mvt'
          - include: '#source-functions-builtins'

  param-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(param)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt
        patterns:
          - include: '#source-mvt'
          - include: '#source-functions-component'
          - include: '#source-item-param-variable'
          - include: '#source-item-param-string'

  file-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(file)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt
        patterns:
          - include: '#source-mvt'
          - include: '#source-functions-builtins'

  array-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(array)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt variable.language.implied.mvt

  iterator-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(iterator)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt variable.language.implied.mvt

  value-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(value)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt
        patterns:
          - include: '#source-mvt'
          - include: '#source-functions-builtins'

  item-name-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(name)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt support.class.module.mvt

  assign-name-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(name)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt assign.declaration.mvt
        patterns:
          - include: '#source-variables'

  variable-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(variable)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt assign.declaration.mvt
        patterns:
          - include: '#source-variables'

  name-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(name)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt
        patterns:
          - include: '#source-variables'
          - include: '#source-string-single'
          - include: '#source-numbers'
          - include: '#source-brackets-no-functions'
          - include: '#source-group-no-functions'

  output-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(output)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt
        patterns:
          - match: '(off|on)'
            name: string.quoted.single.mvt
          - match: '[^"]'
            name: invalid.illegal.identifier.mvt

  timeout-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(timeout)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt
        patterns:
          - include: '#source-mvt'
          - include: '#source-functions-builtins'

  pin-algorithm-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(pin-algorithm)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt
        patterns:
          - include: '#source-mvt'
          - include: '#source-functions-builtins'

  pin-digest-attribute:
    patterns:
      - begin: '(?i)(?<=[^=])\b(pin-digest)\s*(=?)\s*(")'
        beginCaptures:
          1: {name: entity.other.attribute-name.$1.mvt}
          2: {name: punctuation.separator.key-value.mvt}
          3: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.begin.mvt}
        end: '"'
        endCaptures:
          0: {name: attribute-value.$1.mvt source.mvt punctuation.definition.string.end.mvt}
        contentName: attribute-value.$1.mvt source.mvt
        patterns:
          - include: '#source-mvt'
          - include: '#source-functions-builtins'

  # =-======================== Source ========================-= #
  source-mvt:
    patterns:
      - include: '#source-brackets'
      - include: '#source-group'
      - include: '#source-string-single'
      - include: '#source-variables'
      - include: '#source-numbers'
      - include: '#source-operators'
      - include: '#source-constants'

  # =-======== Operators - Source ========-= #
  source-operators:
    patterns:
      # Arithmetic Operators
      - match: (\b(?i:POW|MOD|ROUND)\b)
        name: keyword.operator.arithmetic.mvt

      # Arithmetic Operators (Symbols)
      - match: --|\+\+|/|\*|\+|-
        name: keyword.operator.arithmetic.mvt

      # Comparison Operators
      - match: (\b(?i:EQ|GT|GE|LT|NE|LE)\b)
        name: keyword.operator.comparison.mvt

      # Logical Operators
      - match: (\b(?i:NOT|AND|OR|ISNULL)\b)
        name: keyword.operator.logical.mvt

      # Text Operators
      - match: (\b(?i:IN|CIN|EIN|ECIN|CRYPT)\b)
        name: keyword.operator.string.mvt

      # Text Operators (Symbols)
      - match: \$
        name: keyword.operator.string.mvt


  # =-======== Constants - Source ========-= #
  source-constants:
    patterns:
      # NULL
      - match: \b(?i:NULL)\b
        name: constant.language.null.mvt

  # =-======== Numbers - Source ========-= #
  source-numbers:
    patterns:
      - match: \b(([0-9]+(\.[0-9]+)?))\b
        name: constant.numeric.mvt


  # =-======== Variables - Source ========-= #
  source-variables:
    patterns:
      # Variables Base
      - name: variable.language.local.mvt
        match: ((l|local)\.)([A-Za-z0-9_]+)([a-zA-Z0-9:_\.-]*)

      - name: variable.language.global.mvt
        match: ((g|global)\.)([A-Za-z0-9_]+)([a-zA-Z0-9:_\.-]*)

      - name: variable.language.system.mvt
        match: ((s|system)\.)([A-Za-z0-9_]+)([a-zA-Z0-9:_\.-]*)

      # Variables Cont. (continue after square brackets)
      - match: (?<=\])(:)([a-zA-Z0-9:_\.-]*)
        name: variable.language.array-continue.mvt

      # POSX
      - match: \b(?i:POS)([0-9]+)\b
        name: variable.language.pos$1.mvt

  source-item-param-string:
    match: '[^"]+'
    name: markup.quote.item-param.mvt

  source-item-param-variable:
    match: '([^:]+)(:)(([A-Za-z0-9_]+)([a-zA-Z0-9:_\.-]*))'
    captures:
      1: {name: support.function.item-param.mvt}
      2: {name: punctuation.definition.separator.item-param.mvt}
      3: {name: variable.language.item-param.mvt}

  # =-======== Strings - Source ========-= #
  source-string-single:
    patterns:
      - begin: "'"
        beginCaptures:
          '0': {name: punctuation.definition.string.begin.mvt}
        end: "'"
        endCaptures:
          '0': {name: punctuation.definition.string.end.mvt}
        name: string.quoted.single.mvt
        patterns:
        - include: '#source-string-escapes'

  source-string-escapes:
    patterns:
    - match: \\\s*\n
      name: constant.character.escape.newline.mvt

    - match: '\\(x[\da-fA-F][\da-fA-F]|u[\da-fA-F][\da-fA-F][\da-fA-F][\da-fA-F]|.)'
      name: constant.character.escape.mvt


  # =-======== Functions - Source ========-= #
  source-functions-component:
    patterns:
      - begin: '\b([a-zA-Z_][a-zA-Z0-9_]*)\s*(\()'
        beginCaptures:
          1: {name: support.function.component.mvt}
          2: {name: punctuation.definition.group.mvt}
        end: '(\))'
        endCaptures:
          1: {name: punctuation.terminator.group.mvt}
        patterns:
          - include: '#source-mvt'
          - include: '#source-functions-builtins'

  source-functions-builtins:
    patterns:
      - begin: '\b([a-zA-Z_][a-zA-Z0-9_]*)\s*(\()'
        beginCaptures:
          1: {name: support.function.builtin.mvt}
          2: {name: punctuation.definition.group.mvt}
        end: '(\))'
        endCaptures:
          1: {name: punctuation.terminator.group.mvt}
        patterns:
          - include: '#source-mvt'
          - include: '#source-functions-builtins'

  # =-======== Brackets / Group (Parenthesis) - Source ========-= #
  source-brackets-no-functions:
    patterns:
      - begin: '\['
        beginCaptures:
          1: {name: punctuation.definition.brackets.mvt}
        end: '\]'
        endCaptures:
          1: {name: punctuation.terminator.bracket.mvt}
        name: meta.brackets.mvt
        patterns:
          - match: '\]'
            name: invalid.illegal.stray-bracket-end
          - include: '#source-mvt'

  source-brackets:
    patterns:
      - begin: '\['
        beginCaptures:
          1: {name: punctuation.definition.brackets.mvt}
        end: '\]'
        endCaptures:
          1: {name: punctuation.terminator.bracket.mvt}
        name: meta.brackets.mvt
        patterns:
          - match: '\]'
            name: invalid.illegal.stray-bracket-end
          - include: '#source-mvt'
          - include: '#source-functions-builtins'

  source-group-no-functions:
    patterns:
      - begin: '\('
        beginCaptures:
          1: {name: punctuation.definition.group.mvt}
        end: '\)'
        endCaptures:
          1: {name: punctuation.terminator.group.mvt}
        name: meta.group.mvt
        patterns:
          - match: '\)'
            name: invalid.illegal.stray-group-end
          - include: '#source-mvt'

  source-group:
    patterns:
      - begin: '\('
        beginCaptures:
          1: {name: punctuation.definition.group.mvt}
        end: '\)'
        endCaptures:
          1: {name: punctuation.terminator.group.mvt}
        name: meta.group.mvt
        patterns:
          - match: '\)'
            name: invalid.illegal.stray-group-end
          - include: '#source-mvt'
          - include: '#source-functions-builtins'