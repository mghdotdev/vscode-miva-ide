%YAML 1.2
---
name: MVT (Injection)
scopeName: mvt.injection
injectionSelector: 'L:text.html.mvt'

patterns:

  # MVT Comments
  - include: '#comments'

  # MVT Entities
  - include: '#entities'

  # MVT Tags
  - include: '#tags'

repository:
 
  # =-======================== Comments ========================-= #
  comments:
    patterns:
      - comment: MVT Comment
        begin: '<mvt:comment>'
        beginCaptures:
          '0': {name: punctuation.definition.comment.mvt}
        end: '</mvt:comment>'
        name: comment.block.mvt
  
  # =-======================== Entities ========================-= #
  entities:
    patterns:
      - match: (?i)(&)(mvt)(a|e|j|s)?(:)([a-zA-Z_][a-zA-Z0-9_:\[\]]*)(;)
        name: constant.character.entity.mvt

  # =-======================== Tags ========================-= #
  tags:
    patterns:
      - include: '#tag-assign'
      - include: '#tag-call'
      - include: '#tag-capture'
      - include: '#tag-do'
      - include: '#tag-else'
      - include: '#tag-elseif'
      - include: '#tag-eval'
      - include: '#tag-exit'
      - include: '#tag-foreach'
      # - include: '#tag-if'
      # - include: '#tag-inline'
      # - include: '#tag-item'
      # - include: '#tag-miva'
      # - include: '#tag-while'

  tag-assign:
    patterns:
      - begin: '(?i)(<)(mvt)(:)(assign)\b'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt}
          2: {name: storage.type.namespace.mvt meta.preprocessor.namespace.mvt}
          3: {name: storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt}
          4: {name: storage.type.localname.mvt meta.preprocessor.localname.mvt}
        end: '(\/>)'
        endCaptures:
          1: {name: punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt}
        name: meta.tag.inline.assign.mvt
        # patterns:
        #   - include: '#assign-name-attribute'
        #   - include: '#value-attribute'
        #   - include: '#illegal-attributes'
  
  tag-call:
    patterns:
      - begin: '(</?)(?i:(mvt)(:)(call)\b)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt}
          2: {name: storage.type.namespace.mvt meta.preprocessor.namespace.mvt}
          3: {name: storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt}
          4: {name: storage.type.localname.mvt meta.preprocessor.localname.mvt}
        end: '(>)'
        endCaptures:
          1: {name: punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt}
        name: meta.tag.block.call.mvt
        # patterns:
        #   - include: '#action-attribute'
        #   - include: '#cerfile-attribute'
        #   - include: '#certpass-attribute'
        #   - include: '#certtype-attribute'
        #   - include: '#content-type-attribute'
        #   - include: '#fields-attribute'
        #   - include: '#files-attribute'
        #   - include: '#headers-attribute'
        #   - include: '#method-attribute'
        #   - include: '#timeout-attribute'
        #   - include: '#illegal-attributes'
        
  tag-capture:
    patterns:
      - begin: '(</?)(?i:(mvt)(:)(capture)\b)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt}
          2: {name: storage.type.namespace.mvt meta.preprocessor.namespace.mvt}
          3: {name: storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt}
          4: {name: storage.type.localname.mvt meta.preprocessor.localname.mvt}
        end: '(>)'
        endCaptures:
          1: {name: punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt}
        name: meta.tag.block.capture.mvt
        # patterns:
        #   - include: '#variable-attribute'
        #   - include: '#illegal-attributes'
    
  tag-do:
    patterns:
      - begin: '(?i)(<)(mvt)(:)(do)\b'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt}
          2: {name: storage.type.namespace.mvt meta.preprocessor.namespace.mvt}
          3: {name: storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt}
          4: {name: storage.type.localname.mvt meta.preprocessor.localname.mvt}
        end: '(\/>)'
        endCaptures:
          1: {name: punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt}
        name: meta.tag.inline.do.mvt
        # patterns:
        #   - include: '#file-attribute'
        #   - include: '#name-attribute'
        #   - include: '#value-attribute'
        #   - include: '#illegal-attributes'
  
  tag-else:
    patterns:
      - begin: '(?i)(<)(mvt)(:)(else)\b'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt}
          2: {name: storage.type.namespace.mvt meta.preprocessor.namespace.mvt}
          3: {name: storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt}
          4: {name: storage.type.localname.mvt meta.preprocessor.localname.mvt}
        end: '(>)'
        endCaptures:
          1: {name: punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt}
        name: meta.tag.inline.else.mvt
        patterns:
          - match: '\/'
            name: invalid.illegal.slash.mvt
        #  - include: '#illegal-attributes'
    
  tag-elseif:
    patterns:
      - begin: '(?i)(<)(mvt)(:)(elseif)\b'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt}
          2: {name: storage.type.namespace.mvt meta.preprocessor.namespace.mvt}
          3: {name: storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt}
          4: {name: storage.type.localname.mvt meta.preprocessor.localname.mvt}
        end: '(>)'
        endCaptures:
          1: {name: punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt}
        name: meta.tag.inline.elseif.mvt
        patterns:
          - match: '\/'
            name: invalid.illegal.slash.mvt
        #  - include: '#expr-attribute'
        #  - include: '#illegal-attributes'
  
  tag-eval:
    patterns:
      - begin: '(?i)(<)(mvt)(:)(eval)\b'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt}
          2: {name: storage.type.namespace.mvt meta.preprocessor.namespace.mvt}
          3: {name: storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt}
          4: {name: storage.type.localname.mvt meta.preprocessor.localname.mvt}
        end: '(\/>)'
        endCaptures:
          1: {name: punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt}
        name: meta.tag.inline.eval.mvt
        # patterns:
        #   - include: '#expr-attribute'
        #   - include: '#illegal-attributes'
  
  tag-exit:
    patterns:
      - begin: '(?i)(<)(mvt)(:)(exit)\b'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt}
          2: {name: storage.type.namespace.mvt meta.preprocessor.namespace.mvt}
          3: {name: storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt}
          4: {name: storage.type.localname.mvt meta.preprocessor.localname.mvt}
        end: '(\/?>)'
        endCaptures:
          1: {name: punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt}
        name: meta.tag.inline.exit.mvt
        # patterns:
        #   - include: '#illegal-attributes'

  tag-foreach:
    patterns:
      - begin: '(</?)(?i:(mvt)(:)(foreach)\b)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt}
          2: {name: storage.type.namespace.mvt meta.preprocessor.namespace.mvt}
          3: {name: storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt}
          4: {name: storage.type.localname.mvt meta.preprocessor.localname.mvt}
        end: '(>)'
        endCaptures:
          1: {name: punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt}
        name: meta.tag.block.foreach.mvt
        # patterns:
        #   - include: '#array-attribute'
        #   - include: '#iterator-attribute'
        #   - include: '#illegal-attributes'

  # =-======================== Source ========================-= #
  source-mvt:
    patterns:
      # - include: '#source-brackets'
      # - include: '#source-group'
      - include: '#source-string-single'
      - include: '#source-variables'
      - include: '#source-numbers'
      - include: '#source-operators'
      - include: '#source-constants'

  # =-======== Operators - Source ========-= #
  source-operators:
    patterns:
      # Arithmetic Operators
      - match: (\b(?i:POW|MOD|ROUND)\b)
        name: keyword.operator.arithmetic.mvt

      # Arithmetic Operators (Symbols)
      - match: --|\+\+|/|\*|\+|-
        name: keyword.operator.arithmetic.mvt

      # Comparison Operators
      - match: (\b(?i:EQ|GT|GE|LT|NE|LE)\b)
        name: keyword.operator.comparison.mvt

      # Logical Operators
      - match: (\b(?i:NOT|AND|OR|ISNULL)\b)
        name: keyword.operator.logical.mvt

      # Text Operators
      - match: (\b(?i:IN|CIN|EIN|ECIN|CRYPT)\b)
        name: keyword.operator.string.mvt

      # Text Operators (Symbols)
      - match: \$
        name: keyword.operator.string.mvt


  # =-======== Constants - Source ========-= #
  source-constants:
    patterns:
      # NULL
      - match: \b(?i:NULL)\b
        name: constant.language.null.mvt

  # =-======== Numbers - Source ========-= #
  source-numbers:
    patterns:
      - match: \b(([0-9]+(\.[0-9]+)?))\b
        name: constant.numeric.mvt


  # =-======== Variables - Source ========-= #
  source-variables:
    patterns:
      # Variables Base
      - name: variable.language.local.mvt
        match: ((l|local)\.)([A-Za-z0-9_]+)([a-zA-Z0-9:_\.]*)

      - name: variable.language.global.mvt
        match: ((g|global)\.)([A-Za-z0-9_]+)([a-zA-Z0-9:_\.]*)

      - name: variable.language.system.mvt
        match: ((s|system)\.)([A-Za-z0-9_]+)([a-zA-Z0-9:_\.]*)

      # Variables Cont. (continue after square brackets)
      - match: (?<=\])(:)([a-zA-Z0-9:_\.]*)
        name: variable.language.array-continue.mvt

      # POSX
      - match: \b(?i:POS)[0-9]+\b
        name: variable.language.posx.mvt

  # =-======== Strings - Source ========-= #
  source-string-single:
    patterns:
      - begin: "'"
        beginCaptures:
          '0': {name: punctuation.definition.string.begin.mvt}
        end: "'"
        endCaptures:
          '0': {name: punctuation.definition.string.end.mvt}
        name: string.quoted.single
        patterns:
        - include: '#source-string-escapes'

  source-string-escapes:
    patterns:
    - match: \\\s*\n
      name: constant.character.escape.newline.js
      
    - match: '\\(x[\da-fA-F][\da-fA-F]|u[\da-fA-F][\da-fA-F][\da-fA-F][\da-fA-F]|.)'
      name: constant.character.escape.js


  # =-======== Brackets / Group (Parenthesis) - Source ========-= #
  # source-brackets-no-functions:
  #   - match: \[
  #     scope: puncuation.definition.brackets.mvt
  #     push:
  #       - meta_scope: meta.brackets.mvt
  #       - match: \]
  #         scope: puncuation.terminator.bracket.mvt
  #         pop: true
  #       - include: source-mvt
  #   - match: \]
  #     scope: invalid.illegal.stray-bracket-end

  # source-brackets:
  #   - match: \[
  #     scope: puncuation.definition.brackets.mvt
  #     push:
  #       - meta_scope: meta.brackets.mvt
  #       - match: \]
  #         scope: puncuation.terminator.bracket.mvt
  #         pop: true
  #       - include: source-mvt
  #       - include: source-functions-builtins
  #   - match: \]
  #     scope: invalid.illegal.stray-bracket-end

  # source-group-no-functions:
  #   - match: \(
  #     scope: puncuation.definition.group.mvt
  #     push:
  #       - meta_scope: meta.group.mvt
  #       - match: \)
  #         scope: puncuation.terminator.group.mvt
  #         pop: true
  #       - include: source-mvt
  #   - match: \)
  #     scope: invalid.illegal.stray-group-end

  # source-group:
  #   - match: \(
  #     scope: puncuation.definition.group.mvt
  #     push:
  #       - meta_scope: meta.group.mvt
  #       - match: \)
  #         scope: puncuation.terminator.group.mvt
  #         pop: true
  #       - include: source-mvt
  #       - include: source-functions-builtins
  #   - match: \)