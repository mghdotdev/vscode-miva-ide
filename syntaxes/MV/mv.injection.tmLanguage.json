{
  "name": "Miva Script (Injection)",
  "scopeName": "mv.injection",
  "injectionSelector": "L:text.html.mv -comment.block.mv",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#expression"
    },
    {
      "include": "#text-tags"
    }
  ],
  "repository": {
    "comments": {
      "begin": "(?i)<MvCOMMENT>",
      "captures": {
        "0": {
          "name": "punctuation.definition.comment.mv"
        }
      },
      "end": "(?i)</MvCOMMENT>",
      "name": "comment.block.mv"
    },
    "text-tags": {
      "patterns": [
        {
          "begin": "(?i)(<)(MIVA|(Mv)(LOCALIZED|LOCALIZED-TOKEN))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.mv"
            },
            "2": {
              "name": "entity.name.tag.mv meta.preprocessor.name.mv"
            }
          },
          "end": "/?>",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.mv"
            }
          },
          "name": "meta.tag.inline.$2.mv",
          "patterns": [
            {
              "include": "#text-attributes"
            }
          ]
        },
        {
          "begin": "(?i)(</?)(Mv(ASSEMBLY|ASYNCHRONOUS|COMMERCE|LOCALIZED-TEXT|CAPTURE))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.mv"
            },
            "2": {
              "name": "entity.name.tag.mv meta.preprocessor.name.mv"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.mv"
            }
          },
          "name": "meta.tag.block.$2.mv",
          "patterns": [
            {
              "include": "#text-attributes"
            }
          ]
        },
        {
          "begin": "(?i)(<)(Mv((CALL|WHILE|FOR|FOREACH|IMPORT|CALL|COMMERCE|POP)(STOP|CONTINUE)|(FUNC|FUNCTION)(RETURN)|EXIT|SKIP))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.mv"
            },
            "2": {
              "name": "entity.name.tag.mv keyword.control.flow.mv"
            }
          },
          "end": "/?>",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.mv"
            }
          },
          "name": "meta.tag.inline.$2.mv",
          "patterns": [
            {
              "include": "#text-attributes"
            }
          ]
        },
        {
          "begin": "(?i)(<)(Mv(ASSIGN|MEMBER|DIMENSION|REFERENCE))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.mv"
            },
            "2": {
              "name": "entity.name.tag.mv meta.var.expr.mv"
            }
          },
          "end": "/?>",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.mv"
            }
          },
          "name": "meta.tag.inline.$2.mv",
          "patterns": [
            {
              "include": "#text-attributes"
            }
          ]
        },
        {
          "begin": "(?i)(</?)(Mv((ASSIGN|REFERENCE)ARRAY))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.mv"
            },
            "2": {
              "name": "entity.name.tag.mv meta.var.expr.mv"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.mv"
            }
          },
          "name": "meta.tag.block.$2.mv",
          "patterns": [
            {
              "include": "#text-attributes"
            }
          ]
        },
        {
          "begin": "(?i)(</?)(Mv(IF|ELSE|ELSEIF|IFDEF|IFNDEF))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.mv"
            },
            "2": {
              "name": "entity.name.tag.mv keyword.control.conditional.mv"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.mv"
            }
          },
          "name": "meta.tag.block.$2.mv",
          "patterns": [
            {
              "include": "#text-attributes"
            }
          ]
        },
        {
          "begin": "(?i)(</?)(Mv(WHILE|FOR|FOREACH))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.mv"
            },
            "2": {
              "name": "entity.name.tag.mv keyword.control.loop.mv"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.mv"
            }
          },
          "name": "meta.tag.block.$2.mv",
          "patterns": [
            {
              "include": "#text-attributes"
            }
          ]
        },
        {
          "begin": "(?i)(</?)(Mv(FUNCTION))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.mv"
            },
            "2": {
              "name": "entity.name.tag.mv storage.type.function.mv"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.mv"
            }
          },
          "name": "meta.tag.block.$2.mv",
          "patterns": [
            {
              "include": "#text-attribute-function-name"
            },
            {
              "include": "#text-attributes"
            }
          ]
        },
        {
          "begin": "(?i)(</?)(Mv(IMPORT|DO))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.mv"
            },
            "2": {
              "name": "entity.name.tag.mv keyword.control.import.mv"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.mv"
            }
          },
          "name": "meta.tag.block.$2.mv",
          "patterns": [
            {
              "include": "#text-attributes"
            }
          ]
        },
        {
          "begin": "(?i)(<)(Mv(INCLUDE))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.mv"
            },
            "2": {
              "name": "entity.name.tag.mv keyword.control.import.mv"
            }
          },
          "end": "/?>",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.mv"
            }
          },
          "name": "meta.tag.inline.$2.mv",
          "patterns": [
            {
              "include": "#text-attributes"
            }
          ]
        },
        {
          "begin": "(?i)(<)(Mv(ADD|CLOSE|CLOSEVIEW|COMMIT|CREATE|DBCOMMAND|DELETE|FILTER|FIND|GO|MAKEINDEX|EXPORT|OPEN|OPENVIEW|QUERY|PACK|PRIMARY|(RE|SET)INDEX|ROLLBACK|REVEALSTRUCTURE|TRANSACT|UNDELETE|UPDATE))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.mv"
            },
            "2": {
              "name": "entity.name.tag.mv support.class.db.mv"
            }
          },
          "end": "/?>",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.mv"
            }
          },
          "name": "meta.tag.inline.$2.mv",
          "patterns": [
            {
              "include": "#text-attributes"
            }
          ]
        },
        {
          "begin": "(?i)(</?)(Mv(LOCKFILE))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.mv"
            },
            "2": {
              "name": "entity.name.tag.mv support.class.db.mv"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.mv"
            }
          },
          "name": "meta.tag.block.$2.mv",
          "patterns": [
            {
              "include": "#text-attributes"
            }
          ]
        },
        {
          "begin": "(?i)(<)(Mv(EVAL|HIDE))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.mv"
            },
            "2": {
              "name": "entity.name.tag.mv"
            }
          },
          "end": "/?>",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.mv"
            }
          },
          "name": "meta.tag.inline.$2.mv",
          "patterns": [
            {
              "include": "#text-attributes"
            }
          ]
        },
        {
          "begin": "(?i)(</?)(Mv(CALL|POP|SMTP))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.mv"
            },
            "2": {
              "name": "entity.name.tag.mv"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.mv"
            }
          },
          "name": "meta.tag.block.$2.mv",
          "patterns": [
            {
              "include": "#text-attributes"
            }
          ]
        }
      ]
    },
    "text-attribute-function-name": {
      "begin": "(?i)(NAME)(?![\\w:-])",
      "beginCaptures": {
        "0": {
          "name": "entity.other.attribute-name.mv"
        }
      },
      "end": "(?=\\s*+[^=\\s])",
      "name": "meta.attribute.NAME.mv",
      "patterns": [
        {
          "begin": "=",
          "beginCaptures": {
            "0": {
              "name": "punctuation.separator.key-value.mv"
            }
          },
          "end": "(?<=[^\\s=])(?!\\s*=)|(?=/?>)",
          "patterns": [
            {
              "begin": "\"",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.string.begin.mv"
                }
              },
              "end": "\"",
              "endCaptures": {
                "0": {
                  "punctuation.definition.string.end.mv": null
                }
              },
              "name": "string.quoted.double.mv",
              "contentName": "entity.name.function.mv meta.definition.function.mv meta.function.mv"
            },
            {
              "match": "=",
              "name": "invalid.illegal.unexpected-equals-sign.mv"
            }
          ]
        }
      ]
    },
    "text-attributes": {
      "begin": "([a-zA-Z-_]+)(?![\\w:-])",
      "beginCaptures": {
        "0": {
          "name": "entity.other.attribute-name.mv"
        }
      },
      "end": "(?=\\s*+[^=\\s])",
      "name": "meta.attribute.$1.mv",
      "patterns": [
        {
          "begin": "=",
          "beginCaptures": {
            "0": {
              "name": "punctuation.separator.key-value.mv"
            }
          },
          "end": "(?<=[^\\s=])(?!\\s*=)|(?=/?>)",
          "patterns": [
            {
              "match": "([0-9.])+",
              "name": "constant.numeric.unquoted.mv"
            },
            {
              "begin": "(\")\\s*(?=\\{)",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.string.begin.mv string.quoted.double.mv"
                }
              },
              "end": "(?<=\\})\\s*(\")",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.string.end.mv string.quoted.double.mv"
                }
              }
            },
            {
              "begin": "\"",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.string.begin.mv"
                }
              },
              "end": "\"",
              "endCaptures": {
                "0": {
                  "punctuation.definition.string.end.mv": null
                }
              },
              "name": "string.quoted.double.mv",
              "patterns": [
                {
                  "include": "#source-variables"
                }
              ]
            },
            {
              "match": "=",
              "name": "invalid.illegal.unexpected-equals-sign.mv"
            }
          ]
        }
      ]
    },
    "expression": {
      "begin": "{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.expression.begin.mv"
        }
      },
      "end": "}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.expression.end.mv"
        }
      },
      "name": "text.expr.mv source.mv",
      "patterns": [
        {
          "include": "#source-mv"
        }
      ]
    },
    "source-mv": {
      "patterns": [
        {
          "include": "#source-brackets"
        },
        {
          "include": "#source-group"
        },
        {
          "include": "#source-string-single"
        },
        {
          "include": "#source-variables"
        },
        {
          "include": "#source-numbers"
        },
        {
          "include": "#source-operators"
        },
        {
          "include": "#source-constant"
        },
        {
          "include": "#source-functions"
        }
      ]
    },
    "source-operators": {
      "patterns": [
        {
          "match": "(\\b(?i:POW|MOD|ROUND)\\b)",
          "name": "keyword.operator.arithmetic.mv"
        },
        {
          "match": "--|\\+\\+|/|\\*|\\+|-",
          "name": "keyword.operator.arithmetic.mv"
        },
        {
          "match": "(\\b(?i:EQ|GT|GE|LT|NE|LE)\\b)",
          "name": "keyword.operator.comparison.mv"
        },
        {
          "match": "(\\b(?i:NOT|AND|OR|ISNULL)\\b)",
          "name": "keyword.operator.logical.mv"
        },
        {
          "match": "(\\b(?i:IN|CIN|EIN|ECIN|CRYPT)\\b)",
          "name": "keyword.operator.string.mv"
        },
        {
          "match": "\\$",
          "name": "keyword.operator.string.mv"
        }
      ]
    },
    "source-constants": {
      "patterns": [
        {
          "match": "\\b(?i:NULL)\\b",
          "name": "constant.language.null.mv"
        }
      ]
    },
    "source-numbers": {
      "patterns": [
        {
          "match": "\\b(([0-9]+(\\.[0-9]+)?))\\b",
          "name": "constant.numeric.mv"
        }
      ]
    },
    "source-variables": {
      "patterns": [
        {
          "name": "variable.language.local.mv",
          "match": "\\b((l|local)\\.)([A-Za-z0-9_]+)([a-zA-Z0-9:_\\.-]*)"
        },
        {
          "name": "variable.language.global.mv",
          "match": "\\b((g|global)\\.)([A-Za-z0-9_]+)([a-zA-Z0-9:_\\.-]*)"
        },
        {
          "name": "variable.language.system.mv",
          "match": "\\b((s|system)\\.)([A-Za-z0-9_]+)([a-zA-Z0-9:_\\.-]*)"
        },
        {
          "match": "(?<=\\])(:)([a-zA-Z0-9:_\\.-]*)",
          "name": "variable.language.array-continue.mv"
        },
        {
          "match": "\\b(?i:POS)[0-9]+\\b",
          "name": "variable.language.posx.mv"
        }
      ]
    },
    "source-string-single": {
      "patterns": [
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.mv"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.mv"
            }
          },
          "name": "string.quoted.single.mv",
          "patterns": [
            {
              "include": "#source-string-escapes"
            }
          ]
        }
      ]
    },
    "source-string-escapes": {
      "patterns": [
        {
          "match": "\\\\\\s*\\n",
          "name": "constant.character.escape.newline.js"
        },
        {
          "match": "\\\\(x[\\da-fA-F][\\da-fA-F]|u[\\da-fA-F][\\da-fA-F][\\da-fA-F][\\da-fA-F]|.)",
          "name": "constant.character.escape.js"
        }
      ]
    },
    "source-functions": {
      "patterns": [
        {
          "begin": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.mv"
            },
            "2": {
              "name": "punctuation.definition.group.mv"
            }
          },
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.terminator.group.mv"
            }
          },
          "patterns": [
            {
              "include": "#source-mv"
            }
          ]
        }
      ]
    },
    "source-brackets-no-functions": {
      "patterns": [
        {
          "begin": "\\[",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.brackets.mv"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "1": {
              "name": "punctuation.terminator.bracket.mv"
            }
          },
          "name": "meta.brackets.mv",
          "patterns": [
            {
              "match": "\\]",
              "name": "invalid.illegal.stray-bracket-end"
            },
            {
              "include": "#source-mv"
            }
          ]
        }
      ]
    },
    "source-brackets": {
      "patterns": [
        {
          "begin": "\\[",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.brackets.mv"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "1": {
              "name": "punctuation.terminator.bracket.mv"
            }
          },
          "name": "meta.brackets.mv",
          "patterns": [
            {
              "match": "\\]",
              "name": "invalid.illegal.stray-bracket-end"
            },
            {
              "include": "#source-mv"
            }
          ]
        }
      ]
    },
    "source-group-no-functions": {
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.group.mv"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "1": {
              "name": "punctuation.terminator.group.mv"
            }
          },
          "name": "meta.group.mv",
          "patterns": [
            {
              "match": "\\)",
              "name": "invalid.illegal.stray-group-end"
            },
            {
              "include": "#source-mv"
            }
          ]
        }
      ]
    },
    "source-group": {
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.group.mv"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "1": {
              "name": "punctuation.terminator.group.mv"
            }
          },
          "name": "meta.group.mv",
          "patterns": [
            {
              "match": "\\)",
              "name": "invalid.illegal.stray-group-end"
            },
            {
              "include": "#source-mv"
            }
          ]
        }
      ]
    }
  }
}