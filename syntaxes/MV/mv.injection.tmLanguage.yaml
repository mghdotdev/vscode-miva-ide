%YAML 1.2
---
name: Miva Script (Injection)
scopeName: mv.injection
injectionSelector: 'L:text.html.mv'

patterns:
  - include: '#comments'
  - include: '#expression'
  - include: '#text-tags'

repository:

  comments:
    begin: '(?i)<MvCOMMENT>'
    captures:
      0: {name: punctuation.definition.comment.mv}
    end: '(?i)</MvCOMMENT>'
    name: comment.block.mv

  # =-======================== Text ========================-= #
  text-tags:
    patterns:

      # Inline Meta Tags
      - begin: '(?i)(<)(MIVA|(Mv)(LOCALIZED|LOCALIZED-TOKEN))(?=\s|/?>)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mv}
          2: {name: entity.name.tag.mv meta.preprocessor.name.mv}
        end: '/?>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mv}
        name: meta.tag.inline.$2.mv
        patterns:
          - include: '#text-attributes'
      
      # Block Meta Tags
      - begin: '(?i)(</?)(Mv(ASSEMBLY|ASYNCHRONOUS|COMMERCE|LOCALIZED-TEXT|CAPTURE))(?=\s|/?>)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mv}
          2: {name: entity.name.tag.mv meta.preprocessor.name.mv}
        end: '>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mv}
        name: meta.tag.block.$2.mv
        patterns:
          - include: '#text-attributes'
      
      # Inline Control Flow Tags
      - begin: '(?i)(<)(Mv((CALL|WHILE|FOR|FOREACH|IMPORT|CALL|COMMERCE|POP)(STOP|CONTINUE)|(FUNC|FUNCTION)(RETURN)|EXIT|SKIP))(?=\s|/?>)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mv}
          2: {name: entity.name.tag.mv keyword.control.flow.mv}
        end: '/?>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mv}
        name: meta.tag.inline.$2.mv
        patterns:
          - include: '#text-attributes'
      
      # Inline Storage Tags
      - begin: '(?i)(<)(Mv(ASSIGN|MEMBER|DIMENSION|REFERENCE))(?=\s|/?>)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mv}
          2: {name: entity.name.tag.mv meta.var.expr.mv}
        end: '/?>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mv}
        name: meta.tag.inline.$2.mv
        patterns:
          - include: '#text-attributes'
      
      # Block Storage Tags
      - begin: '(?i)(</?)(Mv((ASSIGN|REFERENCE)ARRAY))(?=\s|/?>)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mv}
          2: {name: entity.name.tag.mv meta.var.expr.mv}
        end: '>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mv}
        name: meta.tag.block.$2.mv
        patterns:
          - include: '#text-attributes'
      
      # Block Control Conditional Tags
      - begin: '(?i)(</?)(Mv(IF|ELSE|ELSEIF|IFDEF|IFNDEF))(?=\s|/?>)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mv}
          2: {name: entity.name.tag.mv keyword.control.conditional.mv}
        end: '>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mv}
        name: meta.tag.block.$2.mv
        patterns:
          - include: '#text-attributes'
      
      # Block Control Loop Tags
      - begin: '(?i)(</?)(Mv(WHILE|FOR|FOREACH))(?=\s|/?>)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mv}
          2: {name: entity.name.tag.mv keyword.control.loop.mv}
        end: '>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mv}
        name: meta.tag.block.$2.mv
        patterns:
          - include: '#text-attributes'
      
      # Block Function Definition Tag
      - begin: '(?i)(</?)(Mv(FUNCTION))(?=\s|/?>)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mv}
          2: {name: entity.name.tag.mv storage.type.function.mv}
        end: '>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mv}
        name: meta.tag.block.$2.mv
        patterns:
          - include: '#text-attribute-function-name'
          - include: '#text-attributes'
      
      # Block Import Tags
      - begin: '(?i)(</?)(Mv(IMPORT|DO))(?=\s|/?>)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mv}
          2: {name: entity.name.tag.mv keyword.control.import.mv}
        end: '>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mv}
        name: meta.tag.block.$2.mv
        patterns:
          - include: '#text-attributes'
      
      # Inline Import Tags
      - begin: '(?i)(<)(Mv(INCLUDE))(?=\s|/?>)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mv}
          2: {name: entity.name.tag.mv keyword.control.import.mv}
        end: '/?>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mv}
        name: meta.tag.inline.$2.mv
        patterns:
          - include: '#text-attributes'
      
      # Inline DB Tags
      - begin: '(?i)(<)(Mv(ADD|CLOSE|CLOSEVIEW|COMMIT|CREATE|DBCOMMAND|DELETE|FILTER|FIND|GO|MAKEINDEX|EXPORT|OPEN|OPENVIEW|QUERY|PACK|PRIMARY|(RE|SET)INDEX|ROLLBACK|REVEALSTRUCTURE|TRANSACT|UNDELETE|UPDATE))(?=\s|/?>)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mv}
          2: {name: entity.name.tag.mv support.class.db.mv}
        end: '/?>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mv}
        name: meta.tag.inline.$2.mv
        patterns:
          - include: '#text-attributes'
      
      # Block DB Tags
      - begin: '(?i)(</?)(Mv(LOCKFILE))(?=\s|/?>)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mv}
          2: {name: entity.name.tag.mv support.class.db.mv}
        end: '>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mv}
        name: meta.tag.block.$2.mv
        patterns:
          - include: '#text-attributes'

      # Inline Execution Tags
      - begin: '(?i)(<)(Mv(EVAL|HIDE))(?=\s|/?>)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mv}
          2: {name: entity.name.tag.mv}
        end: '/?>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mv}
        name: meta.tag.inline.$2.mv
        patterns:
          - include: '#text-attributes'

      # Block Execution Tags
      - begin: '(?i)(</?)(Mv(CALL|POP|SMTP))(?=\s|/?>)'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mv}
          2: {name: entity.name.tag.mv}
        end: '>'
        endCaptures:
          0: {name: punctuation.definition.tag.end.mv}
        name: meta.tag.block.$2.mv
        patterns:
          - include: '#text-attributes'
  
  text-attribute-function-name:
    begin: '(?i)(NAME)(?![\w:-])'
    beginCaptures:
      0: {name: entity.other.attribute-name.mv}
    end: '(?=\s*+[^=\s])'
    name: meta.attribute.NAME.mv
    patterns:
      - begin: '='
        beginCaptures:
          0: {name: punctuation.separator.key-value.mv}
        end: '(?<=[^\s=])(?!\s*=)|(?=/?>)'
        patterns:
          # Quoted Function Name
          - begin: '"'
            beginCaptures:
              0: {name: punctuation.definition.string.begin.mv}
            end: '"'
            endCaptures:
              0: {punctuation.definition.string.end.mv}
            name: string.quoted.double.mv
            contentName: entity.name.function.mv meta.definition.function.mv meta.function.mv
          
          # Invalid extra equals
          - match: '='
            name: invalid.illegal.unexpected-equals-sign.mv

  text-attributes:
    begin: '([a-zA-Z-_]+)(?![\w:-])'
    beginCaptures:
      0: {name: entity.other.attribute-name.mv}
    end: '(?=\s*+[^=\s])'
    name: meta.attribute.$1.mv
    patterns:
      - begin: '='
        beginCaptures:
          0: {name: punctuation.separator.key-value.mv}
        end: '(?<=[^\s=])(?!\s*=)|(?=/?>)'
        patterns:
          # Unquoted numbers
          - match: ([0-9.])+
            name: constant.numeric.unquoted.mv
          
          # Quoted expression
          - begin: '(")\s*(?=\{)'
            beginCaptures:
              0: {name: punctuation.definition.string.begin.mv string.quoted.double.mv}
            end: '(?<=\})\s*(")'
            endCaptures:
              0: {name: punctuation.definition.string.end.mv string.quoted.double.mv}

          # Quoted strings
          - begin: '"'
            beginCaptures:
              0: {name: punctuation.definition.string.begin.mv}
            end: '"'
            endCaptures:
              0: {punctuation.definition.string.end.mv}
            name: string.quoted.double.mv
            patterns:
              - include: '#source-variables'

          # Invalid extra equals
          - match: '='
            name: invalid.illegal.unexpected-equals-sign.mv
  
  # =-======================== Expression ========================-= #
  expression:
    begin: '{'
    beginCaptures:
      0: {name: punctuation.definition.expression.begin.mv}
    end: '}'
    endCaptures:
      0: {name: punctuation.definition.expression.end.mv}
    name: text.expr.mv source.mv
    patterns:
      - include: '#source-mv'

  # =-======================== Source ========================-= #
  source-mv:
    patterns:
      - include: '#source-brackets'
      - include: '#source-group'
      - include: '#source-string-single'
      - include: '#source-variables'
      - include: '#source-numbers'
      - include: '#source-operators'
      - include: '#source-constant'
      - include: '#source-functions'

  # =-======== Operators - Source ========-= #
  source-operators:
    patterns:
      # Arithmetic Operators
      - match: (\b(?i:POW|MOD|ROUND)\b)
        name: keyword.operator.arithmetic.mv

      # Arithmetic Operators (Symbols)
      - match: --|\+\+|/|\*|\+|-
        name: keyword.operator.arithmetic.mv

      # Comparison Operators
      - match: (\b(?i:EQ|GT|GE|LT|NE|LE)\b)
        name: keyword.operator.comparison.mv

      # Logical Operators
      - match: (\b(?i:NOT|AND|OR|ISNULL)\b)
        name: keyword.operator.logical.mv

      # Text Operators
      - match: (\b(?i:IN|CIN|EIN|ECIN|CRYPT)\b)
        name: keyword.operator.string.mv

      # Text Operators (Symbols)
      - match: \$
        name: keyword.operator.string.mv


  # =-======== Constants - Source ========-= #
  source-constants:
    patterns:
      # NULL
      - match: \b(?i:NULL)\b
        name: constant.language.null.mv

  # =-======== Numbers - Source ========-= #
  source-numbers:
    patterns:
      - match: \b(([0-9]+(\.[0-9]+)?))\b
        name: constant.numeric.mv


  # =-======== Variables - Source ========-= #
  source-variables:
    patterns:
      # Variables Base
      - name: variable.language.local.mv
        match: \b((l|local)\.)([A-Za-z0-9_]+)([a-zA-Z0-9:_\.]*)

      - name: variable.language.global.mv
        match: \b((g|global)\.)([A-Za-z0-9_]+)([a-zA-Z0-9:_\.]*)

      - name: variable.language.system.mv
        match: \b((s|system)\.)([A-Za-z0-9_]+)([a-zA-Z0-9:_\.]*)

      # Variables Cont. (continue after square brackets)
      - match: (?<=\])(:)([a-zA-Z0-9:_\.]*)
        name: variable.language.array-continue.mv

      # POSX
      - match: \b(?i:POS)[0-9]+\b
        name: variable.language.posx.mv

  # =-======== Strings - Source ========-= #
  source-string-single:
    patterns:
      - begin: "'"
        beginCaptures:
          '0': {name: punctuation.definition.string.begin.mv}
        end: "'"
        endCaptures:
          '0': {name: punctuation.definition.string.end.mv}
        name: string.quoted.single.mv
        patterns:
        - include: '#source-string-escapes'

  source-string-escapes:
    patterns:
    - match: \\\s*\n
      name: constant.character.escape.newline.js
      
    - match: '\\(x[\da-fA-F][\da-fA-F]|u[\da-fA-F][\da-fA-F][\da-fA-F][\da-fA-F]|.)'
      name: constant.character.escape.js


  # =-======== Functions - Source ========-= #
  source-functions:
    patterns:
      - begin: '\b([a-zA-Z_][a-zA-Z0-9_]*)\s*(\()'
        beginCaptures:
          1: {name: support.function.mv}
          2: {name: puncuation.definition.group.mv}
        end: '(\))'
        endCaptures:
          1: {name: puncuation.terminator.group.mv}
        patterns:
          - include: '#source-mv'

  # =-======== Brackets / Group (Parenthesis) - Source ========-= #
  source-brackets-no-functions:
    patterns:
      - begin: '\['
        beginCaptures:
          1: {name: puncuation.definition.brackets.mv}
        end: '\]'
        endCaptures:
          1: {name: puncuation.terminator.bracket.mv}
        name: meta.brackets.mv
        patterns:
          - match: '\]'
            name: invalid.illegal.stray-bracket-end
          - include: '#source-mv'
  
  source-brackets:
    patterns:
      - begin: '\['
        beginCaptures:
          1: {name: puncuation.definition.brackets.mv}
        end: '\]'
        endCaptures:
          1: {name: puncuation.terminator.bracket.mv}
        name: meta.brackets.mv
        patterns:
          - match: '\]'
            name: invalid.illegal.stray-bracket-end
          - include: '#source-mv'

  source-group-no-functions:
    patterns:
      - begin: '\('
        beginCaptures:
          1: {name: puncuation.definition.group.mv}
        end: '\)'
        endCaptures:
          1: {name: puncuation.terminator.group.mv}
        name: meta.group.mv
        patterns:
          - match: '\)'
            name: invalid.illegal.stray-group-end
          - include: '#source-mv'

  source-group:
    patterns:
      - begin: '\('
        beginCaptures:
          1: {name: puncuation.definition.group.mv}
        end: '\)'
        endCaptures:
          1: {name: puncuation.terminator.group.mv}
        name: meta.group.mv
        patterns:
          - match: '\)'
            name: invalid.illegal.stray-group-end
          - include: '#source-mv'