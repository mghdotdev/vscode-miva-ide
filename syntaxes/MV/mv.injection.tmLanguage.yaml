%YAML 1.2
---
name: Miva Script (Injection)
scopeName: mv.injection
injectionSelector: 'L:text.html.mv'

patterns:
  - include: '#comments'
  - include: '#expression'
  - include: '#text-tags'

repository:

  comments:
    begin: '(?i)<MvCOMMENT>'
    captures:
      0: {name: punctuation.definition.comment.mv}
    end: '(?i)</MvCOMMENT>'
    name: comment.block.mv

  # =-======================== Text ========================-= #
  text-tags:
    patterns:
      # Block Tags
      - begin: '(?i)(</?)(Mv)(?!COMMENT)([a-z]+?)\b'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mv meta.preprocessor.begin.mv}
          2: {name: storage.type.namespace.mv meta.preprocessor.namespace.mv}
          3: {name: storage.type.localname.mv meta.preprocessor.localname.mv}
        end: '(>)'
        endCaptures:
          1: {name: punctuation.definition.tag.end.mv meta.preprocessor.end.mv}
        name: meta.tag.block.mv
        patterns:
          - include: '#text-tag-components'

      # Inline Tags
      - begin: '(?i)(<)(Mv)(?!COMMENT)([a-z]+?)\b'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mv meta.preprocessor.begin.mv}
          2: {name: storage.type.namespace.mv meta.preprocessor.namespace.mv}
          3: {name: storage.type.localname.mv meta.preprocessor.localname.mv}
        end: '(\/?>)'
        endCaptures:
          1: {name: punctuation.definition.tag.end.mv meta.preprocessor.end.mv}
        name: meta.tag.inline.mv
        patterns:
          - include: '#text-tag-components'
      
      # Miva Tag
      - begin: '(?i)(<)(MIVA)\b'
        beginCaptures:
          1: {name: punctuation.definition.tag.begin.mv meta.preprocessor.begin.mv}
          2: {name: storage.type.localname.mv meta.preprocessor.localname.mv}
        end: '(\/?>)'
        endCaptures:
          1: {name: punctuation.definition.tag.end.mv meta.preprocessor.end.mv}
        name: meta.tag.inline.mv
        patterns:
          - include: '#text-tag-components'
  
  text-tag-components:
    patterns:
      - include: '#text-attribute-generic'
      - include: '#text-expression'
      - include: '#text-string-double-quoted'
      - include: '#text-unquoted-numbers'
  
  text-attribute-generic:
    begin: '(?<=[^=])\b([a-zA-Z0-9\:\-\_]+)\s*'
    beginCaptures:
      1: {name: entity.other.attribute-name.generic.mv}
    end: '=?'
    endCaptures:
      0: {name: punctuation.separator.key-value.mv}
  
  text-unquoted-numbers:
    patterns:
      - match: '\s*(=?)([0-9]+(\.[0-9]+)?)(\/>)'
        name: invalid.illegal.unquoted-numeric-constant
      - begin: '\s*(=?)([0-9]+(\.[0-9]+)?)\s*(\/?>)'
        beginCaptures:
          1: {name: punctuation.separator.key-value.mv}
          2: {name: constant.numeric.mv}
          3: {name: constant.numeric.mv}
          4: {name: punctuation.definition.tag.end.mv}

  text-string-double-quoted:
    begin: '"'
    beginCaptures:
      0: {name: punctuation.definition.string.begin.mv}
    end: '"'
    endCaptures:
      0: {name: punctuation.definition.string.end.mv}
    name: string.quoted.double.mv
    patterns:
      - include: '#source-variables'
  
  text-expression:
    begin: '(")\s*({)'
    beginCaptures:
      1: {name: punctuation.definition.string.begin.mv string.quoted.double.mv}
      2: {name: punctuation.definition.expression.begin.mv}
    end: '(})\s*(")'
    endCaptures:
      1: {name: punctuation.definition.string.end.mv string.quoted.double.mv}
      2: {name: punctuation.definition.expression.end.mv}
    name: text.expr.mv source.mv
    patterns:
      - include: '#source-mv'
  
  # =-======================== Expression ========================-= #
  expression:
    begin: '{'
    beginCaptures:
      0: {name: punctuation.definition.expression.begin.mv}
    end: '}'
    endCaptures:
      0: {name: punctuation.definition.expression.end.mv}
    name: text.expr.mv source.mv
    patterns:
      - include: '#source-mv'

  # =-======================== Source ========================-= #
  source-mv:
    patterns:
      - include: '#source-brackets'
      - include: '#source-group'
      - include: '#source-string-single'
      - include: '#source-variables'
      - include: '#source-numbers'
      - include: '#source-operators'
      - include: '#source-constant'
      - include: '#source-functions'

  # =-======== Operators - Source ========-= #
  source-operators:
    patterns:
      # Arithmetic Operators
      - match: (\b(?i:POW|MOD|ROUND)\b)
        name: keyword.operator.arithmetic.mv

      # Arithmetic Operators (Symbols)
      - match: --|\+\+|/|\*|\+|-
        name: keyword.operator.arithmetic.mv

      # Comparison Operators
      - match: (\b(?i:EQ|GT|GE|LT|NE|LE)\b)
        name: keyword.operator.comparison.mv

      # Logical Operators
      - match: (\b(?i:NOT|AND|OR|ISNULL)\b)
        name: keyword.operator.logical.mv

      # Text Operators
      - match: (\b(?i:IN|CIN|EIN|ECIN|CRYPT)\b)
        name: keyword.operator.string.mv

      # Text Operators (Symbols)
      - match: \$
        name: keyword.operator.string.mv


  # =-======== Constants - Source ========-= #
  source-constants:
    patterns:
      # NULL
      - match: \b(?i:NULL)\b
        name: constant.language.null.mv

  # =-======== Numbers - Source ========-= #
  source-numbers:
    patterns:
      - match: \b(([0-9]+(\.[0-9]+)?))\b
        name: constant.numeric.mv


  # =-======== Variables - Source ========-= #
  source-variables:
    patterns:
      # Variables Base
      - name: variable.language.local.mv
        match: \b((l|local)\.)([A-Za-z0-9_]+)([a-zA-Z0-9:_\.]*)

      - name: variable.language.global.mv
        match: \b((g|global)\.)([A-Za-z0-9_]+)([a-zA-Z0-9:_\.]*)

      - name: variable.language.system.mv
        match: \b((s|system)\.)([A-Za-z0-9_]+)([a-zA-Z0-9:_\.]*)

      # Variables Cont. (continue after square brackets)
      - match: (?<=\])(:)([a-zA-Z0-9:_\.]*)
        name: variable.language.array-continue.mv

      # POSX
      - match: \b(?i:POS)[0-9]+\b
        name: variable.language.posx.mv

  # =-======== Strings - Source ========-= #
  source-string-single:
    patterns:
      - begin: "'"
        beginCaptures:
          '0': {name: punctuation.definition.string.begin.mv}
        end: "'"
        endCaptures:
          '0': {name: punctuation.definition.string.end.mv}
        name: string.quoted.single.mv
        patterns:
        - include: '#source-string-escapes'

  source-string-escapes:
    patterns:
    - match: \\\s*\n
      name: constant.character.escape.newline.js
      
    - match: '\\(x[\da-fA-F][\da-fA-F]|u[\da-fA-F][\da-fA-F][\da-fA-F][\da-fA-F]|.)'
      name: constant.character.escape.js


  # =-======== Functions - Source ========-= #
  source-functions:
    patterns:
      - begin: '\b([a-zA-Z_][a-zA-Z0-9_]*)\s*(\()'
        beginCaptures:
          1: {name: support.function.builtin.mv}
          2: {name: puncuation.definition.group.mv}
        end: '(\))'
        endCaptures:
          1: {name: puncuation.terminator.group.mv}
        name: meta.function.builtin.declaration.mv
        patterns:
          - include: '#source-mv'

  # =-======== Brackets / Group (Parenthesis) - Source ========-= #
  source-brackets-no-functions:
    patterns:
      - begin: '\['
        beginCaptures:
          1: {name: puncuation.definition.brackets.mv}
        end: '\]'
        endCaptures:
          1: {name: puncuation.terminator.bracket.mv}
        name: meta.brackets.mv
        patterns:
          - match: '\]'
            name: invalid.illegal.stray-bracket-end
          - include: '#source-mv'
  
  source-brackets:
    patterns:
      - begin: '\['
        beginCaptures:
          1: {name: puncuation.definition.brackets.mv}
        end: '\]'
        endCaptures:
          1: {name: puncuation.terminator.bracket.mv}
        name: meta.brackets.mv
        patterns:
          - match: '\]'
            name: invalid.illegal.stray-bracket-end
          - include: '#source-mv'

  source-group-no-functions:
    patterns:
      - begin: '\('
        beginCaptures:
          1: {name: puncuation.definition.group.mv}
        end: '\)'
        endCaptures:
          1: {name: puncuation.terminator.group.mv}
        name: meta.group.mv
        patterns:
          - match: '\)'
            name: invalid.illegal.stray-group-end
          - include: '#source-mv'

  source-group:
    patterns:
      - begin: '\('
        beginCaptures:
          1: {name: puncuation.definition.group.mv}
        end: '\)'
        endCaptures:
          1: {name: puncuation.terminator.group.mv}
        name: meta.group.mv
        patterns:
          - match: '\)'
            name: invalid.illegal.stray-group-end
          - include: '#source-mv'