{
  "name": "MVT (Injection)",
  "scopeName": "mvt.injection",
  "injectionSelector": "L:text.html.mvt",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#entities"
    },
    {
      "include": "#tags"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "comment": "MVT Comment",
          "begin": "<mvt:comment>",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.mvt"
            }
          },
          "end": "</mvt:comment>",
          "name": "comment.block.mvt"
        }
      ]
    },
    "entities": {
      "patterns": [
        {
          "match": "(?i)(&)(mvt)(a|e|j|s)?(:)([a-zA-Z_][a-zA-Z0-9_:\\[\\]]*)(;)",
          "name": "constant.character.entity.mvt"
        }
      ]
    },
    "tags": {
      "patterns": [
        {
          "include": "#tag-assign"
        },
        {
          "include": "#tag-call"
        },
        {
          "include": "#tag-capture"
        },
        {
          "include": "#tag-do"
        },
        {
          "include": "#tag-else"
        }
      ]
    },
    "tag-assign": {
      "patterns": [
        {
          "begin": "(?i)(<)(mvt)(:)(assign)\\b",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt"
            },
            "2": {
              "name": "storage.type.namespace.mvt meta.preprocessor.namespace.mvt"
            },
            "3": {
              "name": "storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt"
            },
            "4": {
              "name": "storage.type.localname.mvt meta.preprocessor.localname.mvt"
            }
          },
          "end": "(\\/>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt"
            }
          },
          "name": "meta.tag.inline.assign.mvt"
        }
      ]
    },
    "tag-call": {
      "patterns": [
        {
          "begin": "(</?)(?i:(mvt)(:)(call)\\b)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt"
            },
            "2": {
              "name": "storage.type.namespace.mvt meta.preprocessor.namespace.mvt"
            },
            "3": {
              "name": "storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt"
            },
            "4": {
              "name": "storage.type.localname.mvt meta.preprocessor.localname.mvt"
            }
          },
          "end": "(>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt"
            }
          },
          "name": "meta.tag.block.call.mvt"
        }
      ]
    },
    "tag-capture": {
      "patterns": [
        {
          "begin": "(</?)(?i:(mvt)(:)(capture)\\b)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt"
            },
            "2": {
              "name": "storage.type.namespace.mvt meta.preprocessor.namespace.mvt"
            },
            "3": {
              "name": "storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt"
            },
            "4": {
              "name": "storage.type.localname.mvt meta.preprocessor.localname.mvt"
            }
          },
          "end": "(>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt"
            }
          },
          "name": "meta.tag.block.capture.mvt"
        }
      ]
    },
    "tag-do": {
      "patterns": [
        {
          "begin": "(?i)(<)(mvt)(:)(do)\\b",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt"
            },
            "2": {
              "name": "storage.type.namespace.mvt meta.preprocessor.namespace.mvt"
            },
            "3": {
              "name": "storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt"
            },
            "4": {
              "name": "storage.type.localname.mvt meta.preprocessor.localname.mvt"
            }
          },
          "end": "(\\/>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt"
            }
          },
          "name": "meta.tag.inline.do.mvt"
        }
      ]
    },
    "tag-else": {
      "patterns": [
        {
          "begin": "(?i)(<)(mvt)(:)(else)\\b",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.mvt meta.preprocessor.begin.mvt"
            },
            "2": {
              "name": "storage.type.namespace.mvt meta.preprocessor.namespace.mvt"
            },
            "3": {
              "name": "storage.type.namespace.separator.mvt meta.preprocessor.namespace.separator.mvt"
            },
            "4": {
              "name": "storage.type.localname.mvt meta.preprocessor.localname.mvt"
            }
          },
          "end": "(>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.end.mvt meta.preprocessor.end.mvt"
            }
          },
          "name": "meta.tag.inline.else.mvt",
          "patterns": [
            {
              "match": "\\/",
              "name": "invalid.illegal.slash.mvt"
            }
          ]
        }
      ]
    },
    "source-mvt": {
      "patterns": [
        {
          "include": "#source-string-single"
        },
        {
          "include": "#source-variables"
        },
        {
          "include": "#source-numbers"
        },
        {
          "include": "#source-operators"
        },
        {
          "include": "#source-constants"
        }
      ]
    },
    "source-operators": {
      "patterns": [
        {
          "match": "(\\b(?i:POW|MOD|ROUND)\\b)",
          "name": "keyword.operator.arithmetic.mvt"
        },
        {
          "match": "--|\\+\\+|/|\\*|\\+|-",
          "name": "keyword.operator.arithmetic.mvt"
        },
        {
          "match": "(\\b(?i:EQ|GT|GE|LT|NE|LE)\\b)",
          "name": "keyword.operator.comparison.mvt"
        },
        {
          "match": "(\\b(?i:NOT|AND|OR|ISNULL)\\b)",
          "name": "keyword.operator.logical.mvt"
        },
        {
          "match": "(\\b(?i:IN|CIN|EIN|ECIN|CRYPT)\\b)",
          "name": "keyword.operator.string.mvt"
        },
        {
          "match": "\\$",
          "name": "keyword.operator.string.mvt"
        }
      ]
    },
    "source-constants": {
      "patterns": [
        {
          "match": "\\b(?i:NULL)\\b",
          "name": "constant.language.null.mvt"
        }
      ]
    },
    "source-numbers": {
      "patterns": [
        {
          "match": "\\b(([0-9]+(\\.[0-9]+)?))\\b",
          "name": "constant.numeric.mvt"
        }
      ]
    },
    "source-variables": {
      "patterns": [
        {
          "name": "variable.language.local.mvt",
          "match": "((l|local)\\.)([A-Za-z0-9_]+)([a-zA-Z0-9:_\\.]*)"
        },
        {
          "name": "variable.language.global.mvt",
          "match": "((g|global)\\.)([A-Za-z0-9_]+)([a-zA-Z0-9:_\\.]*)"
        },
        {
          "name": "variable.language.system.mvt",
          "match": "((s|system)\\.)([A-Za-z0-9_]+)([a-zA-Z0-9:_\\.]*)"
        },
        {
          "match": "(?<=\\])(:)([a-zA-Z0-9:_\\.]*)",
          "name": "variable.language.array-continue.mvt"
        },
        {
          "match": "\\b(?i:POS)[0-9]+\\b",
          "name": "variable.language.posx.mvt"
        }
      ]
    },
    "source-string-single": {
      "patterns": [
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.mvt"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.mvt"
            }
          },
          "name": "string.quoted.single",
          "patterns": [
            {
              "include": "#source-string-escapes"
            }
          ]
        }
      ]
    },
    "source-string-escapes": {
      "patterns": [
        {
          "match": "\\\\\\s*\\n",
          "name": "constant.character.escape.newline.js"
        },
        {
          "match": "\\\\(x[\\da-fA-F][\\da-fA-F]|u[\\da-fA-F][\\da-fA-F][\\da-fA-F][\\da-fA-F]|.)",
          "name": "constant.character.escape.js"
        }
      ]
    }
  }
}
