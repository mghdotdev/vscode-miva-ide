[
	{
		"documentation": "[abs](https://www.mivascript.com/item/mivascript-functions/abs.html)  \n\nabs( number )\n\nReturns the absolute value of number.\n\nReturns the absolute value of number.",
		"insertText": "abs( ${1:number} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "abs"
	},
	{
		"documentation": "[acos](https://www.mivascript.com/item/mivascript-functions/acos.html)  \n\nacos( number )\n\nReturns the arccosine of number. The results are returned in radians.\n\nReturns the results in radians.",
		"insertText": "acos( ${1:number} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "acos"
	},
	{
		"documentation": "[asciichar](https://www.mivascript.com/item/mivascript-functions/asciichar.html)  \n\nasciichar( number )\n\nReturns the character corresponding to ascii character code in number. (number must 0 to 255).\n\nReturns the ascii character code",
		"insertText": "asciichar( ${1:number} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "asciichar"
	},
	{
		"documentation": "[asciivalue](https://www.mivascript.com/item/mivascript-functions/asciivalue.html)  \n\nasciivalue( character )\n\nReturns the ASCII numeric value for character (character must be a single character).",
		"insertText": "asciivalue( ${1:character} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "asciivalue"
	},
	{
		"documentation": "[asin](https://www.mivascript.com/item/mivascript-functions/asin.html)  \n\nasin( number )\n\nReturns the arcsine of number. The results are returned in radians.\n\nReturns the reaults in radians.",
		"insertText": "asin( ${1:number} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "asin"
	},
	{
		"documentation": "[atan](https://www.mivascript.com/item/mivascript-functions/atan.html)  \n\natan( number )\n\nReturns the arctangent of number. The results are returned in radians.\n\nReturns the results in radians.",
		"insertText": "atan( ${1:number} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "atan"
	},
	{
		"documentation": "[atan2](https://www.mivascript.com/item/mivascript-functions/atan2.html)  \n\natan2( x, y )\n\nReturns the arctangent of y/x. This is similar to atan(), but the signs of y and x are taken into account when computing the quadrant of the result. The results are returned in radians.\n\nReturns the results in radians.",
		"insertText": "atan2( ${1:x}, ${2:y} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "atan2"
	},
	{
		"documentation": "[bf\\_decrypt](https://www.mivascript.com/item/mivascript-functions/bf%5Fdecrypt.html)  \n\nbf_decrypt( key, encrypted, plaintext var )\n\nBlowfish decryption\n\nReturns 1 on success, 0 on error\n\n* key = the encryption key in ECB mode. the key must be 16 characters.\n* plaintext = the text thats encrypted\n* encrypted = if sucessful it will contain the results",
		"insertText": "bf_decrypt( ${1:key}, ${2:encrypted}, ${3:plaintext var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "bf_decrypt"
	},
	{
		"documentation": "[bf\\_encrypt](https://www.mivascript.com/item/mivascript-functions/bf%5Fencrypt.html)  \n\nbf_encrypt( key, plaintext, encrypted var )\n\nBlowfish encryption\n\nReturns 1 on success, 0 on error\n\n* key = the encryption key in ECB mode. The key must be 16 characters.\n* plaintext = the text thats encrypted\n* encrypted = if sucessful it will contain the results",
		"insertText": "bf_encrypt( ${1:key}, ${2:plaintext}, ${3:encrypted var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "bf_encrypt"
	},
	{
		"documentation": "[ceil](https://www.mivascript.com/item/mivascript-functions/ceil.html)  \n\nceil( number )\n\nReturns the smallest integer greater than or equal to number\n\nReturns the results as an integer.",
		"insertText": "ceil( ${1:number} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "ceil"
	},
	{
		"documentation": "[cos](https://www.mivascript.com/item/mivascript-functions/cos.html)  \n\ncos( number )\n\nReturns the cosine of number. The argument should be expressed in radians.\n\nReturns the results in radians.",
		"insertText": "cos( ${1:number} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "cos"
	},
	{
		"documentation": "[cosh](https://www.mivascript.com/item/mivascript-functions/cosh.html)  \n\ncosh( number )\n\nReturns the hyperbolic cosine of number. The argument should be expressed in radians.\n\nReturns the hyperbolic cosine.",
		"insertText": "cosh( ${1:number} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "cosh"
	},
	{
		"documentation": "[crypto\\_base64\\_decode](https://www.mivascript.com/item/mivascript-functions/crypto%5Fbase64%5Fdecode.html)  \n\ncrypto_base64_decode( data )\n\nDecodes and returns Base-64 decodes data.\n\nReturns the decrypted data\n\n* data = the information to decode",
		"insertText": "crypto_base64_decode( ${1:data} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_base64_decode"
	},
	{
		"documentation": "[crypto\\_base64\\_encode](https://www.mivascript.com/item/mivascript-functions/crypto%5Fbase64%5Fencode.html)  \n\ncrypto_base64_encode( data )\n\nEncodes and returns Base-64 encoded data.\n\nReturns the encrypted data\n\n* data = the information to encode",
		"insertText": "crypto_base64_encode( ${1:data} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_base64_encode"
	},
	{
		"documentation": "[crypto\\_cipher\\_block\\_size](https://www.mivascript.com/item/mivascript-functions/crypto%5Fcipher%5Fblock%5Fsize.html)  \n\ncrypto_cipher_block_size( ciphername )\n\nProgramatically determine the block size attribute of the cipher specified by \"ciphername\".\n\nreturns the numeric size, in bytes, or -1 if an invalid \"ciphername\" is specified.\n\n* ciphername = an OpenSSL cipher identifier, such as \"aes-128-cbc\" or \"rc2-ofb\".",
		"insertText": "crypto_cipher_block_size( ${1|'aes-128-cbc','rc2-ofb',ciphername|} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_cipher_block_size"
	},
	{
		"documentation": "[crypto\\_cipher\\_iv\\_length](https://www.mivascript.com/item/mivascript-functions/crypto%5Fcipher%5Fiv%5Flength.html)  \n\ncrypto_cipher_iv_length( ciphername )\n\nProgramatically determine the iv\\_length attribute of the cipher specified by \"ciphername\".\n\nreturns the numeric size, in bytes, or -1 if an invalid \"ciphername\" is specified.\n\n* ciphername = an OpenSSL cipher identifier, such as \"aes-128-cbc\" or \"rc2-ofb\".",
		"insertText": "crypto_cipher_iv_length( ${1|'aes-128-cbc','rc2-ofb',ciphername|} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_cipher_iv_length"
	},
	{
		"documentation": "[crypto\\_cipher\\_key\\_length](https://www.mivascript.com/item/mivascript-functions/crypto%5Fcipher%5Fkey%5Flength.html)  \n\ncrypto_cipher_key_length( ciphername )\n\nProgramatically determine the key\\_length attribute of the cipher specified by \"ciphername\".\n\nreturns the numeric size, in bytes, or -1 if an invalid \"ciphername\" is specified.\n\n* ciphername = an OpenSSL cipher identifier, such as \"aes-128-cbc\" or \"rc2-ofb\".",
		"insertText": "crypto_cipher_key_length( ${1|'aes-128-cbc','rc2-ofb',ciphername|} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_cipher_key_length"
	},
	{
		"documentation": "[crypto\\_cipher\\_mode](https://www.mivascript.com/item/mivascript-functions/crypto%5Fcipher%5Fmode.html)  \n\ncrypto_cipher_mode( ciphername )\n\nReturns the block mode of operation of the cipher specified by \"ciphername.\"\n\n* where ciphername = an OpenSSL cipher identifier, such as \"aes-128-cbc\" or \"rc2-ofb\"",
		"insertText": "crypto_cipher_mode( ${1|'aes-128-cbc','rc2-ofb',ciphername|} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_cipher_mode"
	},
	{
		"documentation": "[crypto\\_digest\\_block\\_size](https://www.mivascript.com/item/mivascript-functions/crypto%5Fdigest%5Fblock%5Fsize.html)  \n\ncrypto_digest_block_size( digestname )\n\nProgramatically determines the block\\_size attribute of the digest algorithm specified by \"digestname\".\n\nReturns the numeric size, in bytes, or -1 if an invalid \"digestname\" is specified.\n\n* digestname = an OpenSSL digest identifier, such as \"sha256\" or \"md5\".",
		"insertText": "crypto_digest_block_size( ${1|'sha256','md5',digestname|} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_digest_block_size"
	},
	{
		"documentation": "[crypto\\_digest\\_size](https://www.mivascript.com/item/mivascript-functions/crypto%5Fdigest%5Fsize.html)  \n\ncrypto_digest_size( digestname )\n\nProgramatically determines the digest\\_size attribute of the digest algorithm specified by \"digestname\".\n\nReturns the numeric size, in bytes, or -1 if an invalid \"digestname\" is specified.\n\n* digestname = an OpenSSL digest identifier, such as \"sha256\" or \"md5\".",
		"insertText": "crypto_digest_size( ${1|'sha256','md5',digestname|} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_digest_size"
	},
	{
		"documentation": "[crypto\\_evp\\_decrypt](https://www.mivascript.com/item/mivascript-functions/crypto%5Fevp%5Fdecrypt.html)  \n\ncrypto_evp_decrypt( ciphername, key, iv, encrypted, plaintext var )\n\nDecrypts \"plaintext\" using the block cipher specified by \"ciphername\", placing the decrypted data into \"plaintext\".\n\nReturn 1 on success, 0 on failure.\n\n* ciphername = The OpenSSL identifier of the cipher, such as \"bf-cbc\" or \"des-ede3-cbc\".\n* key = The key used for encryption.\n* iv = The initialization vector used for encryption. returned by crypto\\_cipher\\_iv\\_length().\n* encrypted = The ciphertext to be decrypted\n* plaintext = \\[output\\] Receives the plaintext",
		"insertText": "crypto_evp_decrypt( ${1|'bf-cbc','des-ede3-cbc',ciphername|}, ${2:key}, ${3:iv}, ${4:encrypted}, ${5:plaintext var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_evp_decrypt"
	},
	{
		"documentation": "[crypto\\_evp\\_digest](https://www.mivascript.com/item/mivascript-functions/crypto%5Fevp%5Fdigest.html)  \n\ncrypto_evp_digest( digestname, buffer var, digest var )\n\nCalculates the digest of \"buffer\" using digest algorithm \"digestname\", placing the calculated digest in \"digest\". The digest output is always in raw binary format, use miva\\_hex\\_encode() or crypto\\_base64\\_encode() if other output formats are desired.\n\nReturns 1 on success or 0 if an invalid or unsupported \"digestname\" is specified.\n\n* digestname = an OpenSSL digest identifier, such as \"sha256\" or \"md5\". buffer =\n* digest =",
		"insertText": "crypto_evp_digest( ${1|'sha256','md5',digestname|}, ${2:buffer var}, ${3:digest var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_evp_digest"
	},
	{
		"documentation": "[crypto\\_evp\\_encrypt](https://www.mivascript.com/item/mivascript-functions/crypto%5Fevp%5Fencrypt.html)  \n\ncrypto_evp_encrypt( ciphername, key, iv, plaintext, encrypted var )\n\nEncrypts \"plaintext\" using the block cipher specified by \"ciphername\", placing the encrypted data into \"encrypted\".\n\nreturns 1 on success, 0 on failure\n\n* ciphername = The OpenSSL identifier of the cipher, such as \"bf-cbc\" or \"des-ede3-cbc\".\n* key = The encryption key. Must be exactly the number of bytes required by the cipher, as returned by crypto\\_cipher\\_key\\_length.\n* iv = An initialization vector, if required by the cipher. Must be exactly the number of bytes required by the cipher, as returned by crypto\\_cipher\\_iv\\_length.\n* plaintext = The text to be encrypted\n* encrypted = \\[output\\] Receives the cipher text",
		"insertText": "crypto_evp_encrypt( ${1|'bf-cbc','des-ede3-cbc',ciphername|}, ${2:key}, ${3:iv}, ${4:plaintext}, ${5:encrypted var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_evp_encrypt"
	},
	{
		"documentation": "[crypto\\_evp\\_encrypt\\_auth](https://www.mivascript.com/item/mivascript-functions/crypto%5Fevp%5Fencrypt%5Fauth.html)  \n\ncrypto_evp_encrypt_auth( ciphername, key, iv, aad, plaintext, encrypted var, tag var )\n\nEncrypt the data in \"plaintext\" using the ciphername, key, and initial vector, returning the encrypted data in \"encrypted\" and a tag value in \"tag\" to be used to ensure that the ciphertext and AAD are not tampered with in transit.\n\nReturns 1 on success, 0 on failure\n\n* ciphername = Name of cipher to use. An example is \"aes-256-gcm\"\n* key = Key value\n* iv = Initial vector\n* aad = Additional authenticated data\n* plaintext = Plaintext to encrypt\n* encrypted = Resulting encrypted value\n* tag = tag value",
		"insertText": "crypto_evp_encrypt_auth( ${1|'bf-cbc','des-ede3-cbc',ciphername|}, ${2:key}, ${3:iv}, ${4:aad}, ${5:plaintext}, ${6:encrypted var}, ${7:tag var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_evp_encrypt_auth"
	},
	{
		"documentation": "[crypto\\_evp\\_hmac](https://www.mivascript.com/item/mivascript-functions/crypto%5Fevp%5Fhmac.html)  \n\ncrypto_evp_hmac( digestname, key, buffer var, digest var )\n\nCalculates the HMAC of \"buffer\" using digest algorithm \"digestname\" and key \"key\", placing the HMAC in \"digest\". The HMAC output is always in raw binary format, use miva\\_hex\\_encode() or crypto\\_base64\\_encode() if other output formats are desired.\n\nReturns 1 on success or 0 if an invalid or unsupported \"digestname\" is specified.\n\n* digestname = an OpenSSL digest identifier, such as \"sha256\" or \"md5\".\n* buffer = The data that will be process.\n* digest = The result of the HMAC function.",
		"insertText": "crypto_evp_hmac( ${1|'sha256','md5',digestname|}, ${2:key}, ${3:buffer var}, ${4:digest var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_evp_hmac"
	},
	{
		"documentation": "[crypto\\_hmac\\_md5](https://www.mivascript.com/item/mivascript-functions/crypto%5Fhmac%5Fmd5.html)  \n\ncrypto_hmac_md5( buffer var, key, format, result var )\n\nPerforms an HMAC-MD5 on \"buffer\" using key \"key\", storing the result in \"result\".\n\nReturns 1 on success, 0 on error.\n\n* buffer = the data that will be processed.\n* key = the encryption key\n* format = on of the literal string \"hex\" or \"binary\"\n* result = the return data.",
		"insertText": "crypto_hmac_md5( ${1:buffer var}, ${2:key}, ${3|'hex','binary'|}, ${4:result var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_hmac_md5"
	},
	{
		"documentation": "[crypto\\_hmac\\_sha1](https://www.mivascript.com/item/mivascript-functions/crypto%5Fhmac%5Fsha1.html)  \n\ncrypto_hmac_sha1( value, key, output_format, output)\n\nCalculates an HMAC SHA-1 (Hash-based Message Authentication Code) of value\n\nreturns: 1 on success, 0 on failure (including OpenSSL not being available)\n\n* value = value to hash by reference\n* key = key to use to calculate the hmac\n* output\\_format = 'hex' or 'binary'\n* output = hmac\\_sha1 hash value.",
		"insertText": "crypto_hmac_sha1( ${1:value}, ${2:key}, ${3:output_format}, ${4:output} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_hmac_sha1"
	},
	{
		"documentation": "[crypto\\_hmac\\_sha256](https://www.mivascript.com/item/mivascript-functions/crypto%5Fhmac%5Fsha256.html)  \n\ncrypto_hmac_sha256( buffer var, key, format, result var )\n\nCalculates an HMAC SHA-256 (Hash-based Message Authentication Code) of buffer\n\nReturns 1 on success, 0 on error or if on an unsuported platform.\n\n* buffer = value to hash\n* key = binary key to use to calculate the hmac\n* format = \"binary\" or \"hex\"\n* result = a variable used to store the results.",
		"insertText": "crypto_hmac_sha256( ${1:buffer var}, ${2:key}, ${3|'hex','binary'|}, ${4:result var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_hmac_sha256"
	},
	{
		"documentation": "[crypto\\_last\\_error](https://www.mivascript.com/item/mivascript-functions/crypto%5Flast%5Ferror.html)  \n\ncrypto_last_error()\n\nReturns the error text from the last SSL error, or other internal errors in the crypto suite of functions. Use crypto\\_last\\_ssl\\_error() instead to get the code of the last SSL error. ⇨ Version 5.32 -- Previously if the crypto error originated from Miva Empresa, the returned error was always the same. If the crypto error was from OpenSSL then it would be lost after calling the function. Modified to always return the last crypto error.\n\nReturns error text.",
		"insertText": "crypto_last_error()$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_last_error"
	},
	{
		"documentation": "[crypto\\_last\\_ssl\\_error](https://www.mivascript.com/item/mivascript-functions/crypto%5Flast%5Fssl%5Ferror.html)  \n\ncrypto_last_ssl_error()\n\nReturns the Integer value of the last SSL error code. Use crypto\\_last\\_error() instead to get the text of the last SSL error.\n\nReturns error code.",
		"insertText": "crypto_last_ssl_error()$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_last_ssl_error"
	},
	{
		"documentation": "[crypto\\_library\\_version](https://www.mivascript.com/item/mivascript-functions/crypto%5Flibrary%5Fversion.html)  \n\ncrypto_library_version( info )",
		"insertText": "crypto_library_version( ${1:info} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_library_version"
	},
	{
		"documentation": "[crypto\\_md5](https://www.mivascript.com/item/mivascript-functions/crypto%5Fmd5.html)  \n\ncrypto_md5( buffer )\n\nCalculates the MD5 hash of a string.\n\nReturns the MD5 hash value.\n\n* buffer = the data to be hashed.",
		"insertText": "crypto_md5( ${1:buffer} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_md5"
	},
	{
		"documentation": "[crypto\\_md5\\_file](https://www.mivascript.com/item/mivascript-functions/crypto%5Fmd5%5Ffile.html)  \n\ncrypto_md5_file( file, location, hash var )\n\nCalculates the md5 hash of a file\n\nReturns 1 on success, 0 on failure.\n\n* file = Name of file to calculate the hash of\n* location = Location either \"script\" or \"data\"\n* hash = MD5 hash value",
		"insertText": "crypto_md5_file( ${1:file}, ${2|'data','script'|}, ${3:hash var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_md5_file"
	},
	{
		"documentation": "[crypto\\_pbkdf1](https://www.mivascript.com/item/mivascript-functions/crypto%5Fpbkdf1.html)  \n\ncrypto_pbkdf1( digestname, password, salt, iterations, dklen, dk var )\n\nDerives a key of \"dklen\" bytes using PBKDF1 from PKCS #5.\n\nReturns 1 on success or 0 on error.\n\n* digestname = The digest algorithm to use. Must be one of \"md2\", \"md5\" or \"sha1\". password = The password from which a key is to be derived.\n* salt = Exactly 8 bytes of random data that are used as a salt.\n* iterations = The number of iterations to perform.\n* dklen = The desired output length of the derived key. May not be longer than the output digest size of the specified digest algorithm.\n* dk = \\[output\\] Receives the derived key. The output is in raw binary.",
		"insertText": "crypto_pbkdf1( ${1|'md2','md5','sha1'|}, ${2:password}, ${3:salt}, ${4:iterations}, ${5:dklen}, ${6:dk var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_pbkdf1"
	},
	{
		"documentation": "[crypto\\_pbkdf2](https://www.mivascript.com/item/mivascript-functions/crypto%5Fpbkdf2.html)  \n\ncrypto_pbkdf2( digestname, password, salt, iterations, dklen, dk var )\n\nDerives a key of \"dklen\" bytes using PBKDF2 from PKCS #5.\n\nReturns 1 on success or 0 on error.\n\n* digestname = The digest algorithm to use. May be any of the digests supported by the installed OpenSSL version.\n* password = The password from which a key is to be derived.\n* salt = Random data of any length that is used to salt the derivation. RFC 2898 recommends a minimum salt length of 8 bytes.\n* iterations = The number of iterations to perform. RFC 2898 recommends at least 1000 iterations.\n* dklen = The desired output length of the derived key. May be any positive value.\n* dk = \\[output\\] Receives the derived key. The output is in raw binary.",
		"insertText": "crypto_pbkdf2( ${1:digestname}, ${2:password}, ${3:salt}, ${4:iterations}, ${5:dklen}, ${6:dk var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_pbkdf2"
	},
	{
		"documentation": "[crypto\\_rand\\_bytes](https://www.mivascript.com/item/mivascript-functions/crypto%5Frand%5Fbytes.html)  \n\ncrypto_rand_bytes( n )\n\nGenerates n random bytes.\n\nReturns a string of bytes\n\n* n = the number of bytes",
		"insertText": "crypto_rand_bytes( ${1:n} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_rand_bytes"
	},
	{
		"documentation": "[crypto\\_rand\\_set\\_rand\\_engine](https://www.mivascript.com/item/mivascript-functions/crypto%5Frand%5Fset%5Frand%5Fengine.html)  \n\ncrypto_rand_set_rand_engine( engine )\n\nSpecify the random number generating engine to use.\n\nReturn value: 1 on success, 0 on failure.\n\n* engine = Name of the random number generator engine to use.",
		"insertText": "crypto_rand_set_rand_engine( ${1:engine} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_rand_set_rand_engine"
	},
	{
		"documentation": "[crypto\\_sha1](https://www.mivascript.com/item/mivascript-functions/crypto%5Fsha1.html)  \n\ncrypto_sha1( buffer var, format, result var )\n\nReturns an SHA1 hash of buffer. Secure Hash Algorithm\n\nReturns 1 on success, 0 on failure. (including OpenSSL not being available)\n\n* buffer = value to hash by reference\n* output\\_format = 'hex' or 'binary'. Anything else will result in binary output.\n* output = returned sha1 hash value.",
		"insertText": "crypto_sha1( ${1:buffer var}, ${2:format}, ${3:result var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_sha1"
	},
	{
		"documentation": "[crypto\\_sha256](https://www.mivascript.com/item/mivascript-functions/crypto%5Fsha256.html)  \n\ncrypto_sha256( buffer var, format, result var )\n\nReturns an SHA256 hash of buffer. Secure Hash Algorithm. May not be available on platforms running versions of OpenSSL Older than v0.9.8.\n\nReturns 1 on success, 0 on failure. (including OpenSSL not being available)\n\n* buffer = value to hash by reference\n* output\\_format = 'hex' or 'binary'. Anything else will result in binary output.\n* output = returned sha1 hash value.",
		"insertText": "crypto_sha256( ${1:buffer var}, ${2:format}, ${3:result var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_sha256"
	},
	{
		"documentation": "[crypto\\_xor](https://www.mivascript.com/item/mivascript-functions/crypto%5Fxor.html)  \n\ncrypto_xor( buffer var, dest var )\n\nEfficiently performs a byte-by-byte XOR of buffer and dest, storing the resulting data in \"dest\". If \"buffer\" is longer than \"dest\", any extra bytes are ignored.\n\nReturns nothing.\n\n* buffer = the data that will be processed.\n* dest = the data that will processed against buffer and will contain the results.",
		"insertText": "crypto_xor( ${1:buffer var}, ${2:dest var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_xor"
	},
	{
		"documentation": "[decodeattribute](https://www.mivascript.com/item/mivascript-functions/decodeattribute.html)  \n\ndecodeattribute( attribute )\n\nReturns a copy of string (which is usually a URL) converted from URL-encoded format to ordinary text. This function is the opposite of encodeattribute.\n\nReturns the results as a URL-decoded string.",
		"insertText": "decodeattribute( ${1:attribute} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "decodeattribute"
	},
	{
		"documentation": "[decodeentities](https://www.mivascript.com/item/mivascript-functions/decodeentities.html)  \n\ndecodeentities( string )\n\nReturns a copy of string in which all HTML entities have been converted to their plain text equivalents (for example, & is converted to &). This function is the opposite of encodeentities.\n\nReturns an entity decoded string.",
		"insertText": "decodeentities( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "decodeentities"
	},
	{
		"documentation": "[dir](https://www.mivascript.com/item/mivascript-functions/dir.html)  \n\ndir( path, location, entries var )\n\nReads a directory list in path.\n\nReturns the number of files found or 0 (zero) if none are found. The parameter entries returns an array of file names found.\n\n* path = The path to a directory relative to the location\n* location = \"data\" or \"script\"\n* entries = array of resultant file names",
		"insertText": "dir( ${1:path}, ${2|'data','script'|}, ${3:entries var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "dir"
	},
	{
		"documentation": "[encodeattribute](https://www.mivascript.com/item/mivascript-functions/encodeattribute.html)  \n\nencodeattribute( attribute )\n\nReturns a copy of string (which is usually a URI or part of an URI ) in URI-encoded format. Special characters such as space, tilde (\\~), and the plus sign are converted to hexadecimal %nn format. This function is the opposite of decodeattribute.\n\nReturns a URI encoded string",
		"insertText": "encodeattribute( ${1:attribute} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "encodeattribute"
	},
	{
		"documentation": "[encodeentities](https://www.mivascript.com/item/mivascript-functions/encodeentities.html)  \n\nencodeentities( string )\n\nReturns a copy of string in which all characters have been converted to their HTML entity equivalents, where applicable (for example, & is converted to \"&\"). This function is the opposite of decodeentities.\n\nReturns an entity encoded string.",
		"insertText": "encodeentities( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "encodeentities"
	},
	{
		"documentation": "[encodejavascriptstring](https://www.mivascript.com/item/mivascript-functions/encodejavascriptstring.html)  \n\nencodejavascriptstring( string )\n\nEncodes \"string\" in a format suitable for use inside a JavaScript quoted string declaration, honoring the current character set.\n\nReturns the encoded string.\n\n* string = the string that will be encoded.",
		"insertText": "encodejavascriptstring( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "encodejavascriptstring"
	},
	{
		"documentation": "[evp\\_pkey\\_derive](https://www.mivascript.com/item/mivascript-functions/evp%5Fpkey%5Fderive.html)  \n\nevp_pkey_derive( privkey var, peer var, key var )\n\nGiven structure references to a EVP PKEY structure with a secret key and a peer public key, derive a shared secret key and return the text in \"key\".\n\nReturns 1 on success, 0 on failure\n\n* privkey = EVP PKEY structure reference\n* peer = EVP PKEY structure reference\n* key = Returned text of shared secret key",
		"insertText": "evp_pkey_derive( ${1:privkey var}, ${2:peer var}, ${3:key var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "evp_pkey_derive"
	},
	{
		"documentation": "[evp\\_pkey\\_free](https://www.mivascript.com/item/mivascript-functions/evp%5Fpkey%5Ffree.html)  \n\nevp_pkey_free( key var )\n\nRemove an EVP\\_PKEY structure from internal memory. The passed EVP\\_PKEY structure reference is unchanged on failure (invalid reference) or set to 0 on success.\n\nReturns 1 on success, 0 on failure\n\n* key = EVP\\_PKEY structure reference",
		"insertText": "evp_pkey_free( ${1:key var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "evp_pkey_free"
	},
	{
		"documentation": "[evp\\_pkey\\_load\\_mem](https://www.mivascript.com/item/mivascript-functions/evp%5Fpkey%5Fload%5Fmem.html)  \n\nevp_pkey_load_mem( data, format, passphrase, pkey var )\n\nGiven a EVP PKEY structure in the given format and a passphrase, verifies the PKEY structure and stores it in internal storage, and returns a reference to the internal storage. ⇨ Version 5.32 -- now supports the DER and PEM formats.\n\nReturns 1 on success, 0 on failure\n\n* data = EVP PKEY structure text\n* format = Format of the PKEY structure text. Only \"pkcs12\" is supported\n* passphrase = Passphrase for the PKEY structure\n* pkey = Structure reference",
		"insertText": "evp_pkey_load_mem( ${1:data}, pkcs12, ${3:passphrase}, ${4:pkey var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "evp_pkey_load_mem"
	},
	{
		"documentation": "[evp\\_pkey\\_load\\_pubkey\\_mem](https://www.mivascript.com/item/mivascript-functions/evp%5Fpkey%5Fload%5Fpubkey%5Fmem.html)  \n\nevp_pkey_load_pubkey_mem( data, format, pkey var )\n\nGiven EVP PKEY information in the given format, parse and load the public key from it and return a reference to the internal storage.\n\nReturns 1 on success, 0 on failure\n\n* data = EVP PKEY text\n* format = Format of the EVP PKEY text. Valid values are \"pem\" and \"der\"\n* pkey = Structure reference to internal storage",
		"insertText": "evp_pkey_load_pubkey_mem( ${1:data}, ${2|'pem','der'|}, ${3:pkey var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "evp_pkey_load_pubkey_mem"
	},
	{
		"documentation": "[exp](https://www.mivascript.com/item/mivascript-functions/exp.html)  \n\nexp( number )\n\nReturns the constant e (approximately 2.71828) Raised to the power number.",
		"insertText": "exp( ${1:number} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "exp"
	},
	{
		"documentation": "[fchmod](https://www.mivascript.com/item/mivascript-functions/fchmod.html)  \n\nfchmod( path, mode )\n\nChanges a files or directory permissions.\n\nReturns 1 if sucessful, 0 if fails\n\n* path = fully qualified path to the file\n* mode\\_number = ( nnnn decimal number) or '0nnnn' (octal string)",
		"insertText": "fchmod( ${1:path}, ${2:mode} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "fchmod"
	},
	{
		"documentation": "[fcopy](https://www.mivascript.com/item/mivascript-functions/fcopy.html)  \n\nfcopy( source, destination )\n\nCopies a file in the data directory.\n\nReturns 1 if sucessful, 0 if fails\n\n* source = source file fully qualified path\n* destination = destination file fully qualified path",
		"insertText": "fcopy( ${1:source}, ${2:destination} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "fcopy"
	},
	{
		"documentation": "[fdelete](https://www.mivascript.com/item/mivascript-functions/fdelete.html)  \n\nfdelete( path )\n\nDeletes a file in the data directory. See sdelete()\n\nReturns 1 if sucessful, 0 if fails\n\n* path = fully qualified path of the file to delete",
		"insertText": "fdelete( ${1:path} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "fdelete"
	},
	{
		"documentation": "[fexists](https://www.mivascript.com/item/mivascript-functions/fexists.html)  \n\nfexists( path )\n\nTests if the file named in path exists in the data directory.\n\nReturns 1 if the file exsists else 0.\n\n* path = the fully qualified path to the file",
		"insertText": "fexists( ${1:path} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "fexists"
	},
	{
		"documentation": "[file\\_append](https://www.mivascript.com/item/mivascript-functions/file%5Fappend.html)  \n\nfile_append( path, location, outputdata var )\n\nAppends data to the end of the file in path.\n\nReturns length of outputdata or -1 on error. file\\_append() will not create a file, but return -1 if the file does not exist.\n\n* path = fully qualified path to the file\n* location = location of the output file - 'data' or 'script'\n* outputdata = string variable containing the data to append",
		"insertText": "file_append( ${1:path}, ${2|'data','script'|}, ${3:outputdata var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "file_append"
	},
	{
		"documentation": "[file\\_create](https://www.mivascript.com/item/mivascript-functions/file%5Fcreate.html)  \n\nfile_create( path, location, outputdata var )\n\nCreates and appends data to the file in path.\n\nReturns length of outputdata or -1 on error. file\\_create() will not append to an existing file, but return -1 if the file exists.\n\n* path = fully qualified path to the file\n* location = location of the output file - 'data' or 'script'\n* outputdata = string variable containing the data to append",
		"insertText": "file_create( ${1:path}, ${2|'data','script'|}, ${3:outputdata var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "file_create"
	},
	{
		"documentation": "[file\\_read](https://www.mivascript.com/item/mivascript-functions/file%5Fread.html)  \n\nfile_read( path, location, inputdata var )\n\nReads a file.\n\nReturns length of inputdata or -1 on error or file does not exist.\n\n* path = fully qualified path to the file\n* location = location of the input file - 'data' or 'script'\n* inputdata = string variable containing the data read",
		"insertText": "file_read( ${1:path}, ${2|'data','script'|}, ${3:inputdata var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "file_read"
	},
	{
		"documentation": "[file\\_read\\_bytes](https://www.mivascript.com/item/mivascript-functions/file%5Fread%5Fbytes.html)  \n\nfile_read_bytes( path, location, offset, length, data )\n\nReads a portion of the file specified by \"path\" and \"location\" into \"data\". Returns the number of bytes read, which may be less than \"length\", if an attempt was made to read past the end of the file, or -1 on error.\n\nReturns the number of bytes read from the file. The file data is returned in \"data\".\n\n* path = The name or filepath of the file to open relative to the directory specified by \"location\"\n* location = One of \"script\" or \"data\"\n* offset = The zero-based offset at which to begin reading\n* length = The number of bytes to read. If < 0, the entire file after \"offset\" is read.\n* data = The variable in which to store the file data",
		"insertText": "file_read_bytes( ${1:path}, ${2|'data','script'|}, ${3:offset}, ${4:length}, ${5:data} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "file_read_bytes"
	},
	{
		"documentation": "[file\\_touch](https://www.mivascript.com/item/mivascript-functions/file%5Ftouch.html)  \n\nfile_touch( file, location )\n\nUpdates the modification time of the specified file.\n\nReturn value: 0 on success, -1 on failure.\n\n* file = File name.\n* location = File location. \"script\" or \"data\", defaulting to \"data\" if any other value.",
		"insertText": "file_touch( ${1:file}, ${2|'data','script'|} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "file_touch"
	},
	{
		"documentation": "[fisdir](https://www.mivascript.com/item/mivascript-functions/fisdir.html)  \n\nfisdir( path )\n\nTests if the file named in path is a directory.\n\nReturns 1 if the path is a directory else 0.\n\n* path = the fully qualified path to the directory",
		"insertText": "fisdir( ${1:path} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "fisdir"
	},
	{
		"documentation": "[floor](https://www.mivascript.com/item/mivascript-functions/floor.html)  \n\nfloor( number )\n\nReturns the largest integer less than or equal to number",
		"insertText": "floor( ${1:number} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "floor"
	},
	{
		"documentation": "[fmkdir](https://www.mivascript.com/item/mivascript-functions/fmkdir.html)  \n\nfmkdir( path )\n\nCreates a directory specified by path in the data directory.\n\nReturns 1 if sucessful, 0 if fails\n\n* path = the fully qualified path to the directory",
		"insertText": "fmkdir( ${1:path} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "fmkdir"
	},
	{
		"documentation": "[fmod](https://www.mivascript.com/item/mivascript-functions/fmod.html)  \n\nfmod( x, y )\n\nReturns the remainder of number1/number2; number1, number2, and the result are all floating point numbers.",
		"insertText": "fmod( ${1:x}, ${2:y} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "fmod"
	},
	{
		"documentation": "[fmode](https://www.mivascript.com/item/mivascript-functions/fmode.html)  \n\nfmode( path )\n\nReturns the permissions mode of path in the data directory.\n\nReturns the permissions mode or -1 if the file does not exist\n\n* path = the fully qualified path to the file or directory",
		"insertText": "fmode( ${1:path} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "fmode"
	},
	{
		"documentation": "[frename](https://www.mivascript.com/item/mivascript-functions/frename.html)  \n\nfrename( source, destination )\n\nRename source file to destination file. Can rename or move a file in the data directory.\n\nReturns 1 if sucessful, 0 if fails\n\n* source = source file fully qualified path\n* destination = destination file fully qualified path",
		"insertText": "frename( ${1:source}, ${2:destination} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "frename"
	},
	{
		"documentation": "[fscopy](https://www.mivascript.com/item/mivascript-functions/fscopy.html)  \n\nfscopy( data_source,script_destination )\n\nCopies a file from data directory to the scripts directory.\n\nReturns 1 if sucessful, 0 if fails\n\n* data\\_source = source file fully qualified path\n* scripts\\_destination = destination file fully qualified path",
		"insertText": "fscopy( ${1:data_source}, ${2:script_destination} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "fscopy"
	},
	{
		"documentation": "[fsize](https://www.mivascript.com/item/mivascript-functions/fsize.html)  \n\nfsize( path )\n\nGet the size of a file in the data directory\n\nReturns the file size in bytes or -1 if the file does not exist.\n\n* path = the fully qualified path to the file",
		"insertText": "fsize( ${1:path} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "fsize"
	},
	{
		"documentation": "[fsrename](https://www.mivascript.com/item/mivascript-functions/fsrename.html)  \n\nfsrename( source, destination )\n\nRename data directory source file to script directory destination file. Can rename or move a file.\n\nReturns 1 if sucessful, 0 if fails\n\n* source = source file fully qualified path\n* destination = destination file fully qualified path",
		"insertText": "fsrename( ${1:source}, ${2:destination} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "fsrename"
	},
	{
		"documentation": "[fssymlink](https://www.mivascript.com/item/mivascript-functions/fssymlink.html)  \n\nfssymlink( source, destination )\n\nThis function creates a symbolic link from a file in the data directory to the scripts directory (Available on UNIX file systems only)\n\nReturns 1 if sucessful, 0 if fails\n\n* source = source file fully qualified path in the data directory\n* destination = destination file fully qualified path in the scripts directory",
		"insertText": "fssymlink( ${1:source}, ${2:destination} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "fssymlink"
	},
	{
		"documentation": "[fsymlink](https://www.mivascript.com/item/mivascript-functions/fsymlink.html)  \n\nfsymlink( source, destination )\n\n(Unix only) Creates a symbolic link to the file in the data directory.\n\nReturns 1 if sucessful, 0 if fails\n\n* source = source file fully qualified path\n* destination = destination file fully qualified path",
		"insertText": "fsymlink( ${1:source}, ${2:destination} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "fsymlink"
	},
	{
		"documentation": "[ftime](https://www.mivascript.com/item/mivascript-functions/ftime.html)  \n\nftime( path )\n\nGets the last modified time for the file in data directory.\n\nReturns time\\_t since a file in the was last modified or -1 if the file does not exist.\n\n* path = the fully qualified path to the file",
		"insertText": "ftime( ${1:path} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "ftime"
	},
	{
		"documentation": "[gdClearLastError](https://www.mivascript.com/item/mivascript-functions/gdClearLastError.html)  \n\ngdClearLastError()",
		"insertText": "gdClearLastError()$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdClearLastError"
	},
	{
		"documentation": "[gdImageAABlend](https://www.mivascript.com/item/mivascript-functions/gdImageAABlend.html)  \n\ngdImageAABlend( im )",
		"insertText": "gdImageAABlend( ${1:im} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageAABlend"
	},
	{
		"documentation": "[gdImageAlpha](https://www.mivascript.com/item/mivascript-functions/gdImageAlpha.html)  \n\ngdImageAlpha( im, c )",
		"insertText": "gdImageAlpha( ${1:im}, ${2:c} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageAlpha"
	},
	{
		"documentation": "[gdImageAlphaBlending](https://www.mivascript.com/item/mivascript-functions/gdImageAlphaBlending.html)  \n\ngdImageAlphaBlending( im, alphaBlendingArg )",
		"insertText": "gdImageAlphaBlending( ${1:im}, ${2:alphaBlendingArg} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageAlphaBlending"
	},
	{
		"documentation": "[gdImageArc](https://www.mivascript.com/item/mivascript-functions/gdImageArc.html)  \n\ngdImageArc( im, cx, cy, w, h, s, e, color )",
		"insertText": "gdImageArc( ${1:im}, ${2:cx}, ${3:cy}, ${4:w}, ${5:h}, ${6:s}, ${7:e}, ${8:color} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageArc"
	},
	{
		"documentation": "[gdImageBlue](https://www.mivascript.com/item/mivascript-functions/gdImageBlue.html)  \n\ngdImageBlue( im, c )",
		"insertText": "gdImageBlue( ${1:im}, ${2:c} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageBlue"
	},
	{
		"documentation": "[gdImageBoundsSafe](https://www.mivascript.com/item/mivascript-functions/gdImageBoundsSafe.html)  \n\ngdImageBoundsSafe( im, x, y )",
		"insertText": "gdImageBoundsSafe( ${1:im}, ${2:x}, ${3:y} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageBoundsSafe"
	},
	{
		"documentation": "[gdImageColorAllocate](https://www.mivascript.com/item/mivascript-functions/gdImageColorAllocate.html)  \n\ngdImageColorAllocate( im, r, g, b )",
		"insertText": "gdImageColorAllocate( ${1:im}, ${2:r}, ${3:g}, ${4:b} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageColorAllocate"
	},
	{
		"documentation": "[gdImageColorAllocateAlpha](https://www.mivascript.com/item/mivascript-functions/gdImageColorAllocateAlpha.html)  \n\ngdImageColorAllocateAlpha( im, r, g, b, a )",
		"insertText": "gdImageColorAllocateAlpha( ${1:im}, ${2:r}, ${3:g}, ${4:b}, ${5:a} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageColorAllocateAlpha"
	},
	{
		"documentation": "[gdImageColorClosest](https://www.mivascript.com/item/mivascript-functions/gdImageColorClosest.html)  \n\ngdImageColorClosest( im, r, g, b )",
		"insertText": "gdImageColorClosest( ${1:im}, ${2:r}, ${3:g}, ${4:b} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageColorClosest"
	},
	{
		"documentation": "[gdImageColorClosestAlpha](https://www.mivascript.com/item/mivascript-functions/gdImageColorClosestAlpha.html)  \n\ngdImageColorClosestAlpha( im, r, g, b, a )",
		"insertText": "gdImageColorClosestAlpha( ${1:im}, ${2:r}, ${3:g}, ${4:b}, ${5:a} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageColorClosestAlpha"
	},
	{
		"documentation": "[gdImageColorClosestHWB](https://www.mivascript.com/item/mivascript-functions/gdImageColorClosestHWB.html)  \n\ngdImageColorClosestHWB( im, r, g, b )",
		"insertText": "gdImageColorClosestHWB( ${1:im}, ${2:r}, ${3:g}, ${4:b} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageColorClosestHWB"
	},
	{
		"documentation": "[gdImageColorDeallocate](https://www.mivascript.com/item/mivascript-functions/gdImageColorDeallocate.html)  \n\ngdImageColorDeallocate( im, color )",
		"insertText": "gdImageColorDeallocate( ${1:im}, ${2:color} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageColorDeallocate"
	},
	{
		"documentation": "[gdImageColorExact](https://www.mivascript.com/item/mivascript-functions/gdImageColorExact.html)  \n\ngdImageColorExact( im, r, g, b )",
		"insertText": "gdImageColorExact( ${1:im}, ${2:r}, ${3:g}, ${4:b} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageColorExact"
	},
	{
		"documentation": "[gdImageColorExactAlpha](https://www.mivascript.com/item/mivascript-functions/gdImageColorExactAlpha.html)  \n\ngdImageColorExactAlpha( im, r, g, b, a )",
		"insertText": "gdImageColorExactAlpha( ${1:im}, ${2:r}, ${3:g}, ${4:b}, ${5:a} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageColorExactAlpha"
	},
	{
		"documentation": "[gdImageColorResolve](https://www.mivascript.com/item/mivascript-functions/gdImageColorResolve.html)  \n\ngdImageColorResolve( im, r, g, b )",
		"insertText": "gdImageColorResolve( ${1:im}, ${2:r}, ${3:g}, ${4:b} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageColorResolve"
	},
	{
		"documentation": "[gdImageColorResolveAlpha](https://www.mivascript.com/item/mivascript-functions/gdImageColorResolveAlpha.html)  \n\ngdImageColorResolveAlpha( im, r, g, b, a )",
		"insertText": "gdImageColorResolveAlpha( ${1:im}, ${2:r}, ${3:g}, ${4:b}, ${5:a} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageColorResolveAlpha"
	},
	{
		"documentation": "[gdImageColorsTotal](https://www.mivascript.com/item/mivascript-functions/gdImageColorsTotal.html)  \n\ngdImageColorsTotal( im )",
		"insertText": "gdImageColorsTotal( ${1:im} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageColorsTotal"
	},
	{
		"documentation": "[gdImageColorTransparent](https://www.mivascript.com/item/mivascript-functions/gdImageColorTransparent.html)  \n\ngdImageColorTransparent( im, color )",
		"insertText": "gdImageColorTransparent( ${1:im}, ${2:color} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageColorTransparent"
	},
	{
		"documentation": "[gdImageCompare](https://www.mivascript.com/item/mivascript-functions/gdImageCompare.html)  \n\ngdImageCompare( im1, im2 )",
		"insertText": "gdImageCompare( ${1:im1}, ${2:im2} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCompare"
	},
	{
		"documentation": "[gdImageCopy](https://www.mivascript.com/item/mivascript-functions/gdImageCopy.html)  \n\ngdImageCopy( dst, src, dstX, dstY, srcX, srcY, w, h )",
		"insertText": "gdImageCopy( ${1:dst}, ${2:src}, ${3:dstX}, ${4:dstY}, ${5:srcX}, ${6:srcY}, ${7:w}, ${8:h} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCopy"
	},
	{
		"documentation": "[gdImageCopyMerge](https://www.mivascript.com/item/mivascript-functions/gdImageCopyMerge.html)  \n\ngdImageCopyMerge( dst, src, dstX, dstY, srcX, srcY, w, h, pct )",
		"insertText": "gdImageCopyMerge( ${1:dst}, ${2:src}, ${3:dstX}, ${4:dstY}, ${5:srcX}, ${6:srcY}, ${7:w}, ${8:h}, ${9:pct} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCopyMerge"
	},
	{
		"documentation": "[gdImageCopyMergeGray](https://www.mivascript.com/item/mivascript-functions/gdImageCopyMergeGray.html)  \n\ngdImageCopyMergeGray( dst, src, dstX, dstY, srcX, srcY, w, h, pct )",
		"insertText": "gdImageCopyMergeGray( ${1:dst}, ${2:src}, ${3:dstX}, ${4:dstY}, ${5:srcX}, ${6:srcY}, ${7:w}, ${8:h}, ${9:pct} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCopyMergeGray"
	},
	{
		"documentation": "[gdImageCopyResampled](https://www.mivascript.com/item/mivascript-functions/gdImageCopyResampled.html)  \n\ngdImageCopyResampled( dst, src, dstX, dstY, srcX, srcY, dstW, dstH, srcW, srcH )",
		"insertText": "gdImageCopyResampled( ${1:dst}, ${2:src}, ${3:dstX}, ${4:dstY}, ${5:srcX}, ${6:srcY}, ${7:dstW}, ${8:dstH}, ${9:srcW}, ${10:srcH} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCopyResampled"
	},
	{
		"documentation": "[gdImageCopyResized](https://www.mivascript.com/item/mivascript-functions/gdImageCopyResized.html)  \n\ngdImageCopyResized( dst, src, dstX, dstY, srcX, srcY, dstW, dstH, srcW, srcH )",
		"insertText": "gdImageCopyResized( ${1:dst}, ${2:src}, ${3:dstX}, ${4:dstY}, ${5:srcX}, ${6:srcY}, ${7:dstW}, ${8:dstH}, ${9:srcW}, ${10:srcH} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCopyResized"
	},
	{
		"documentation": "[gdImageCopyRotated](https://www.mivascript.com/item/mivascript-functions/gdImageCopyRotated.html)  \n\ngdImageCopyRotated( dst, src, dstX, dstY, srcX, srcY, srcWidth, srcHeight, angle )",
		"insertText": "gdImageCopyRotated( ${1:dst}, ${2:src}, ${3:dstX}, ${4:dstY}, ${5:srcX}, ${6:srcY}, ${7:srcWidth}, ${8:srcHeight}, ${9:angle} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCopyRotated"
	},
	{
		"documentation": "[gdImageCreate](https://www.mivascript.com/item/mivascript-functions/gdImageCreate.html)  \n\ngdImageCreate( sx, sy )",
		"insertText": "gdImageCreate( ${1:sx}, ${2:sy} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCreate"
	},
	{
		"documentation": "[gdImageCreateFromGd](https://www.mivascript.com/item/mivascript-functions/gdImageCreateFromGd.html)  \n\ngdImageCreateFromGd( filename, location )",
		"insertText": "gdImageCreateFromGd( ${1:filename}, ${2:location} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCreateFromGd"
	},
	{
		"documentation": "[gdImageCreateFromGd2](https://www.mivascript.com/item/mivascript-functions/gdImageCreateFromGd2.html)  \n\ngdImageCreateFromGd2( filename, location )",
		"insertText": "gdImageCreateFromGd2( ${1:filename}, ${2:location} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCreateFromGd2"
	},
	{
		"documentation": "[gdImageCreateFromGd2Mem](https://www.mivascript.com/item/mivascript-functions/gdImageCreateFromGd2Mem.html)  \n\ngdImageCreateFromGd2Mem( data var )",
		"insertText": "gdImageCreateFromGd2Mem( ${1:data var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCreateFromGd2Mem"
	},
	{
		"documentation": "[gdImageCreateFromGd2Part](https://www.mivascript.com/item/mivascript-functions/gdImageCreateFromGd2Part.html)  \n\ngdImageCreateFromGd2Part( filename, location, srcx, srcy, w, h )",
		"insertText": "gdImageCreateFromGd2Part( ${1:filename}, ${2:location}, ${3:srcx}, ${4:srcy}, ${5:w}, ${6:h} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCreateFromGd2Part"
	},
	{
		"documentation": "[gdImageCreateFromGd2PartMem](https://www.mivascript.com/item/mivascript-functions/gdImageCreateFromGd2PartMem.html)  \n\ngdImageCreateFromGd2PartMem( data var, srcx, srcy, w, h )",
		"insertText": "gdImageCreateFromGd2PartMem( ${1:data var}, ${2:srcx}, ${3:srcy}, ${4:w}, ${5:h} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCreateFromGd2PartMem"
	},
	{
		"documentation": "[gdImageCreateFromGdMem](https://www.mivascript.com/item/mivascript-functions/gdImageCreateFromGdMem.html)  \n\ngdImageCreateFromGdMem( data var )",
		"insertText": "gdImageCreateFromGdMem( ${1:data var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCreateFromGdMem"
	},
	{
		"documentation": "[gdImageCreateFromGif](https://www.mivascript.com/item/mivascript-functions/gdImageCreateFromGif.html)  \n\ngdImageCreateFromGif( filename, location )",
		"insertText": "gdImageCreateFromGif( ${1:filename}, ${2:location} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCreateFromGif"
	},
	{
		"documentation": "[gdImageCreateFromGifMem](https://www.mivascript.com/item/mivascript-functions/gdImageCreateFromGifMem.html)  \n\ngdImageCreateFromGifMem( data var )",
		"insertText": "gdImageCreateFromGifMem( ${1:data var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCreateFromGifMem"
	},
	{
		"documentation": "[gdImageCreateFromJpeg](https://www.mivascript.com/item/mivascript-functions/gdImageCreateFromJpeg.html)  \n\ngdImageCreateFromJpeg( filename, location )",
		"insertText": "gdImageCreateFromJpeg( ${1:filename}, ${2:location} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCreateFromJpeg"
	},
	{
		"documentation": "[gdImageCreateFromJpegMem](https://www.mivascript.com/item/mivascript-functions/gdImageCreateFromJpegMem.html)  \n\ngdImageCreateFromJpegMem( data var )",
		"insertText": "gdImageCreateFromJpegMem( ${1:data var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCreateFromJpegMem"
	},
	{
		"documentation": "[gdImageCreateFromPng](https://www.mivascript.com/item/mivascript-functions/gdImageCreateFromPng.html)  \n\ngdImageCreateFromPng( filename, location )",
		"insertText": "gdImageCreateFromPng( ${1:filename}, ${2:location} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCreateFromPng"
	},
	{
		"documentation": "[gdImageCreateFromPngMem](https://www.mivascript.com/item/mivascript-functions/gdImageCreateFromPngMem.html)  \n\ngdImageCreateFromPngMem( data var )",
		"insertText": "gdImageCreateFromPngMem( ${1:data var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCreateFromPngMem"
	},
	{
		"documentation": "[gdImageCreateFromWBMP](https://www.mivascript.com/item/mivascript-functions/gdImageCreateFromWBMP.html)  \n\ngdImageCreateFromWBMP( filename, location )",
		"insertText": "gdImageCreateFromWBMP( ${1:filename}, ${2:location} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCreateFromWBMP"
	},
	{
		"documentation": "[gdImageCreateFromWBMPMem](https://www.mivascript.com/item/mivascript-functions/gdImageCreateFromWBMPMem.html)  \n\ngdImageCreateFromWBMPMem( data var )",
		"insertText": "gdImageCreateFromWBMPMem( ${1:data var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCreateFromWBMPMem"
	},
	{
		"documentation": "[gdImageCreatePaletteFromTrueColor](https://www.mivascript.com/item/mivascript-functions/gdImageCreatePaletteFromTrueColor.html)  \n\ngdImageCreatePaletteFromTrueColor( im, ditherFlag, colorsWanted )",
		"insertText": "gdImageCreatePaletteFromTrueColor( ${1:im}, ${2:ditherFlag}, ${3:colorsWanted} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCreatePaletteFromTrueColor"
	},
	{
		"documentation": "[gdImageCreateTrueColor](https://www.mivascript.com/item/mivascript-functions/gdImageCreateTrueColor.html)  \n\ngdImageCreateTrueColor( sx, sy )",
		"insertText": "gdImageCreateTrueColor( ${1:sx}, ${2:sy} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageCreateTrueColor"
	},
	{
		"documentation": "[gdImageDashedLine](https://www.mivascript.com/item/mivascript-functions/gdImageDashedLine.html)  \n\ngdImageDashedLine( im, x1, y1, x2, y2, color )",
		"insertText": "gdImageDashedLine( ${1:im}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:color} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageDashedLine"
	},
	{
		"documentation": "[gdImageDestroy](https://www.mivascript.com/item/mivascript-functions/gdImageDestroy.html)  \n\ngdImageDestroy( im )",
		"insertText": "gdImageDestroy( ${1:im} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageDestroy"
	},
	{
		"documentation": "[gdImageEllipse](https://www.mivascript.com/item/mivascript-functions/gdImageEllipse.html)  \n\ngdImageEllipse( im, cx, cy, w, h, color )",
		"insertText": "gdImageEllipse( ${1:im}, ${2:cx}, ${3:cy}, ${4:w}, ${5:h}, ${6:color} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageEllipse"
	},
	{
		"documentation": "[gdImageFill](https://www.mivascript.com/item/mivascript-functions/gdImageFill.html)  \n\ngdImageFill( im, x, y, color )",
		"insertText": "gdImageFill( ${1:im}, ${2:x}, ${3:y}, ${4:color} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageFill"
	},
	{
		"documentation": "[gdImageFilledArc](https://www.mivascript.com/item/mivascript-functions/gdImageFilledArc.html)  \n\ngdImageFilledArc( im, cx, cy, w, h, s, e, color, style )",
		"insertText": "gdImageFilledArc( ${1:im}, ${2:cx}, ${3:cy}, ${4:w}, ${5:h}, ${6:s}, ${7:e}, ${8:color}, ${9:style} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageFilledArc"
	},
	{
		"documentation": "[gdImageFilledEllipse](https://www.mivascript.com/item/mivascript-functions/gdImageFilledEllipse.html)  \n\ngdImageFilledEllipse( im, cx, cy, w, h, color )",
		"insertText": "gdImageFilledEllipse( ${1:im}, ${2:cx}, ${3:cy}, ${4:w}, ${5:h}, ${6:color} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageFilledEllipse"
	},
	{
		"documentation": "[gdImageFilledPolygon](https://www.mivascript.com/item/mivascript-functions/gdImageFilledPolygon.html)  \n\ngdImageFilledPolygon( im, points var, n, color )",
		"insertText": "gdImageFilledPolygon( ${1:im}, ${2:points var}, ${3:n}, ${4:color} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageFilledPolygon"
	},
	{
		"documentation": "[gdImageFilledRectangle](https://www.mivascript.com/item/mivascript-functions/gdImageFilledRectangle.html)  \n\ngdImageFilledRectangle( im, x1, y1, x2, y2, color )",
		"insertText": "gdImageFilledRectangle( ${1:im}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:color} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageFilledRectangle"
	},
	{
		"documentation": "[gdImageFillToBorder](https://www.mivascript.com/item/mivascript-functions/gdImageFillToBorder.html)  \n\ngdImageFillToBorder( im, x, y, border, color )",
		"insertText": "gdImageFillToBorder( ${1:im}, ${2:x}, ${3:y}, ${4:border}, ${5:color} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageFillToBorder"
	},
	{
		"documentation": "[gdImageGetClip](https://www.mivascript.com/item/mivascript-functions/gdImageGetClip.html)  \n\ngdImageGetClip( im, x1P var, y1P var, x2P var, y2P var )",
		"insertText": "gdImageGetClip( ${1:im}, ${2:x1P var}, ${3:y1P var}, ${4:x2P var}, ${5:y2P var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageGetClip"
	},
	{
		"documentation": "[gdImageGetInterlaced](https://www.mivascript.com/item/mivascript-functions/gdImageGetInterlaced.html)  \n\ngdImageGetInterlaced( im )",
		"insertText": "gdImageGetInterlaced( ${1:im} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageGetInterlaced"
	},
	{
		"documentation": "[gdImageGetPixel](https://www.mivascript.com/item/mivascript-functions/gdImageGetPixel.html)  \n\ngdImageGetPixel( im, x, y )",
		"insertText": "gdImageGetPixel( ${1:im}, ${2:x}, ${3:y} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageGetPixel"
	},
	{
		"documentation": "[gdImageGetTransparent](https://www.mivascript.com/item/mivascript-functions/gdImageGetTransparent.html)  \n\ngdImageGetTransparent( im )",
		"insertText": "gdImageGetTransparent( ${1:im} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageGetTransparent"
	},
	{
		"documentation": "[gdImageGetTrueColorPixel](https://www.mivascript.com/item/mivascript-functions/gdImageGetTrueColorPixel.html)  \n\ngdImageGetTrueColorPixel( im, x, y )",
		"insertText": "gdImageGetTrueColorPixel( ${1:im}, ${2:x}, ${3:y} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageGetTrueColorPixel"
	},
	{
		"documentation": "[gdImageGif](https://www.mivascript.com/item/mivascript-functions/gdImageGif.html)  \n\ngdImageGif( im, filename, location )",
		"insertText": "gdImageGif( ${1:im}, ${2:filename}, ${3:location} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageGif"
	},
	{
		"documentation": "[gdImageGifAnimAdd](https://www.mivascript.com/item/mivascript-functions/gdImageGifAnimAdd.html)  \n\ngdImageGifAnimAdd( im, out, LocalCM, LeftOfs, TopOfs, Delay, Disposal, previm )",
		"insertText": "gdImageGifAnimAdd( ${1:im}, ${2:out}, ${3:LocalCM}, ${4:LeftOfs}, ${5:TopOfs}, ${6:Delay}, ${7:Disposal}, ${8:previm} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageGifAnimAdd"
	},
	{
		"documentation": "[gdImageGifAnimAddMem](https://www.mivascript.com/item/mivascript-functions/gdImageGifAnimAddMem.html)  \n\ngdImageGifAnimAddMem( im, ctx, LocalCM, LeftOfs, TopOfs, Delay, Disposal, previm )",
		"insertText": "gdImageGifAnimAddMem( ${1:im}, ${2:ctx}, ${3:LocalCM}, ${4:LeftOfs}, ${5:TopOfs}, ${6:Delay}, ${7:Disposal}, ${8:previm} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageGifAnimAddMem"
	},
	{
		"documentation": "[gdImageGifAnimAddOutput](https://www.mivascript.com/item/mivascript-functions/gdImageGifAnimAddOutput.html)  \n\ngdImageGifAnimAddOutput( im, LocalCM, LeftOfs, TopOfs, Delay, Disposal, previm )",
		"insertText": "gdImageGifAnimAddOutput( ${1:im}, ${2:LocalCM}, ${3:LeftOfs}, ${4:TopOfs}, ${5:Delay}, ${6:Disposal}, ${7:previm} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageGifAnimAddOutput"
	},
	{
		"documentation": "[gdImageGifAnimBegin](https://www.mivascript.com/item/mivascript-functions/gdImageGifAnimBegin.html)  \n\ngdImageGifAnimBegin( im, filename, location, GlobalCM, Loops )",
		"insertText": "gdImageGifAnimBegin( ${1:im}, ${2:filename}, ${3:location}, ${4:GlobalCM}, ${5:Loops} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageGifAnimBegin"
	},
	{
		"documentation": "[gdImageGifAnimBeginMem](https://www.mivascript.com/item/mivascript-functions/gdImageGifAnimBeginMem.html)  \n\ngdImageGifAnimBeginMem( im, GlobalCM, Loops )",
		"insertText": "gdImageGifAnimBeginMem( ${1:im}, ${2:GlobalCM}, ${3:Loops} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageGifAnimBeginMem"
	},
	{
		"documentation": "[gdImageGifAnimBeginOutput](https://www.mivascript.com/item/mivascript-functions/gdImageGifAnimBeginOutput.html)  \n\ngdImageGifAnimBeginOutput( im, GlobalCM, Loops )",
		"insertText": "gdImageGifAnimBeginOutput( ${1:im}, ${2:GlobalCM}, ${3:Loops} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageGifAnimBeginOutput"
	},
	{
		"documentation": "[gdImageGifAnimEnd](https://www.mivascript.com/item/mivascript-functions/gdImageGifAnimEnd.html)  \n\ngdImageGifAnimEnd( out )",
		"insertText": "gdImageGifAnimEnd( ${1:out} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageGifAnimEnd"
	},
	{
		"documentation": "[gdImageGifAnimEndMem](https://www.mivascript.com/item/mivascript-functions/gdImageGifAnimEndMem.html)  \n\ngdImageGifAnimEndMem( ctx, output var )",
		"insertText": "gdImageGifAnimEndMem( ${1:ctx}, ${2:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageGifAnimEndMem"
	},
	{
		"documentation": "[gdImageGifAnimEndOutput](https://www.mivascript.com/item/mivascript-functions/gdImageGifAnimEndOutput.html)  \n\ngdImageGifAnimEndOutput()",
		"insertText": "gdImageGifAnimEndOutput()$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageGifAnimEndOutput"
	},
	{
		"documentation": "[gdImageGifMem](https://www.mivascript.com/item/mivascript-functions/gdImageGifMem.html)  \n\ngdImageGifMem( im, output var )",
		"insertText": "gdImageGifMem( ${1:im}, ${2:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageGifMem"
	},
	{
		"documentation": "[gdImageGifOutput](https://www.mivascript.com/item/mivascript-functions/gdImageGifOutput.html)  \n\ngdImageGifOutput( im )",
		"insertText": "gdImageGifOutput( ${1:im} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageGifOutput"
	},
	{
		"documentation": "[gdImageGreen](https://www.mivascript.com/item/mivascript-functions/gdImageGreen.html)  \n\ngdImageGreen( im, c )",
		"insertText": "gdImageGreen( ${1:im}, ${2:c} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageGreen"
	},
	{
		"documentation": "[gdImageInterlace](https://www.mivascript.com/item/mivascript-functions/gdImageInterlace.html)  \n\ngdImageInterlace( im, interlaceArg )",
		"insertText": "gdImageInterlace( ${1:im}, ${2:interlaceArg} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageInterlace"
	},
	{
		"documentation": "[gdImageJpeg](https://www.mivascript.com/item/mivascript-functions/gdImageJpeg.html)  \n\ngdImageJpeg( im, filename, location, quality )",
		"insertText": "gdImageJpeg( ${1:im}, ${2:filename}, ${3:location}, ${4:quality} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageJpeg"
	},
	{
		"documentation": "[gdImageJpegMem](https://www.mivascript.com/item/mivascript-functions/gdImageJpegMem.html)  \n\ngdImageJpegMem( im, output var, quality )",
		"insertText": "gdImageJpegMem( ${1:im}, ${2:output var}, ${3:quality} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageJpegMem"
	},
	{
		"documentation": "[gdImageJpegOutput](https://www.mivascript.com/item/mivascript-functions/gdImageJpegOutput.html)  \n\ngdImageJpegOutput( im, quality )",
		"insertText": "gdImageJpegOutput( ${1:im}, ${2:quality} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageJpegOutput"
	},
	{
		"documentation": "[gdImageLine](https://www.mivascript.com/item/mivascript-functions/gdImageLine.html)  \n\ngdImageLine( im, x1, y1, x2, y2, color )",
		"insertText": "gdImageLine( ${1:im}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:color} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageLine"
	},
	{
		"documentation": "[gdImageOpenPolygon](https://www.mivascript.com/item/mivascript-functions/gdImageOpenPolygon.html)  \n\ngdImageOpenPolygon( im, points var, n, color )",
		"insertText": "gdImageOpenPolygon( ${1:im}, ${2:points var}, ${3:n}, ${4:color} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageOpenPolygon"
	},
	{
		"documentation": "[gdImagePaletteCopy](https://www.mivascript.com/item/mivascript-functions/gdImagePaletteCopy.html)  \n\ngdImagePaletteCopy( dst, src )",
		"insertText": "gdImagePaletteCopy( ${1:dst}, ${2:src} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImagePaletteCopy"
	},
	{
		"documentation": "[gdImagePalettePixel](https://www.mivascript.com/item/mivascript-functions/gdImagePalettePixel.html)  \n\ngdImagePalettePixel( im, x, y )",
		"insertText": "gdImagePalettePixel( ${1:im}, ${2:x}, ${3:y} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImagePalettePixel"
	},
	{
		"documentation": "[gdImagePng](https://www.mivascript.com/item/mivascript-functions/gdImagePng.html)  \n\ngdImagePng( im, filename, location )",
		"insertText": "gdImagePng( ${1:im}, ${2:filename}, ${3:location} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImagePng"
	},
	{
		"documentation": "[gdImagePngMem](https://www.mivascript.com/item/mivascript-functions/gdImagePngMem.html)  \n\ngdImagePngMem( im, output var )",
		"insertText": "gdImagePngMem( ${1:im}, ${2:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImagePngMem"
	},
	{
		"documentation": "[gdImagePngOutput](https://www.mivascript.com/item/mivascript-functions/gdImagePngOutput.html)  \n\ngdImagePngOutput( im )",
		"insertText": "gdImagePngOutput( ${1:im} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImagePngOutput"
	},
	{
		"documentation": "[gdImagePolygon](https://www.mivascript.com/item/mivascript-functions/gdImagePolygon.html)  \n\ngdImagePolygon( im, points var, n, color )",
		"insertText": "gdImagePolygon( ${1:im}, ${2:points var}, ${3:n}, ${4:color} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImagePolygon"
	},
	{
		"documentation": "[gdImageRectangle](https://www.mivascript.com/item/mivascript-functions/gdImageRectangle.html)  \n\ngdImageRectangle( im, x1, y1, x2, y2, color )",
		"insertText": "gdImageRectangle( ${1:im}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:color} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageRectangle"
	},
	{
		"documentation": "[gdImageRed](https://www.mivascript.com/item/mivascript-functions/gdImageRed.html)  \n\ngdImageRed( im, c )",
		"insertText": "gdImageRed( ${1:im}, ${2:c} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageRed"
	},
	{
		"documentation": "[gdImageSaveAlpha](https://www.mivascript.com/item/mivascript-functions/gdImageSaveAlpha.html)  \n\ngdImageSaveAlpha( im, saveAlphaArg )",
		"insertText": "gdImageSaveAlpha( ${1:im}, ${2:saveAlphaArg} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageSaveAlpha"
	},
	{
		"documentation": "[gdImageSetAntiAliased](https://www.mivascript.com/item/mivascript-functions/gdImageSetAntiAliased.html)  \n\ngdImageSetAntiAliased( im, c )",
		"insertText": "gdImageSetAntiAliased( ${1:im}, ${2:c} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageSetAntiAliased"
	},
	{
		"documentation": "[gdImageSetAntiAliasedDontBlend](https://www.mivascript.com/item/mivascript-functions/gdImageSetAntiAliasedDontBlend.html)  \n\ngdImageSetAntiAliasedDontBlend( im, color, dont_blend )",
		"insertText": "gdImageSetAntiAliasedDontBlend( ${1:im}, ${2:color}, ${3:dont_blend} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageSetAntiAliasedDontBlend"
	},
	{
		"documentation": "[gdImageSetBrush](https://www.mivascript.com/item/mivascript-functions/gdImageSetBrush.html)  \n\ngdImageSetBrush( im, brush )",
		"insertText": "gdImageSetBrush( ${1:im}, ${2:brush} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageSetBrush"
	},
	{
		"documentation": "[gdImageSetClip](https://www.mivascript.com/item/mivascript-functions/gdImageSetClip.html)  \n\ngdImageSetClip( im, x1, y1, x2, y2 )",
		"insertText": "gdImageSetClip( ${1:im}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageSetClip"
	},
	{
		"documentation": "[gdImageSetPixel](https://www.mivascript.com/item/mivascript-functions/gdImageSetPixel.html)  \n\ngdImageSetPixel( im, x, y, color )",
		"insertText": "gdImageSetPixel( ${1:im}, ${2:x}, ${3:y}, ${4:color} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageSetPixel"
	},
	{
		"documentation": "[gdImageSetStyle](https://www.mivascript.com/item/mivascript-functions/gdImageSetStyle.html)  \n\ngdImageSetStyle( im, style var, n )",
		"insertText": "gdImageSetStyle( ${1:im}, ${2:style var}, ${3:n} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageSetStyle"
	},
	{
		"documentation": "[gdImageSetThickness](https://www.mivascript.com/item/mivascript-functions/gdImageSetThickness.html)  \n\ngdImageSetThickness( im, thickness )",
		"insertText": "gdImageSetThickness( ${1:im}, ${2:thickness} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageSetThickness"
	},
	{
		"documentation": "[gdImageSetTile](https://www.mivascript.com/item/mivascript-functions/gdImageSetTile.html)  \n\ngdImageSetTile( im, tile )",
		"insertText": "gdImageSetTile( ${1:im}, ${2:tile} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageSetTile"
	},
	{
		"documentation": "[gdImageSharpen](https://www.mivascript.com/item/mivascript-functions/gdImageSharpen.html)  \n\ngdImageSharpen( im, pct )",
		"insertText": "gdImageSharpen( ${1:im}, ${2:pct} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageSharpen"
	},
	{
		"documentation": "[gdImageSquareToCircle](https://www.mivascript.com/item/mivascript-functions/gdImageSquareToCircle.html)  \n\ngdImageSquareToCircle( im, radius )",
		"insertText": "gdImageSquareToCircle( ${1:im}, ${2:radius} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageSquareToCircle"
	},
	{
		"documentation": "[gdImageStringFT](https://www.mivascript.com/item/mivascript-functions/gdImageStringFT.html)  \n\ngdImageStringFT( im, brect var, fg, fontlist, ptsize, angle, x, y, string )\n\nThis will append a string of text to an image.\n\nReturns an error message",
		"insertText": "gdImageStringFT( ${1:im}, ${2:brect var}, ${3:fg}, ${4:fontlist}, ${5:ptsize}, ${6:angle}, ${7:x}, ${8:y}, ${9:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageStringFT"
	},
	{
		"documentation": "[gdImageStringFTCircle](https://www.mivascript.com/item/mivascript-functions/gdImageStringFTCircle.html)  \n\ngdImageStringFTCircle(\n    im, cx, cy, radius, textRadius, fillPortion, font, points, top, bottom, fgcolor )",
		"insertText": "gdImageStringFTCircle( ${1:im}, ${2:cx}, ${3:cy}, ${4:radius}, ${5:textRadius}, ${6:fillPortion}, ${7:font}, ${8:points}, ${9:top}, ${10:bottom}, ${11:fgcolor} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageStringFTCircle"
	},
	{
		"documentation": "[gdImageSX](https://www.mivascript.com/item/mivascript-functions/gdImageSX.html)  \n\ngdImageSX( im )",
		"insertText": "gdImageSX( ${1:im} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageSX"
	},
	{
		"documentation": "[gdImageSY](https://www.mivascript.com/item/mivascript-functions/gdImageSY.html)  \n\ngdImageSY( im )",
		"insertText": "gdImageSY( ${1:im} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageSY"
	},
	{
		"documentation": "[gdImageTrueColor](https://www.mivascript.com/item/mivascript-functions/gdImageTrueColor.html)  \n\ngdImageTrueColor( im )",
		"insertText": "gdImageTrueColor( ${1:im} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageTrueColor"
	},
	{
		"documentation": "[gdImageTrueColorPixel](https://www.mivascript.com/item/mivascript-functions/gdImageTrueColorPixel.html)  \n\ngdImageTrueColorPixel( im, x, y )",
		"insertText": "gdImageTrueColorPixel( ${1:im}, ${2:x}, ${3:y} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageTrueColorPixel"
	},
	{
		"documentation": "[gdImageTrueColorToPalette](https://www.mivascript.com/item/mivascript-functions/gdImageTrueColorToPalette.html)  \n\ngdImageTrueColorToPalette( im, ditherFlag, colorsWanted )",
		"insertText": "gdImageTrueColorToPalette( ${1:im}, ${2:ditherFlag}, ${3:colorsWanted} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageTrueColorToPalette"
	},
	{
		"documentation": "[gdImageWBMP](https://www.mivascript.com/item/mivascript-functions/gdImageWBMP.html)  \n\ngdImageWBMP( im, fg, filename, location )",
		"insertText": "gdImageWBMP( ${1:im}, ${2:fg}, ${3:filename}, ${4:location} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageWBMP"
	},
	{
		"documentation": "[gdImageWBMPMem](https://www.mivascript.com/item/mivascript-functions/gdImageWBMPMem.html)  \n\ngdImageWBMPMem( im, fg, output var )",
		"insertText": "gdImageWBMPMem( ${1:im}, ${2:fg}, ${3:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageWBMPMem"
	},
	{
		"documentation": "[gdImageWBMPOutput](https://www.mivascript.com/item/mivascript-functions/gdImageWBMPOutput.html)  \n\ngdImageWBMPOutput( im, fg )",
		"insertText": "gdImageWBMPOutput( ${1:im}, ${2:fg} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdImageWBMPOutput"
	},
	{
		"documentation": "[gdLastError](https://www.mivascript.com/item/mivascript-functions/gdLastError.html)  \n\ngdLastError()",
		"insertText": "gdLastError()$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdLastError"
	},
	{
		"documentation": "[gdTrueColor](https://www.mivascript.com/item/mivascript-functions/gdTrueColor.html)  \n\ngdTrueColor( r, g, b )",
		"insertText": "gdTrueColor( ${1:r}, ${2:g}, ${3:b} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdTrueColor"
	},
	{
		"documentation": "[gdTrueColorAlpha](https://www.mivascript.com/item/mivascript-functions/gdTrueColorAlpha.html)  \n\ngdTrueColorAlpha( r, g, b, a )",
		"insertText": "gdTrueColorAlpha( ${1:r}, ${2:g}, ${3:b}, ${4:a} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gdTrueColorAlpha"
	},
	{
		"documentation": "[gettoken](https://www.mivascript.com/item/mivascript-functions/gettoken.html)  \n\ngettoken( delimited_string, characters, position_num )\n\nReturns the nth number token (i.e. substring) of a delimited\\_string using characters as token separators. A null string is returned if there is no nth token. Common delimiter characters are comma, tab, linefeeds, pipe but are not limited to these.\n\nReturns the position\\_num token (i.e. substring) of a delimited\\_string delimited by characters.\n\n* delimited\\_string = A string delimited by a character or characters\n* characters = the delimiter character or characters\n* position\\_num = the position of the substring you want to return",
		"insertText": "gettoken( ${1:delimited_string}, ${2:characters}, ${3:position_num} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "gettoken"
	},
	{
		"documentation": "[glosub](https://www.mivascript.com/item/mivascript-functions/glosub.html)  \n\nglosub( target_string, search, replace )\n\nGlobal substitution returns a copy of string in which all instances of string search have been replaced by string replace. (Note: to represent a backslash () in replace, use '\\\\\\\\').\n\nReturns string where all instances of search have been replaced.\n\n* target\\_string = the target string\n* search = the sub-string that will be search ed for\n* replace = the replacement string",
		"insertText": "glosub( ${1:target_string}, ${2:search}, ${3:replace} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "glosub"
	},
	{
		"documentation": "[glosub\\_array](https://www.mivascript.com/item/mivascript-functions/glosub%5Farray.html)  \n\nglosub_array( string, search_array, replace_array )\n\nWorks like glosub(), but search\\_array and replace\\_array are iterated through, each value in search\\_array found in the string is replaced by the corresponding value in replace\\_array\n\nReturn Value: string is returned with all found values replaced.\n\n* string = the target\n* search\\_array = an array of strings that will be searched for\n* replace\\_array = an array of the replacement strings",
		"insertText": "glosub_array( ${1:string}, ${2:search_array}, ${3:replace_array} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "glosub_array"
	},
	{
		"documentation": "[indexof](https://www.mivascript.com/item/mivascript-functions/indexof.html)  \n\nindexof( search_string, target_string var, start_number )\n\nReturns the position of the first occurrence of search\\_string within the target\\_string beginning at the start\\_number position. The search is CASE SENSITIVE sensitive. If not found, the functions return 0\\. The offset parameter and returned string offset are 1-based. For speed, target\\_string is passed by reference .\n\nReturns the 1 based offset\\_number of search\\_string within the target\\_string. The search is case sensitive.\n\n* search\\_string = the string that will be searched for\n* target\\_string = the string that will be searched\n* start\\_number = the 1 based starting offset withing the target\\_string where the search will begin",
		"insertText": "indexof( ${1:search_string}, ${2:target_string var}, ${3:start_number} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "indexof"
	},
	{
		"documentation": "[indexofi](https://www.mivascript.com/item/mivascript-functions/indexofi.html)  \n\nindexofi( search_string, target_string var, start_number )\n\nReturns the position of the first occurrence of search\\_string within the target\\_string beginning at the start\\_number position. The search is CASE IN-SENSITIVE. If not found, the functions return 0\\. The offset parameter and returned string offset are 1-based. For speed, target\\_string is passed by reference\n\nReturns the 1 based offset\\_number of search\\_string within the target\\_string. The search is case in-sensitive.\n\n* search\\_string = the string that will be searched for\n* target\\_string = the string that will be searched\n* start\\_number = the 1 based starting offset withing the target\\_string where the search will begin",
		"insertText": "indexofi( ${1:search_string}, ${2:target_string var}, ${3:start_number} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "indexofi"
	},
	{
		"documentation": "[indexofl](https://www.mivascript.com/item/mivascript-functions/indexofl.html)  \n\nindexofl( needle, haystack var, offset )\n\nSearch from the end of the haystack for needle, starting at the offset position.\n\nReturn value: Index of found value, or 0 if not found.\n\n* needle var = Value to search for.\n* haystack var = Text to search.\n* offset = integer offset to start at.",
		"insertText": "indexofl( ${1:needle}, ${2:haystack var}, ${3:offset} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "indexofl"
	},
	{
		"documentation": "[indexofli](https://www.mivascript.com/item/mivascript-functions/indexofli.html)  \n\nindexofli( needle, haystack var, offset )\n\nSearch without regard to case from the end of the haystack for needle, starting at the offset position.\n\nReturn value: Index of found value, or 0 if not found.\n\n* needle var = Value to search for.\n* haystack var = Text to search.\n* offset = integer offset to start at.",
		"insertText": "indexofli( ${1:needle}, ${2:haystack var}, ${3:offset} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "indexofli"
	},
	{
		"documentation": "[int](https://www.mivascript.com/item/mivascript-functions/int.html)  \n\nint( number )\n\nReturns integer portion of number (removes the decimal and any digits to the right of it)",
		"insertText": "int( ${1:number} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "int"
	},
	{
		"documentation": "[isalnum](https://www.mivascript.com/item/mivascript-functions/isalnum.html)  \n\nisalnum( string )\n\nTest if all characters are either alphabetic or digits\n\nReturns 1 if true, 0 if false\n\n* string = the characters tested",
		"insertText": "isalnum( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "isalnum"
	},
	{
		"documentation": "[isalpha](https://www.mivascript.com/item/mivascript-functions/isalpha.html)  \n\nisalpha( string )\n\nTest if all characters are alphabetic.\n\nReturns 1 if true, 0 if false\n\n* string = the characters tested",
		"insertText": "isalpha( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "isalpha"
	},
	{
		"documentation": "[isascii](https://www.mivascript.com/item/mivascript-functions/isascii.html)  \n\nisascii( string )\n\nTest if all characters are ASCII characters (those with decimal value between 0 and 127).\n\nReturns 1 if true, 0 if false\n\n* string = the characters tested",
		"insertText": "isascii( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "isascii"
	},
	{
		"documentation": "[iscntrl](https://www.mivascript.com/item/mivascript-functions/iscntrl.html)  \n\niscntrl( string )\n\nTest if all characters are control characters (those with decimal value between 0 and 31, or 127).\n\nReturns 1 if true, 0 if false\n\n* string = the characters tested",
		"insertText": "iscntrl( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "iscntrl"
	},
	{
		"documentation": "[isdigit](https://www.mivascript.com/item/mivascript-functions/isdigit.html)  \n\nisdigit( string )\n\nTest if all characters are digits in the range 0-9.\n\nReturns 1 if true, 0 if false\n\n* string = the characters tested",
		"insertText": "isdigit( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "isdigit"
	},
	{
		"documentation": "[isgraph](https://www.mivascript.com/item/mivascript-functions/isgraph.html)  \n\nisgraph( string )\n\nTest if all characters are graphic (see isprint) characters (those with decimal value between 33 and 127).\n\nReturns 1 if true, 0 if false\n\n* string = the characters tested",
		"insertText": "isgraph( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "isgraph"
	},
	{
		"documentation": "[islower](https://www.mivascript.com/item/mivascript-functions/islower.html)  \n\nislower( string )\n\nTest if all characters are lowercase letters,\n\nReturns 1 if true, 0 if false\n\n* string = the characters tested",
		"insertText": "islower( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "islower"
	},
	{
		"documentation": "[isprint](https://www.mivascript.com/item/mivascript-functions/isprint.html)  \n\nisprint( string )\n\nTest if all characters are printable (same as graphic characters, with the addition of the space character).\n\nReturns 1 if true, 0 if false\n\n* string = the characters tested",
		"insertText": "isprint( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "isprint"
	},
	{
		"documentation": "[ispunct](https://www.mivascript.com/item/mivascript-functions/ispunct.html)  \n\nispunct( string )\n\nTest if all characters are whitespace (space, tab, vertical tab, newline, form feed) characters.\n\nReturns 1 if true, 0 if false\n\n* string = the characters tested",
		"insertText": "ispunct( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "ispunct"
	},
	{
		"documentation": "[isspace](https://www.mivascript.com/item/mivascript-functions/isspace.html)  \n\nisspace( string )\n\nTest if all characters are whitespace (space, tab, vertical tab, newline, form feed) characters.\n\nReturns 1 if true, 0 if false\n\n* string = the characters tested",
		"insertText": "isspace( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "isspace"
	},
	{
		"documentation": "[isupper](https://www.mivascript.com/item/mivascript-functions/isupper.html)  \n\nisupper( string )\n\nTest if all characters are uppercase letters.\n\nReturns 1 if true, 0 if false\n\n* string = the characters tested",
		"insertText": "isupper( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "isupper"
	},
	{
		"documentation": "[isxdigit](https://www.mivascript.com/item/mivascript-functions/isxdigit.html)  \n\nisxdigit( string )\n\nTest if all characters are hexadecimal digits (a-f, A-F, 0-9).\n\nReturns 1 if true, 0 if false\n\n* string = the characters tested",
		"insertText": "isxdigit( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "isxdigit"
	},
	{
		"documentation": "[keyword\\_extract](https://www.mivascript.com/item/mivascript-functions/keyword%5Fextract.html)  \n\nkeyword_extract( string, keywords var )\n\nGiven a string, will extract keywords from it. Skipping SGML tags and stemming words (e.g., \"running\" becomes \"run\", but \"bring\" is not changed), the unique list of keywords are placed in the keywords as an array. Also, some common english words (the articles, \"for\" \"are\", etc.) are removed. Note that there are some words may stem unexpectedly (e.g., \"has\" transforms to \"ha\").\n\nPopulates the keywords array and returns number of elements.",
		"insertText": "keyword_extract( ${1:string}, ${2:keywords var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "keyword_extract"
	},
	{
		"documentation": "[keyword\\_extract\\_merge](https://www.mivascript.com/item/mivascript-functions/keyword%5Fextract%5Fmerge.html)  \n\nkeyword_extract_merge( string, weight )\n\nExtracts keywords as described in keyword\\_extract, but inserts them into a persistent array initialized by keyword\\_extract\\_merge\\_init. The weight value passed in is associated with the results from the current string being analyzed. Return null.\n\nReturns null.",
		"insertText": "keyword_extract_merge( ${1:string}, ${2:weight} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "keyword_extract_merge"
	},
	{
		"documentation": "[keyword\\_extract\\_merge\\_init](https://www.mivascript.com/item/mivascript-functions/keyword%5Fextract%5Fmerge%5Finit.html)  \n\nkeyword_extract_merge_init()\n\nInitializes persistent storage for a multiple calls to keyword\\_merge\\_extract. Note that this persistent storage is usable for multiple calls within a running Miva Script program, and is deleted by the VM at the end of program execution.\n\nReturns null.",
		"insertText": "keyword_extract_merge_init()$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "keyword_extract_merge_init"
	},
	{
		"documentation": "[keyword\\_extract\\_merge\\_results](https://www.mivascript.com/item/mivascript-functions/keyword%5Fextract%5Fmerge%5Fresults.html)  \n\nkeyword_extract_merge_results( keywords var )\n\nReturns results from one or more keyword\\_extract\\_merge calls, storing them as an aggregate in \"keywords\".\n\nReturns null.",
		"insertText": "keyword_extract_merge_results( ${1:keywords var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "keyword_extract_merge_results"
	},
	{
		"documentation": "[keyword\\_in](https://www.mivascript.com/item/mivascript-functions/keyword%5Fin.html)  \n\nkeyword_in( keywords_array var, search_string )\n\nPerforms a keyword\\_extract() on the string parameter, and determines if the value in the keywords parameter is contained in the keyword list, and returns a boolean 1 or 0 to signify that the keyword is or is not in the string. If the keywords parameter is an array of strings, checks each value in the array, and returns an array of booleans specifying whether the array element is or is not in the string.\n\nIf keywords is an array, returns an array of booleans specifying if a given keyword element is in the keyword list. -- If keywords is a string, returns a boolean specifying if the given keyword is in the keyword list.",
		"insertText": "keyword_in( ${1:keywords_array var}, ${2:search_string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "keyword_in"
	},
	{
		"documentation": "[len](https://www.mivascript.com/item/mivascript-functions/len.html)  \n\nlen( string )\n\nReturns the number of characters in string.\n\nThe length of string.\n\n* string = a literal string value embedded in single quotes or an expression that evaluates as a string.",
		"insertText": "len( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "len"
	},
	{
		"documentation": "[len\\_var](https://www.mivascript.com/item/mivascript-functions/len%5Fvar.html)  \n\nlen_var( string var )\n\nReturns the number of characters in string. This function is identical to len() but its parameter is passed by reference, improving performance when dealing with large strings.\n\nthe length of the string\n\n* string = a literal string value embedded in single quotes or an expression that evaluates as a string.",
		"insertText": "len_var( ${1:string var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "len_var"
	},
	{
		"documentation": "[log](https://www.mivascript.com/item/mivascript-functions/log.html)  \n\nlog( number )\n\nReturns the natural logarithm (base e, approximately 2.71828) of number.",
		"insertText": "log( ${1:number} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "log"
	},
	{
		"documentation": "[log10](https://www.mivascript.com/item/mivascript-functions/log10.html)  \n\nlog10( number )\n\nReturns the base 10 logarithm of number",
		"insertText": "log10( ${1:number} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "log10"
	},
	{
		"documentation": "[ltrim](https://www.mivascript.com/item/mivascript-functions/ltrim.html)  \n\nltrim( string )\n\nReturns a copy of string with all space characters removed from the left end. ⇨ Version 5.32 -- Will now trim whitespace from arrays and structures. Previously the functions would convert arrays and structures to serialized data and then trim it. Arrays and structures are now iterated and all values within are trimmed appropriately.",
		"insertText": "ltrim( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "ltrim"
	},
	{
		"documentation": "[makesessionid](https://www.mivascript.com/item/mivascript-functions/makesessionid.html)  \n\nmakesessionid()\n\nReturns a 128-bit unique ID.",
		"insertText": "makesessionid()$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "makesessionid"
	},
	{
		"documentation": "[max](https://www.mivascript.com/item/mivascript-functions/max.html)  \n\nmax( a, b )\n\nCompares and returns the higher of two values.\n\nReturns the higher value of a or b\n\n* a = string or numeric value, b = string or numeric value",
		"insertText": "max( ${1:a}, ${2:b} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "max"
	},
	{
		"documentation": "[min](https://www.mivascript.com/item/mivascript-functions/min.html)  \n\nmin( a, b )\n\nCompares and returns the lower of two values.\n\nReturns the smaller value of a or b\n\n* a = string or numeric value, b = string or numeric value",
		"insertText": "min( ${1:a}, ${2:b} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "min"
	},
	{
		"documentation": "[miva\\_array\\_binarysearch](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Fbinarysearch.html)  \n\nmiva_array_binarysearch( key, array var, callback, data var )\n\nPerforms a binary search for \"key\" in \"array\". \"array\" must have been previously sorted.\n\nReturns the index of \"key\" in \"array\" or 0 if no match was found.\n\n* key = The value that will be searched for.\n* array var = The array that will be searched.\n* callback = The name of a callback function. See below.\n* data var = Optional data that is passed through to the callback function",
		"insertText": "miva_array_binarysearch( ${1:key}, ${2:array var}, ${3:callback}, ${4:data var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_binarysearch"
	},
	{
		"documentation": "[miva\\_array\\_clear](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Fclear.html)  \n\nmiva_array_clear( array var, start, count )\n\nRemoves \"count\" elements from \"array\", starting at position \"start\". The elements are removed from the array, but the array is not collapsed.\n\nReturns the number of elements remaining in the array.\n\n* array = The array that will be altered.\n* start = the starting index numbert\n* count = the number of elements that will be cleared",
		"insertText": "miva_array_clear( ${1:array var}, ${2:start}, ${3:count} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_clear"
	},
	{
		"documentation": "[miva\\_array\\_collapse](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Fcollapse.html)  \n\nmiva_array_collapse( aggregate var )\n\nCollapses the array\\_variable making the indices sequential starting at 1\\. Returns the number of elements in the array.",
		"insertText": "miva_array_collapse( ${1:aggregate var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_collapse"
	},
	{
		"documentation": "[miva\\_array\\_copy](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Fcopy.html)  \n\nmiva_array_copy( source var, sstart, scount, dest var, dpos )\n\nCopies \"scount\" elements from \"source\" into \"dest\", starting with \"sstart\" and placing the elements at \"dpos\". Existing elements in \"dest\" are overwritten.\n\nReturns the number of elements in the \"dest\" array after the copy.\n\n* source = The source array from which records will be copied\n* sstart = The source starting index\n* scount = The number of source records to copy.\n* dest = The destination array that will receive the copied records.\n* dpos = The starting index within the destination array. Overlapping elements in \"dest\" are overwritten.",
		"insertText": "miva_array_copy( ${1:source var}, ${2:sstart}, ${3:scount}, ${4:dest var}, ${5:dpos} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_copy"
	},
	{
		"documentation": "[miva\\_array\\_copy\\_ref](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Fcopy%5Fref.html)  \n\nmiva_array_copy_ref( source var, sstart, scount, dest var, dpos )\n\nCopies \"scount\" elements from \"source\" into \"dest\", starting with \"sstart\" and placing the elements at \"dpos\". Existing elements in \"dest\" are overwritten.\n\nReturns the number of elements in the \"dest\" array after the copy.\n\n* source = The source array from which records will be copied\n* sstart = The source starting index\n* scount = The number of source records to copy.\n* dest = The destination array that will receive the copied records.\n* dpos = The starting index within the destination array. Overlapping elements in \"dest\" are overwritten.",
		"insertText": "miva_array_copy_ref( ${1:source var}, ${2:sstart}, ${3:scount}, ${4:dest var}, ${5:dpos} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_copy_ref"
	},
	{
		"documentation": "[miva\\_array\\_delete](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Fdelete.html)  \n\nmiva_array_delete( array var, start, count )\n\nRemoves \"count\" elements from \"array\", starting at position \"start\". The array is collapsed after the elements are removed.\n\nReturns the number of elements remaining in the array.\n\n* array = The array that will be altered.\n* start = the starting index numbert\n* count = the number of elements that will be cleared",
		"insertText": "miva_array_delete( ${1:array var}, ${2:start}, ${3:count} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_delete"
	},
	{
		"documentation": "[miva\\_array\\_deserialize](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Fdeserialize.html)  \n\nmiva_array_deserialize( string )\n\nReverses miva\\_array\\_serialize(). Returns an aggregate array repopulated to match the original.",
		"insertText": "miva_array_deserialize( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_deserialize"
	},
	{
		"documentation": "[miva\\_array\\_elements](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Felements.html)  \n\nmiva_array_elements( aggregate var )\n\nReturns the number of elements in the array\\_variable that were actually used.",
		"insertText": "miva_array_elements( ${1:aggregate var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_elements"
	},
	{
		"documentation": "[miva\\_array\\_filter](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Ffilter.html)  \n\nmiva_array_filter( array var, offset, element var, filter_expression, output var )\n\nIterate through an array starting at a given offset, execute a filter expression against each element, and copy the member to a new output array. See also miva\\_array\\_filter\\_ref.\n\nReturn value: Count of output array elements.\n\n* array var = Source array of structures.\n* offset = index in the array to start filtering from.\n* element var = Name of a variable to reference in the filter expression.\n* filter\\_expression = Text of an expression to execute based on the individual array element.\n* output var = Output array of all structures that tested true in the filter expression.",
		"insertText": "miva_array_filter( ${1:array var}, ${2:offset}, ${3:element var}, ${4:filter_expression}, ${5:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_filter"
	},
	{
		"documentation": "[miva\\_array\\_filter\\_ref](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Ffilter%5Fref.html)  \n\nmiva_array_filter_ref( array var, offset, element var, filter_expression, output var )\n\nIterate through an array starting at a given offset, execute a filter expression against each element, and create a new member with references to the members in the output array. See also miva\\_array\\_filter.\n\nReturn value: Count of output array elements.\n\n* array var = Source array of structures.\n* offset = index in the array to start filtering from.\n* element var = Name of a variable to reference in the filter expression.\n* filter\\_expression = Text of an expression to execute based on the individual array element.\n* output var = Output array of all structures that tested true in the filter expression.",
		"insertText": "miva_array_filter_ref( ${1:array var}, ${2:offset}, ${3:element var}, ${4:filter_expression}, ${5:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_filter_ref"
	},
	{
		"documentation": "[miva\\_array\\_find](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Ffind.html)  \n\nmiva_array_find( needle, haystack var, offset )\n\nPerforms a sequential search for \"needle\" in array \"haystack\", starting at \"offset\". Comparison is equivalent to the EQ operator. (i.e. looks for an exact match). Haystack must be a simple array( no members), or contain no more than 1 member.\n\nReturns the index of \"needle\" in \"haystack\" or 0 if the element was not found.\n\n* needle = value to search for\n* haystack var = the simple array to search\n* offset = the starting index position",
		"insertText": "miva_array_find( ${1:needle}, ${2:haystack var}, ${3:offset} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_find"
	},
	{
		"documentation": "[miva\\_array\\_insert](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Finsert.html)  \n\nmiva_array_insert( array var, element, pos )\n\nInserts single element \"element\" into \"array\" at position \"pos\". If \"pos\" = -1, the element is inserted at the end of \"array\".\n\nReturns the number of elements in \"array\" after the insertion.\n\n* array = The array tro which the records will be inserted\n* element = the record that will be inserted\n* pos = the index where the element will be inserted.",
		"insertText": "miva_array_insert( ${1:array var}, ${2:element}, ${3:pos} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_insert"
	},
	{
		"documentation": "[miva\\_array\\_insert\\_ref](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Finsert%5Fref.html)  \n\nmiva_array_insert_ref( array var, element var, pos )\n\nInserts single element \"element\" into \"array\" at position \"pos\".\n\nReturns the number of elements in \"array\" after the insertion.\n\n* array = The array tro which the records will be inserted\n* element = the record that will be inserted\n* pos = the index where the element will be inserted.",
		"insertText": "miva_array_insert_ref( ${1:array var}, ${2:element var}, ${3:pos} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_insert_ref"
	},
	{
		"documentation": "[miva\\_array\\_insert\\_var](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Finsert%5Fvar.html)  \n\nmiva_array_insert_var( array var, element var, pos )\n\nInserts single element \"element\" into \"array\" at position \"pos\".\n\nReturns the number of elements in \"array\" after the insertion.\n\n* array = The array tro which the records will be inserted\n* element = the record that will be inserted\n* pos = the index where the element will be inserted.",
		"insertText": "miva_array_insert_var( ${1:array var}, ${2:element var}, ${3:pos} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_insert_var"
	},
	{
		"documentation": "[miva\\_array\\_max](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Fmax.html)  \n\nmiva_array_max( aggregate var )\n\nReturn the maximum array\\_variable index used.",
		"insertText": "miva_array_max( ${1:aggregate var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_max"
	},
	{
		"documentation": "[miva\\_array\\_merge](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Fmerge.html)  \n\nmiva_array_merge( source var, sstart, scount, dest var, dpos )\n\nCopies \"scount\" elements from \"source\" into \"dest\", starting with \"sstart\" and inserting the elements at \"dpos\". Existing elements in \"dest\" past \"dpos\" are pushed forward by \"scount\" elements.\n\nReturns the number of elements in the \"dest\" array after the merge.\n\n* source = The source array from which records will be copied\n* sstart = The source starting index\n* scount = The number of source records to copy.\n* dest = The destination array that will receive the copied records.\n* dpos = The starting index within the destination array. Existing elements in \"dest\" past \"dpos\" are pushed forward by \"scount\" elements.",
		"insertText": "miva_array_merge( ${1:source var}, ${2:sstart}, ${3:scount}, ${4:dest var}, ${5:dpos} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_merge"
	},
	{
		"documentation": "[miva\\_array\\_merge\\_ref](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Fmerge%5Fref.html)  \n\nmiva_array_merge_ref( source var, sstart, scount, dest var, dpos )\n\nCopies \"scount\" elements from \"source\" into \"dest\", starting with \"sstart\" and inserting the elements at \"dpos\". Existing elements in \"dest\" past \"dpos\" are pushed forward by \"scount\" elements.\n\nReturns the number of elements in the \"dest\" array after the merge.\n\n* source = The source array from which records will be copied\n* sstart = The source starting index\n* scount = The number of source records to copy.\n* dest = The destination array that will receive the copied records.\n* dpos = The starting index within the destination array. Existing elements in \"dest\" past \"dpos\" are pushed forward by \"scount\" elements.",
		"insertText": "miva_array_merge_ref( ${1:source var}, ${2:sstart}, ${3:scount}, ${4:dest var}, ${5:dpos} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_merge_ref"
	},
	{
		"documentation": "[miva\\_array\\_min](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Fmin.html)  \n\nmiva_array_min( aggregate var )\n\nReturn the minumum array\\_variable index used.",
		"insertText": "miva_array_min( ${1:aggregate var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_min"
	},
	{
		"documentation": "[miva\\_array\\_next](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Fnext.html)  \n\nmiva_array_next( aggregate var, index )",
		"insertText": "miva_array_next( ${1:aggregate var}, ${2:index} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_next"
	},
	{
		"documentation": "[miva\\_array\\_pop](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Fpop.html)  \n\nmiva_array_pop( array var )\n\nRemoves and returns the last element of \"array\".\n\nReturns the number of elements remaining in \"array\".\n\n* array = the array where the record will be remove.",
		"insertText": "miva_array_pop( ${1:array var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_pop"
	},
	{
		"documentation": "[miva\\_array\\_pop\\_ref](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Fpop%5Fref.html)  \n\nmiva_array_pop_ref( array var, element var )\n\nMakes \"element\" a reference to the last element of \"array\", then removes it from the array.\n\nReturns the number of elements remaining in \"array\".\n\n* array = the array where the record will be remove.",
		"insertText": "miva_array_pop_ref( ${1:array var}, ${2:element var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_pop_ref"
	},
	{
		"documentation": "[miva\\_array\\_previous](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Fprevious.html)  \n\nmiva_array_previous( aggregate var, index )",
		"insertText": "miva_array_previous( ${1:aggregate var}, ${2:index} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_previous"
	},
	{
		"documentation": "[miva\\_array\\_search](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Fsearch.html)  \n\nmiva_array_search( array var, offset, element var, filter_expr )\n\nPerforms an sequential search in \"array\", starting at \"offset\". Comparison is made by evaluating \"filter\\_expr\" for each element. This allows you to specify the comparison type.\n\nReturns the index of the first element in \"array\" for which filter\\_expr evaluated as true, or 0 if no elements met this condition.\n\n* array var = the array that will be searched\n* offset = the starting index for the search\n* element var = a variable name used to reference individual array records. See Example 1\n* filter\\_expr = an expression similar to the EXPR attribute to MvFILTER. See Example 2",
		"insertText": "miva_array_search( ${1:array var}, ${2:offset}, ${3:element var}, ${4:filter_expr} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_search"
	},
	{
		"documentation": "[miva\\_array\\_serialize](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Fserialize.html)  \n\nmiva_array_serialize( aggregate var )\n\nReturns a string representation of the array and any subarrays. Can be used to store an entire array in a database for later retreival.",
		"insertText": "miva_array_serialize( ${1:aggregate var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_serialize"
	},
	{
		"documentation": "[miva\\_array\\_shift](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Fshift.html)  \n\nmiva_array_shift( array var )\n\nRemoves and returns the first element of \"array\".\n\nReturns the first element of \"array\".\n\n* array = the array where the record will be remove.",
		"insertText": "miva_array_shift( ${1:array var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_shift"
	},
	{
		"documentation": "[miva\\_array\\_shift\\_ref](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Fshift%5Fref.html)  \n\nmiva_array_shift_ref( array var, element var )\n\nMakes \"element\" a reference to the first element of \"array\", then removes it from the array.\n\nReturns the number of elements remaining in \"array\".\n\n* array = the array where the record will be remove\n* element = a reference to the element that was removed.",
		"insertText": "miva_array_shift_ref( ${1:array var}, ${2:element var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_shift_ref"
	},
	{
		"documentation": "[miva\\_array\\_sort](https://www.mivascript.com/item/mivascript-functions/miva%5Farray%5Fsort.html)  \n\nmiva_array_sort( aggregate var, callback, data var )\n\nThis function will sort an array structure\n\nReturns the number of array elements in the aggregate array structure after sorting.\n\n* Aggregate: The array that will be sorted. (the aggregate will be physically altered on return)\n* Callback: The name of a user function that must exist in your program, defined as Callback(left var, right var, data var)\n* Data: Not directly used in the miva\\_array\\_sort(), the value will be passed to the Callback function.",
		"insertText": "miva_array_sort( ${1:aggregate var}, ${2:callback}, ${3:data var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_array_sort"
	},
	{
		"documentation": "[miva\\_async\\_sleep](https://www.mivascript.com/item/mivascript-functions/miva%5Fasync%5Fsleep.html)  \n\nmiva_async_sleep( until, semfile, semlocation )\n\nSleep until the \"until\" time, or the modified time on the file described by semfile and semlocation is changed.\n\nReturn Value: None\n\n* until = time\\_t (seconds since 1-JAN-1970) set in the future, the time to sleep until\n* semfile = file name to watch\n* semlocation = location of the file to watch. \"script\" or \"data\", defaulting to \"data\" if any other value.",
		"insertText": "miva_async_sleep( ${1:until}, ${2:semfile}, ${3|'data','script'|} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_async_sleep"
	},
	{
		"documentation": "[miva\\_cdata\\_encode](https://www.mivascript.com/item/mivascript-functions/miva%5Fcdata%5Fencode.html)  \n\nmiva_cdata_encode( text )\n\nCreate one or more CDATA tags with the provided text, splitting any data with \"\\]\\]>\" into two CDATA tags with \"\\]\\]\" at the end of one CDATA tag, and \">\" as the first value of the next CDATA tag.\n\nReturn value: Text quoted within one or more CDATA tags.\n\n* text = String to encode",
		"insertText": "miva_cdata_encode( ${1:text} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_cdata_encode"
	},
	{
		"documentation": "[miva\\_closelog](https://www.mivascript.com/item/mivascript-functions/miva%5Fcloselog.html)  \n\nmiva_closelog()\n\nCloses the connection to the log file and otherwise eliminates the effect of the last call to miva\\_openlog. Will cause any subsequent calls to miva\\_setlogmask and miva\\_writelog to fail until miva\\_openlog is called again.\n\nReturns 1 on success, 0 on error",
		"insertText": "miva_closelog()$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_closelog"
	},
	{
		"documentation": "[miva\\_csv\\_encode](https://www.mivascript.com/item/mivascript-functions/miva%5Fcsv%5Fencode.html)  \n\nmiva_csv_encode( text, delimiter )\n\nTakes a string of text and a delimiter, and returns a string with appropriately doubled quotes or escaped delimiters, suitable for including in a CSV record.\n\nReturns: An appropriately escaped or quoted string, or a copy of the original string if no quotes or delimiters were found.\n\n* text = String to escape\n* delimiter = separation character (for example, a \",\" for a comma-separated list).",
		"insertText": "miva_csv_encode( ${1:text}, ${2:delimiter} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_csv_encode"
	},
	{
		"documentation": "[miva\\_element\\_exists](https://www.mivascript.com/item/mivascript-functions/miva%5Felement%5Fexists.html)  \n\nmiva_element_exists( array var, index )\n\nTests if an element exists where: array is an array and index is index number being tested.\n\nReturns 1 if the element found else 0",
		"insertText": "miva_element_exists( ${1:array var}, ${2:index} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_element_exists"
	},
	{
		"documentation": "[miva\\_getvarlist](https://www.mivascript.com/item/mivascript-functions/miva%5Fgetvarlist.html)  \n\nmiva_getvarlist( scope )\n\nReturns a comma-separated list of the names of all currently defined variables where: scope = the string literal \"l\", \"g\", \"s\" (i.e. local, global, system)",
		"insertText": "miva_getvarlist( ${1:scope} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_getvarlist"
	},
	{
		"documentation": "[miva\\_hex\\_decode](https://www.mivascript.com/item/mivascript-functions/miva%5Fhex%5Fdecode.html)  \n\nmiva_hex_decode( data )\n\nConvert \"data\" to hexadecimal notation.\n\nreturns the resulting decoded data\n\n* data = the hex data to decode.",
		"insertText": "miva_hex_decode( ${1:data} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_hex_decode"
	},
	{
		"documentation": "[miva\\_hex\\_encode](https://www.mivascript.com/item/mivascript-functions/miva%5Fhex%5Fencode.html)  \n\nmiva_hex_encode( data )\n\nConvert \"data\" to hexadecimal notation.\n\nreturns the resulting encoded data.\n\n* data = the value to encode.",
		"insertText": "miva_hex_encode( ${1:data} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_hex_encode"
	},
	{
		"documentation": "[miva\\_html\\_strip](https://www.mivascript.com/item/mivascript-functions/miva%5Fhtml%5Fstrip.html)  \n\nmiva_html_strip( text, allowed_tags )\n\nRemoves HTML tags from a given string.\n\nReturn value: Text string with all HTML tags except those listed in allowed\\_tags removed.\n\n* text = String to remove HTML tags from.\n* allowed\\_tags = A comma-separated list of tags that will not be stripped from the string.",
		"insertText": "miva_html_strip( ${1:text}, ${2:allowed_tags} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_html_strip"
	},
	{
		"documentation": "[miva\\_ieee754\\_normalize](https://www.mivascript.com/item/mivascript-functions/miva%5Fieee754%5Fnormalize.html)  \n\nmiva_ieee754_normalize( significant_digits, value )\n\nNormalize the value to IEEE 754 specifications, to the given number of significant digits.  \n\nReturn value: The normalized value to the specified significant digits\n\n* significant\\_digits = Number of digits to normalize the value to.\n* value = Floating point value to normalize.",
		"insertText": "miva_ieee754_normalize( ${1:significant_digits}, ${2:value} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_ieee754_normalize"
	},
	{
		"documentation": "[miva\\_json\\_decode](https://www.mivascript.com/item/mivascript-functions/miva%5Fjson%5Fdecode.html)  \n\nmiva_json_decode( data, output var )\n\nDecodes a block of JSON data in \"data\", returning the parsed aggregate value in \"output\".\n\nReturns 1 on success, 0 on error.\n\n* data = The block of JSON encoded data that will be decoded\n* output var = The function assigns the parsed aggregate to \"output\" as a structured array.",
		"insertText": "miva_json_decode( ${1:data}, ${2:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_json_decode"
	},
	{
		"documentation": "[miva\\_json\\_decode\\_last\\_error](https://www.mivascript.com/item/mivascript-functions/miva%5Fjson%5Fdecode%5Flast%5Ferror.html)  \n\nmiva_json_decode_last_error()\n\nReturns a text description of the most recent parsing error encountered by miva\\_json\\_decode()\n\nReturns a text description of the most recent parsing error.",
		"insertText": "miva_json_decode_last_error()$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_json_decode_last_error"
	},
	{
		"documentation": "[miva\\_lockfile](https://www.mivascript.com/item/mivascript-functions/miva%5Flockfile.html)  \n\nmiva_lockfile( path, location )\n\nCreates and locks a lockfile. Similar to the behavior of MvLOCKFILE without the closing /MvLOCKFILE behavior. It also creates the exact filename, rather than appending \".lck\" to the filename as MvLOCKFILE does.\n\nReturns 1 if sucessful, -1 if fails\n\n* path = fully qualified path to the file\n* location = location of the file - 'data' or 'script'\n* Use fdelete() or sdelete() to delete the lockfile.",
		"insertText": "miva_lockfile( ${1:path}, ${2|'data','script'|} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_lockfile"
	},
	{
		"documentation": "[miva\\_member\\_exists](https://www.mivascript.com/item/mivascript-functions/miva%5Fmember%5Fexists.html)  \n\nmiva_member_exists( structure var, member )\n\nTests if a member exists where: \"structure\" is a data structure and \"member\" is the name of a structure member being tested. Returns 0 or 1.\n\nReturns 1 if found else returns 0\n\n* structure: A data structure or structured array that is tested. It is passed by reference to the function.\n* member: The literal member name or a variable that evaluates as the member name.",
		"insertText": "miva_member_exists( ${1:structure var}, ${2:member} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_member_exists"
	},
	{
		"documentation": "[miva\\_openlog](https://www.mivascript.com/item/mivascript-functions/miva%5Fopenlog.html)  \n\nmiva_openlog( ident, logopt, facility )\n\nOpens a connection to the log file and sets default behavior for all subsequent miva\\_writelog calls.\n\nReturns 1 on success, 0 on error\n\n* ident = a string that will be prepended to all subsequent log messages. May be the empty string.\n* logopt = a string containing a list of options. Each option may be any of the words listed below. Commas and/or spaces separate the options. An empty string is permitted.\n* facility = The default facility code for subsequent messages. May be any one of the words listed below.",
		"insertText": "miva_openlog( ${1:ident}, ${2|'PID','CONS','ODELAY','NDELAY','NOWAIT','PERROR'|}, ${3|'USER','LOCAL0','LOCAL1','LOCAL2','LOCAL3','LOCAL4','LOCAL5','LOCAL6','LOCAL7'|} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_openlog"
	},
	{
		"documentation": "[miva\\_output\\_flush](https://www.mivascript.com/item/mivascript-functions/miva%5Foutput%5Fflush.html)  \n\nmiva_output_flush()\n\nWrites the HTTP headers and any other output to the browser. Subsequent calls will write the output, but not the headers.",
		"insertText": "miva_output_flush()$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_output_flush"
	},
	{
		"documentation": "[miva\\_output\\_header](https://www.mivascript.com/item/mivascript-functions/miva%5Foutput%5Fheader.html)  \n\nmiva_output_header( header, value )\n\nSets an HTTP header name-value pair.",
		"insertText": "miva_output_header( ${1:header}, ${2:value} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_output_header"
	},
	{
		"documentation": "[miva\\_setdefaultdatabase](https://www.mivascript.com/item/mivascript-functions/miva%5Fsetdefaultdatabase.html)  \n\nmiva_setdefaultdatabase( database )\n\nThis function takes a string as a parameter which specifies the type of database to which the miva\\_defaultdatabase system variable is set.",
		"insertText": "miva_setdefaultdatabase( ${1:database} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_setdefaultdatabase"
	},
	{
		"documentation": "[miva\\_setdefaultlanguage](https://www.mivascript.com/item/mivascript-functions/miva%5Fsetdefaultlanguage.html)  \n\nmiva_setdefaultlanguage( language )",
		"insertText": "miva_setdefaultlanguage( ${1:language} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_setdefaultlanguage"
	},
	{
		"documentation": "[miva\\_setlanguage](https://www.mivascript.com/item/mivascript-functions/miva%5Fsetlanguage.html)  \n\nmiva_setlanguage( language )",
		"insertText": "miva_setlanguage( ${1:language} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_setlanguage"
	},
	{
		"documentation": "[miva\\_setlogmask](https://www.mivascript.com/item/mivascript-functions/miva%5Fsetlogmask.html)  \n\nmiva_setlogmask( maskpri )\n\nCauses all subsequent calls to miva\\_writelog to be ignored unless they specify a priority that is included in the maskpri argument. Will return failure unless the miva log is open.\n\nReturns 1 on success, 0 on error\n\n* maskpri = a string containing a list of priorities. Each priority may be any of the words listed below. Commas and/or spaces separate the priorities. An empty string is permitted but means that all subsequent miva\\_writelog calls will be ignored.",
		"insertText": "miva_setlogmask( ${1|'EMERG','ALERT','CRIT','ERR','WARNING','NOTICE','INFO','DEBUG'|} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_setlogmask"
	},
	{
		"documentation": "[miva\\_setprocessname](https://www.mivascript.com/item/mivascript-functions/miva%5Fsetprocessname.html)  \n\nmiva_setprocessname( name )\n\nSet the process name (where possible) and alters the s.process\\_name variable.\n\nReturn value: None.\n\n* name = Text to set the process name to.",
		"insertText": "miva_setprocessname( ${1:name} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_setprocessname"
	},
	{
		"documentation": "[miva\\_sleep](https://www.mivascript.com/item/mivascript-functions/miva%5Fsleep.html)  \n\nmiva_sleep( msecs )\n\nDelays the running application for msecs milliseconds or until the global timeout expires, whichever is shorter.\n\nReturn Value: None\n\n* msecs = the number of milliseconds to delay",
		"insertText": "miva_sleep( ${1:msecs} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_sleep"
	},
	{
		"documentation": "[miva\\_splitstring](https://www.mivascript.com/item/mivascript-functions/miva%5Fsplitstring.html)  \n\nmiva_splitstring( string, sep, output var, flags )\n\nSplits a string into chunks in an array, using the separator parameter as the point to split the string. Returns the number of elements in the output array.\n\nReturns: The number of elements in the output array.\n\n* string = The input string\n* sep = A single character that will be used to split the string into multiple elements (for example a comma or space)\n* output var = The array of elements returned\n* flags = A comma separated list of any of the following keywords  \ntrim : removes extra space around the left and right sides of all elements  \nltrim : removes extra space around the left side of all elements  \nrtrim : removes extra space around the right side of all elements  \nlower : converts all elements to lowercase  \nupper : converts all elements to uppercase  \ninsensitive : searches for the sep input parameter using a case-insensitive search",
		"insertText": "miva_splitstring( ${1:string}, ${2:sep}, ${3:output var}, ${4|'trim','ltrim','rtrim','lower','upper','insensitive'|} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_splitstring"
	},
	{
		"documentation": "[miva\\_struct\\_members](https://www.mivascript.com/item/mivascript-functions/miva%5Fstruct%5Fmembers.html)  \n\nmiva_struct_members( struct var, members var )\n\nThis function retreives the member / field names of a data structure.\n\nReturns the number of member names found. Important: A member name will be returned even if its value is null.\n\n* struct = the structure or structured array that will be processed\n* members = The array populated with the members names found in structure",
		"insertText": "miva_struct_members( ${1:struct var}, ${2:members var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_struct_members"
	},
	{
		"documentation": "[miva\\_struct\\_merge](https://www.mivascript.com/item/mivascript-functions/miva%5Fstruct%5Fmerge.html)  \n\nmiva_struct_merge( source var, dest var )\n\nCopy the structure members from source into dest, if the member does not exist in dest. See also miva\\_struct\\_merge\\_ref.\n\nReturn value: 0 on success, -1 on failure.\n\n* source - Structure to copy into dest.\n* dest - Destination structure.",
		"insertText": "miva_struct_merge( ${1:source var}, ${2:dest var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_struct_merge"
	},
	{
		"documentation": "[miva\\_struct\\_merge\\_ref](https://www.mivascript.com/item/mivascript-functions/miva%5Fstruct%5Fmerge%5Fref.html)  \n\nmiva_struct_merge_ref( source var, dest var )\n\nMake references of the structure members from source in dest, if the member does not exist in dest. Similar to miva\\_struct\\_merge, but makes references into original structure rather than copies.\n\nReturn value: None.\n\n* source - Structure to copy into dest.\n* dest - Destination structure.",
		"insertText": "miva_struct_merge_ref( ${1:source var}, ${2:dest var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_struct_merge_ref"
	},
	{
		"documentation": "[miva\\_template\\_compile](https://www.mivascript.com/item/mivascript-functions/miva%5Ftemplate%5Fcompile.html)  \n\nmiva_template_compile( signat, source var, sourceitems var, target, errors var )\n\nCompiles the contents of a string into a page template file.\n\nReturns 1 if compilation succeeds, 0 if error occured.\n\n* signat = Any text. The md5 hash value of this text will bestored in the MVC file.\n* source = The source to compile into a template file.\n* sourceitems = array of valid item names.The compiler will return an error if an mvt:item tag has a \"name\" attribute that is not in this list.\n* target = The name of the file (relative to the script directory) to put the .mvc file.\n* errors = If the function returns 0, this will contain error text.",
		"insertText": "miva_template_compile( ${1:signat}, ${2:source var}, ${3:sourceitems var}, ${4:target}, ${5:errors var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_template_compile"
	},
	{
		"documentation": "[miva\\_template\\_compile\\_dump](https://www.mivascript.com/item/mivascript-functions/miva%5Ftemplate%5Fcompile%5Fdump.html)  \n\nmiva_template_compile_dump( source var, errors var )",
		"insertText": "miva_template_compile_dump( ${1:source var}, ${2:errors var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_template_compile_dump"
	},
	{
		"documentation": "[miva\\_template\\_compile\\_itemlist](https://www.mivascript.com/item/mivascript-functions/miva%5Ftemplate%5Fcompile%5Fitemlist.html)  \n\nmiva_template_compile_itemlist( signat, source var, sourceitems var, target, errors var )",
		"insertText": "miva_template_compile_itemlist( ${1:signat}, ${2:source var}, ${3:sourceitems var}, ${4:target}, ${5:errors var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_template_compile_itemlist"
	},
	{
		"documentation": "[miva\\_variable\\_type](https://www.mivascript.com/item/mivascript-functions/miva%5Fvariable%5Ftype.html)  \n\nmiva_variable_type( variable )\n\nReturn a string representation of the variable type e.g. \"INTEGER\", \"DOUBLE\", \"ARRAY\", etc...\n\nReturns the variable type\n\n* variable = a variable name",
		"insertText": "miva_variable_type( ${1:variable} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_variable_type"
	},
	{
		"documentation": "[miva\\_variable\\_value](https://www.mivascript.com/item/mivascript-functions/miva%5Fvariable%5Fvalue.html)  \n\nmiva_variable_value( string )\n\nReturns the value of a variable where expression is the literal name of the variable.",
		"insertText": "miva_variable_value( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_variable_value"
	},
	{
		"documentation": "[miva\\_writelog](https://www.mivascript.com/item/mivascript-functions/miva%5Fwritelog.html)  \n\nmiva_writelog( priority, message )\n\nWrites a message to the log with the specified priority. Will return failure unless the miva log is open.\n\nReturns 1 on success, 0 on error\n\n* priority = a string containing a list of words. These words may be either a facility code (see miva\\_openlog) or a priority code (see miva\\_setlogmask). Commas and/or spaces separate the words. The facility may be omitted in which case the default will be assumed (see miva\\_openlog). If the priority is omitted or has been disabled via a call to miva\\_setlogmask, then the miva\\_writelog call will be ignored.\n* message = a string that will be written to the log.",
		"insertText": "miva_writelog( ${1:priority}, ${2:message} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_writelog"
	},
	{
		"documentation": "[mktime\\_t](https://www.mivascript.com/item/mivascript-functions/mktime%5Ft.html)  \n\nmktime_t( year, month, dayofmonth, hours, minutes, seconds, timezone )\n\nReturns the s.time\\_t value for the time specified. time\\_zone can be the keyword 'local'",
		"insertText": "mktime_t( ${1:year}, ${2:month}, ${3:dayofmonth}, ${4:hours}, ${5:minutes}, ${6:seconds}, ${7:timezone} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "mktime_t"
	},
	{
		"documentation": "[padl](https://www.mivascript.com/item/mivascript-functions/padl.html)  \n\npadl( string, length, character )\n\nReturns a string length characters long, consisting of string padded on the left with as many instances of padcharacter as are needed to make up the full length.",
		"insertText": "padl( ${1:string}, ${2:length}, ${3:character} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "padl"
	},
	{
		"documentation": "[padr](https://www.mivascript.com/item/mivascript-functions/padr.html)  \n\npadr( string, length, character )\n\nReturns a string length characters long, consisting of string padded on the right with as many instances of padcharacter as are needed to make up the full length.",
		"insertText": "padr( ${1:string}, ${2:length}, ${3:character} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "padr"
	},
	{
		"documentation": "[pkcs7\\_free](https://www.mivascript.com/item/mivascript-functions/pkcs7%5Ffree.html)  \n\npkcs7_free( pkcs7 var )\n\nRemove a pkcs7 structure from internal memory. The passed pkcs7 structure reference is unchanged on failure (invalid reference) or set to 0 on success.\n\nReturns 1 on success, 0 on failure\n\n* pkcs7 = PKCS7 structure reference",
		"insertText": "pkcs7_free( ${1:pkcs7 var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "pkcs7_free"
	},
	{
		"documentation": "[pkcs7\\_get\\_certs](https://www.mivascript.com/item/mivascript-functions/pkcs7%5Fget%5Fcerts.html)  \n\npkcs7_get_certs( pkcs7 var, x509s var )\n\nGiven a structure reference such as returned from pkcs7\\_load\\_mem, return certificate references for the x509 certificates that are embedded therein.\n\nReturns Count of array elements returned, -1 on failure\n\n* pkcs7 = Structure reference\n* x509s = Array of x509 certificate references",
		"insertText": "pkcs7_get_certs( ${1:pkcs7 var}, ${2:x509s var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "pkcs7_get_certs"
	},
	{
		"documentation": "[pkcs7\\_load\\_mem](https://www.mivascript.com/item/mivascript-functions/pkcs7%5Fload%5Fmem.html)  \n\npkcs7_load_mem( cert, format, pkcs7 var )\n\nLoad a list of PKCS7 structures in the specified format into memory, and return a structure reference that refers to the structure(s) in internal storage.\n\nReturns 1 on success, 0 on failure\n\n* cert = Text of a list of pkcs7 structures\n* format = Format of the structure(s) passed in. Valid values are \"der\", \"pem\", or \"pkcs12\", with \"der\" used if the format is missing or any other values are passed\n* pkcs7 = Structure array reference. On success, this will be neither zero nor null",
		"insertText": "pkcs7_load_mem( ${1:cert}, ${2|'pem','der','pkcs12'|}, ${3:pkcs7 var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "pkcs7_load_mem"
	},
	{
		"documentation": "[pkcs7\\_verify](https://www.mivascript.com/item/mivascript-functions/pkcs7%5Fverify.html)  \n\npkcs7_verify( pkcs7 var, root_x509 var, content )\n\nGiven a pkcs7 structure reference and root x509 certificate reference, verify the pkcs7 structure and the signed content (if provided).\n\nReturns 1 on success, 0 on failure\n\n* pkcs7 = PKCS7 structure reference\n* root\\_x509 = Root x509 certificate reference\n* content = Optional content if not present in the PKCS structure",
		"insertText": "pkcs7_verify( ${1:pkcs7 var}, ${2:root_x509 var}, ${3:content} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "pkcs7_verify"
	},
	{
		"documentation": "[power](https://www.mivascript.com/item/mivascript-functions/power.html)  \n\npower( number, matissa )\n\nRaises number to a a power (for example, power(12,2)=144)",
		"insertText": "power( ${1:number}, ${2:matissa} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "power"
	},
	{
		"documentation": "[random](https://www.mivascript.com/item/mivascript-functions/random.html)  \n\nrandom( max )\n\nReturns a random number less than or equal to maximum",
		"insertText": "random( ${1:max} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "random"
	},
	{
		"documentation": "[rnd](https://www.mivascript.com/item/mivascript-functions/rnd.html)  \n\nrnd( value, precision )\n\nWorks like the ROUND operator, rounding number up or down to number\\_of\\_places after the decimal",
		"insertText": "rnd( ${1:value}, ${2:precision} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "rnd"
	},
	{
		"documentation": "[rsa\\_free](https://www.mivascript.com/item/mivascript-functions/rsa%5Ffree.html)  \n\nrsa_free( rsa var )\n\nFrees memory associated with a previously loaded RSA keypair.\n\nReturns 1 on success, 0 on error.\n\n* rsa = a handle returned by one of the rsa\\_load\\_xxx functions",
		"insertText": "rsa_free( ${1:rsa var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "rsa_free"
	},
	{
		"documentation": "[rsa\\_generate\\_keypair](https://www.mivascript.com/item/mivascript-functions/rsa%5Fgenerate%5Fkeypair.html)  \n\nrsa_generate_keypair( pubkey_file, privkey_file, bits, e, passphrase )\n\nGenerates an RSA keypair, saving the public key in pubkey\\_file, the private key in privkey\\_file, and encrypting the private key with passphrase.\n\nReturns 1 on success, 0 on error.\n\n* pubkey\\_file = The name of the file in which the generated public key is stored\n* privkey\\_file = The name of the file in which the generated private key is stored\n* bits = The RSA modulus size, in bits\n* e = The public key exponent. Must be an odd number, typically 3, 17 or 65537\n* passphrase = The passphrase used to encrypt the private key",
		"insertText": "rsa_generate_keypair( ${1:pubkey_file}, ${2:privkey_file}, ${3:bits}, ${4:e}, ${5:passphrase} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "rsa_generate_keypair"
	},
	{
		"documentation": "[rsa\\_generate\\_keypair\\_mem](https://www.mivascript.com/item/mivascript-functions/rsa%5Fgenerate%5Fkeypair%5Fmem.html)  \n\nrsa_generate_keypair_mem( pubkey var, privkey var, bits, e, passphrase )\n\nGenerates an RSA keypair, returning the public and private keys in variables, and encrypting the private key with passphrase.\n\nReturns 1 on success, 0 on error.\n\n* pubkey = The variable which receives the generated public key\n* privkey = The variable which receives the generated private key\n* bits = The RSA modulus size, in bits\n* e = The public key exponent. Must be an odd number, typically 3, 17 or 65537\n* passphrase = The passphrase used to encrypt the private key",
		"insertText": "rsa_generate_keypair_mem( ${1:pubkey var}, ${2:privkey var}, ${3:bits}, ${4:e}, ${5:passphrase} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "rsa_generate_keypair_mem"
	},
	{
		"documentation": "[rsa\\_generate\\_keypair\\_mem\\_cipher](https://www.mivascript.com/item/mivascript-functions/rsa%5Fgenerate%5Fkeypair%5Fmem%5Fcipher.html)  \n\nrsa_generate_keypair_mem_cipher( pubkey var, privkey var, bits, e, passphrase, ciphername )\n\nBehaves identical to the legacy counterpart rsa\\_generate\\_keypair\\_mem() except that it allows the caller to specify the cipher used to encrypt the private key (the legacy function always uses des-ede3-cbc).\n\nReturns 1 on success or 0 on error.\n\n* pubkey = The variable which receives the generated public key\n* privkey = The variable which receives the generated private key\n* bits = The RSA modulus size, in bits\n* e = The public key exponent. Must be an odd number, typically 3, 17 or 65537\n* passphrase = The passphrase used to encrypt the private key\n* ciphername = an OpenSSL cipher identifier, such as \"aes-128-cbc\"",
		"insertText": "rsa_generate_keypair_mem_cipher( ${1:pubkey var}, ${2:privkey var}, ${3:bits}, ${4:e}, ${5:passphrase}, ${6:ciphername} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "rsa_generate_keypair_mem_cipher"
	},
	{
		"documentation": "[rsa\\_load\\_privatekey](https://www.mivascript.com/item/mivascript-functions/rsa%5Fload%5Fprivatekey.html)  \n\nrsa_load_privatekey( privkey_file, rsa var, passphrase )\n\nLoad an encrypted RSA private key from a PKCS#8 file specified by privkey\\_file, and decrypt it using passphrase.\n\nReturns 1 on success, 0 on error.\n\n* privkey\\_file = The name of the file containing the encrypted private key\n* rsa = A variable which receives an internal reference to the loaded RSA key\n* passphrase = The passphrase used to decrypt the private key",
		"insertText": "rsa_load_privatekey( ${1:privkey_file}, ${2:rsa var}, ${3:passphrase} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "rsa_load_privatekey"
	},
	{
		"documentation": "[rsa\\_load\\_privatekey\\_engine](https://www.mivascript.com/item/mivascript-functions/rsa%5Fload%5Fprivatekey%5Fengine.html)  \n\nrsa_load_privatekey_engine( engine, key_id, rsa var )\n\nLoad an encryption key based on a key id.\n\nReturn value: 1 on success, 0 on failure.\n\n* engine = Name of the encryption engine to use.\n* key\\_id = identifier of the key to load\n* rsa = RSA private key associated with the engine and key ID.",
		"insertText": "rsa_load_privatekey_engine( ${1:engine}, ${2:key_id}, ${3:rsa var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "rsa_load_privatekey_engine"
	},
	{
		"documentation": "[rsa\\_load\\_privatekey\\_mem](https://www.mivascript.com/item/mivascript-functions/rsa%5Fload%5Fprivatekey%5Fmem.html)  \n\nrsa_load_privatekey_mem( privkey, rsa var, passphrase )\n\nLoads an encrypted RSA private key from a memory buffer containing PKCS#8 data\n\nReturns 1 on success, 0 on error.\n\n* privkey = The encrypted private key information in PKCS#8 format\n* rsa = A variable which receives an internal reference to the loaded RSA key\n* passphrase = The passphrase used to decrypt the private key",
		"insertText": "rsa_load_privatekey_mem( ${1:privkey}, ${2:rsa var}, ${3:passphrase} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "rsa_load_privatekey_mem"
	},
	{
		"documentation": "[rsa\\_load\\_publickey](https://www.mivascript.com/item/mivascript-functions/rsa%5Fload%5Fpublickey.html)  \n\nrsa_load_publickey( pubkey_file, rsa var )\n\nLoad an RSA public key from a PKCS#1 file specified by \"pubkey\\_file\".\n\nReturns 1 on success, 0 on error.\n\n* pubkey\\_file = The name of the file containing the public key\n* rsa = A variable which receives an internal reference to the loaded RSA key",
		"insertText": "rsa_load_publickey( ${1:pubkey_file}, ${2:rsa var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "rsa_load_publickey"
	},
	{
		"documentation": "[rsa\\_load\\_publickey\\_engine](https://www.mivascript.com/item/mivascript-functions/rsa%5Fload%5Fpublickey%5Fengine.html)  \n\nrsa_load_publickey_engine( engine, key_id, rsa var )\n\nLoad an encryption key based on a key id.\n\nReturn value: 1 on success, 0 on failure.\n\n* engine = Name of the encryption engine to use.\n* key\\_id = identifier of the key to load\n* rsa = RSA public key associated with the engine and key ID.",
		"insertText": "rsa_load_publickey_engine( ${1:engine}, ${2:key_id}, ${3:rsa var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "rsa_load_publickey_engine"
	},
	{
		"documentation": "[rsa\\_load\\_publickey\\_mem](https://www.mivascript.com/item/mivascript-functions/rsa%5Fload%5Fpublickey%5Fmem.html)  \n\nrsa_load_publickey_mem( pubkey, rsa var )\n\nLoads an RSA public key from a memory buffer containing PKCS#1 data\n\nReturns 1 on success, 0 on error.\n\n* pubkey = The public key in PKCS#1 format\n* rsa = A variable which receives an internal reference to the loaded RSA key",
		"insertText": "rsa_load_publickey_mem( ${1:pubkey}, ${2:rsa var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "rsa_load_publickey_mem"
	},
	{
		"documentation": "[rsa\\_private\\_decrypt](https://www.mivascript.com/item/mivascript-functions/rsa%5Fprivate%5Fdecrypt.html)  \n\nrsa_private_decrypt( rsa, encrypted, plaintext var )\n\nDecrypts data previously encrypted using the public key portion of an RSA keypair.\n\nReturns 1 on success, 0 on error.\n\n* rsa = The internal reference to the RSA private key used for decryption\n* encrypted = The encrypted ciphertext, in raw binary format\n* plaintext = A variable which receives the decrypted plaintext",
		"insertText": "rsa_private_decrypt( ${1:rsa}, ${2:encrypted}, ${3:plaintext var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "rsa_private_decrypt"
	},
	{
		"documentation": "[rsa\\_private\\_encrypt](https://www.mivascript.com/item/mivascript-functions/rsa%5Fprivate%5Fencrypt.html)  \n\nrsa_private_encrypt( rsa, plaintext, encrypted var )\n\nEncrypts data using the private key portion of an RSA keypair.\n\nReturns 1 on success, 0 on error.\n\n* rsa = The internal reference to the RSA private key used for encryption\n* plaintext = The data to be encrypted\n* encrypted = A variable which receives the encrypted ciphertext in raw binary format",
		"insertText": "rsa_private_encrypt( ${1:rsa}, ${2:plaintext}, ${3:encrypted var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "rsa_private_encrypt"
	},
	{
		"documentation": "[rsa\\_public\\_decrypt](https://www.mivascript.com/item/mivascript-functions/rsa%5Fpublic%5Fdecrypt.html)  \n\nrsa_public_decrypt( rsa, encrypted, plaintext var )\n\nDecrypts data previously encrypted using the private key portion of an RSA keypair.\n\nReturns 1 on success, 0 on error.\n\n* rsa = The internal reference to the RSA public key used for decryption\n* encrypted = The encrypted ciphertext, in raw binary format\n* plaintext = A variable which receives the decrypted plaintext",
		"insertText": "rsa_public_decrypt( ${1:rsa}, ${2:encrypted}, ${3:plaintext var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "rsa_public_decrypt"
	},
	{
		"documentation": "[rsa\\_public\\_encrypt](https://www.mivascript.com/item/mivascript-functions/rsa%5Fpublic%5Fencrypt.html)  \n\nrsa_public_encrypt( rsa, plaintext, encrypted var )\n\nEncrypts data using the public key portion of an RSA keypair.\n\nReturns 1 on success, 0 on error.\n\n* rsa = The internal reference to the RSA public key used for encryption\n* plaintext = The data to be encrypted\n* encrypted = A variable which receives the encrypted ciphertext in raw binary format",
		"insertText": "rsa_public_encrypt( ${1:rsa}, ${2:plaintext}, ${3:encrypted var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "rsa_public_encrypt"
	},
	{
		"documentation": "[rsa\\_save\\_privatekey](https://www.mivascript.com/item/mivascript-functions/rsa%5Fsave%5Fprivatekey.html)  \n\nrsa_save_privatekey( privkey_file, rsa var, passphrase )\n\nEncrypts and writes a previously loaded RSA private key to a file in PKCS#8 format\n\nReturns 1 on success, 0 on error.\n\n* privkey\\_file = The name of the file in which the private key is to be stored\n* rsa = The internal reference to the RSA private key to be saved\n* passphrase = The passphrase used to encrypt the private key",
		"insertText": "rsa_save_privatekey( ${1:privkey_file}, ${2:rsa var}, ${3:passphrase} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "rsa_save_privatekey"
	},
	{
		"documentation": "[rsa\\_save\\_privatekey\\_mem](https://www.mivascript.com/item/mivascript-functions/rsa%5Fsave%5Fprivatekey%5Fmem.html)  \n\nrsa_save_privatekey_mem( privkey var, rsa var, passphrase )\n\nEncrypts a previously loaded RSA private key and stores it into a variable in PKCS#8 format\n\nReturns 1 on success, 0 on error.\n\n* privkey = The variable which will receive the encrypted private key\n* rsa = The internal reference to the RSA private key to be saved\n* passphrase = The passphrase used to encrypt the private key",
		"insertText": "rsa_save_privatekey_mem( ${1:privkey var}, ${2:rsa var}, ${3:passphrase} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "rsa_save_privatekey_mem"
	},
	{
		"documentation": "[rsa\\_save\\_privatekey\\_mem\\_cipher](https://www.mivascript.com/item/mivascript-functions/rsa%5Fsave%5Fprivatekey%5Fmem%5Fcipher.html)  \n\nrsa_save_privatekey_mem_cipher( privkey var, rsa var, passphrase, ciphername )\n\nBehaves identical to the legacy counterpart rsa\\_save\\_privatekey\\_mem() except that it allows the caller to specify the cipher used to encrypt the private key (the legacy function always uses des-ede3-cbc).\n\n* ciphername = an OpenSSL cipher identifier that specifies the cipher to be used. Note that OpenSSL only permits a subset of its supported ciphers to be used for RSA key encryption. For example, only CBC mode ciphers are permitted.",
		"insertText": "rsa_save_privatekey_mem_cipher( ${1:privkey var}, ${2:rsa var}, ${3:passphrase}, ${4:ciphername} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "rsa_save_privatekey_mem_cipher"
	},
	{
		"documentation": "[rsa\\_sign](https://www.mivascript.com/item/mivascript-functions/rsa%5Fsign.html)  \n\nrsa_sign( rsa, buffer, signature var )\n\nGenerates a digital signature using SHA1 and an RSA private key\n\nReturns 1 on success, 0 on failure. Requires OpenSSL 0.9.7 or greater.\n\n* rsa = The internal reference to the RSA private key to be used\n* buffer = The data to be signed\n* signature = A variable which receives the signature in raw binary format",
		"insertText": "rsa_sign( ${1:rsa}, ${2:buffer}, ${3:signature var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "rsa_sign"
	},
	{
		"documentation": "[rsa\\_verify](https://www.mivascript.com/item/mivascript-functions/rsa%5Fverify.html)  \n\nrsa_verify( rsa, buffer, signature )\n\nVerifies a digital signature previously generated by rsa\\_sign\n\nReturns 1 on success, 0 on verification failure or error. Requires OpenSSL 0.9.7 or greater.\n\n* rsa = The internal reference to the RSA public key used for verification\n* buffer = The data for which the signature is to be verified\n* signature = The signature to verify, in raw binary format",
		"insertText": "rsa_verify( ${1:rsa}, ${2:buffer}, ${3:signature} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "rsa_verify"
	},
	{
		"documentation": "[rtrim](https://www.mivascript.com/item/mivascript-functions/rtrim.html)  \n\nrtrim( string )\n\nReturns a copy of string with all space characters removed from the right end. ⇨ Version 5.32\\. Will now trim whitespace from arrays and structures. Previously the functions would convert arrays and structures to serialized data and then trim it. Arrays and structures are now iterated and all values within are trimmed appropriately.",
		"insertText": "rtrim( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "rtrim"
	},
	{
		"documentation": "[schmod](https://www.mivascript.com/item/mivascript-functions/schmod.html)  \n\nschmod( path, mode )\n\nChanges a files or directory permissions.\n\nReturns 1 if sucessful, 0 if fails\n\n* path = fully qualified path to the file\n* mode\\_number = ( nnnn decimal number) or '0nnnn' (octal string)",
		"insertText": "schmod( ${1:path}, ${2:mode} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "schmod"
	},
	{
		"documentation": "[scopy](https://www.mivascript.com/item/mivascript-functions/scopy.html)  \n\nscopy( source, destination )\n\nCopies a file in the scripts directory.\n\nReturns 1 if sucessful, 0 if fails\n\n* source = source file fully qualified path\n* destination = destination file fully qualified path",
		"insertText": "scopy( ${1:source}, ${2:destination} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "scopy"
	},
	{
		"documentation": "[sdelete](https://www.mivascript.com/item/mivascript-functions/sdelete.html)  \n\nsdelete( path )\n\nDeletes a file in the scripts directory. See See fdelete()\n\nReturns 1 if sucessful, 0 if fails\n\n* path = fully qualified path of the file to delete",
		"insertText": "sdelete( ${1:path} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "sdelete"
	},
	{
		"documentation": "[sexists](https://www.mivascript.com/item/mivascript-functions/sexists.html)  \n\nsexists( path )\n\nTests if the file named in path exists in the scripts directory.\n\nReturns 1 if the file exsists else 0.\n\n* path = the fully qualified path to the file.",
		"insertText": "sexists( ${1:path} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "sexists"
	},
	{
		"documentation": "[sfcopy](https://www.mivascript.com/item/mivascript-functions/sfcopy.html)  \n\nsfcopy( source, destination )\n\nCopies a file from the scripts directory to the data directory.\n\nReturns 1 if sucessful, 0 if fails\n\n* scripts\\_source = source file fully qualified path in the scripts folder\n* data\\_destination = destination file fully qualified path in the data folder",
		"insertText": "sfcopy( ${1:source}, ${2:destination} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "sfcopy"
	},
	{
		"documentation": "[sfrename](https://www.mivascript.com/item/mivascript-functions/sfrename.html)  \n\nsfrename( source, destination )\n\nRename source file to destination file. Can rename or move a file in the scripts directory.\n\nReturns 1 if sucessful, 0 if fails\n\n* source = source file fully qualified path\n* destination = destination file fully qualified path",
		"insertText": "sfrename( ${1:source}, ${2:destination} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "sfrename"
	},
	{
		"documentation": "[sfsymlink](https://www.mivascript.com/item/mivascript-functions/sfsymlink.html)  \n\nsfsymlink( source, destination )\n\nThis function creates a symbolic from a file in the scripts directory to the data directory (Available on UNIX file systems only)\n\nReturns 1 if sucessful, 0 if fails\n\n* source - source file fully qualified path in the scripts directory\n* destination = destination file fully qualified path in the data directory",
		"insertText": "sfsymlink( ${1:source}, ${2:destination} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "sfsymlink"
	},
	{
		"documentation": "[sin](https://www.mivascript.com/item/mivascript-functions/sin.html)  \n\nsin( number )\n\nReturns the sine of number. The argument should be expressed in radians.",
		"insertText": "sin( ${1:number} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "sin"
	},
	{
		"documentation": "[sinh](https://www.mivascript.com/item/mivascript-functions/sinh.html)  \n\nsinh( number )\n\nReturns the hyperbolic sine of number. The argument should be expressed in radians.",
		"insertText": "sinh( ${1:number} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "sinh"
	},
	{
		"documentation": "[sisdir](https://www.mivascript.com/item/mivascript-functions/sisdir.html)  \n\nsisdir( path )\n\nTests if the file named in path is a directory.\n\nReturns 1 if the path is a directory else 0.\n\n* path = the fully qualified path to the directory",
		"insertText": "sisdir( ${1:path} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "sisdir"
	},
	{
		"documentation": "[slugify](https://www.mivascript.com/item/mivascript-functions/slugify.html)  \n\nslugify( data )\n\nUse this function to create friendly (human-readable) URLs. It takes characters that are forbidden in URIs and either converts them to a valid ASCII character or remove them completely. It adds a hyphen (-) in place of all space characters. For example, the product \"Dodger Blue Baseball Hat!\" becomes \"Dodger-Blue-Baseball-Hat\" which is now URI friendly.\n\nA URL friendly string.",
		"insertText": "slugify( ${1:data} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "slugify"
	},
	{
		"documentation": "[smkdir](https://www.mivascript.com/item/mivascript-functions/smkdir.html)  \n\nsmkdir( path )\n\nCreates a directory specified by path in the scripts directory.\n\nReturns 1 if sucessful, 0 if fails\n\n* path = the fully qualified path to the directory",
		"insertText": "smkdir( ${1:path} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "smkdir"
	},
	{
		"documentation": "[smode](https://www.mivascript.com/item/mivascript-functions/smode.html)  \n\nsmode( path )\n\nReturns the permissions mode of path in the scripts directory.\n\nReturns the permissions mode or -1 if the file does not exist\n\n* path = the fully qualified path to the file or directory",
		"insertText": "smode( ${1:path} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "smode"
	},
	{
		"documentation": "[sqrt](https://www.mivascript.com/item/mivascript-functions/sqrt.html)  \n\nsqrt( number )\n\nReturns the square root of number.",
		"insertText": "sqrt( ${1:number} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "sqrt"
	},
	{
		"documentation": "[srandom](https://www.mivascript.com/item/mivascript-functions/srandom.html)  \n\nsrandom( seed )\n\nAllows a script to reseed the random number generator used by random()",
		"insertText": "srandom( ${1:seed} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "srandom"
	},
	{
		"documentation": "[srename](https://www.mivascript.com/item/mivascript-functions/srename.html)  \n\nsrename( source, destination )\n\nRename source file to destination file. Can rename or move a file in the scripts directory.\n\nReturns 1 if sucessful, 0 if fails\n\n* source = source file fully qualified path\n* destination = destination file fully qualified path",
		"insertText": "srename( ${1:source}, ${2:destination} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "srename"
	},
	{
		"documentation": "[ssize](https://www.mivascript.com/item/mivascript-functions/ssize.html)  \n\nssize( path )\n\nGet the size of a file in the scripts directory\n\nReturns the file size in bytes or -1 if the file does not exist.\n\n* path = the fully qualified path to the file",
		"insertText": "ssize( ${1:path} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "ssize"
	},
	{
		"documentation": "[ssymlink](https://www.mivascript.com/item/mivascript-functions/ssymlink.html)  \n\nssymlink( source, destination )\n\n(Unix only) Creates a symbolic link to the file in the scripts directory.\n\nReturns 1 if sucessful, 0 if fails\n\n* source = source file fully qualified path\n* destination = destination file fully qualified path",
		"insertText": "ssymlink( ${1:source}, ${2:destination} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "ssymlink"
	},
	{
		"documentation": "[stime](https://www.mivascript.com/item/mivascript-functions/stime.html)  \n\nstime( path )\n\nGets the last modified time for the file in scripts directory.\n\nReturns time\\_t since a file in the was last modified or -1 if the file does not exist.\n\n* path = the fully qualified path to the file",
		"insertText": "stime( ${1:path} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "stime"
	},
	{
		"documentation": "[substring](https://www.mivascript.com/item/mivascript-functions/substring.html)  \n\nsubstring( string, position, length )\n\nReturns the substring of string, beginning at position start, length characters long.",
		"insertText": "substring( ${1:string}, ${2:position}, ${3:length} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "substring"
	},
	{
		"documentation": "[substring\\_var](https://www.mivascript.com/item/mivascript-functions/substring%5Fvar.html)  \n\nsubstring_var( string var, position, length )\n\nReturns the substring of string, beginning at position start, length characters long. This function is identical to substring() but its first parameter is passed by reference, improving performance when dealing with large strings.",
		"insertText": "substring_var( ${1:string var}, ${2:position}, ${3:length} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "substring_var"
	},
	{
		"documentation": "[tan](https://www.mivascript.com/item/mivascript-functions/tan.html)  \n\ntan( number )\n\nReturns the tangent of number. The argument should be expressed in radians.",
		"insertText": "tan( ${1:number} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "tan"
	},
	{
		"documentation": "[tanh](https://www.mivascript.com/item/mivascript-functions/tanh.html)  \n\ntanh( number )\n\nReturns the hyperbolic tangent of number. The argument should be expressed in radians.",
		"insertText": "tanh( ${1:number} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "tanh"
	},
	{
		"documentation": "[tar\\_create](https://www.mivascript.com/item/mivascript-functions/tar%5Fcreate.html)  \n\ntar_create( file, file_loc, dir, dir_loc, flags )\n\nCreates a compressed Unix style tar file.\n\nReturn 1 on success 0 on failure\n\n* file = target output file\n* location = location of the output file - 'data' or 'script'\n* dir = source directory to create a tarball of\n* dir\\_loc = location of the source file - 'data' or 'script' defaulting to data\n* flags = may be an empty string or 'compress' which will cause the output .tar file to be bzip2 encoded.",
		"insertText": "tar_create( ${1:file}, ${2|'data','script'|}, ${3:dir}, ${4|'data','script'|}, ${5|'','compress'|} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "tar_create"
	},
	{
		"documentation": "[tar\\_directory](https://www.mivascript.com/item/mivascript-functions/tar%5Fdirectory.html)  \n\ntar_directory( file, location, desc var )\n\nReturn information about a tar file.\n\nNumber of files in output array, 0 on error\n\n* filepath = File name and path within the location\n* location = Either \"script\" or \"data\". Anything else defaults to \"data\".\n* desc (out) = An array of structures, one array element for each item in the tar file, with the following members assigned:\n* NAME: Text",
		"insertText": "tar_directory( ${1:file}, ${2|'data','script'|}, ${3:desc var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "tar_directory"
	},
	{
		"documentation": "[tar\\_extract](https://www.mivascript.com/item/mivascript-functions/tar%5Fextract.html)  \n\ntar_extract( file, file_loc, dir, dir_loc )\n\nUnpacks a tar file to a specified directory.\n\nReturns 1 on success 0 on failure\n\n* file = the path and file name\n* tar\\_location = source 'data' or 'script'\n* dir = destination directory to extract the tar file to\n* dir\\_location = destination 'data' or 'script'",
		"insertText": "tar_extract( ${1:file}, ${2|'data','script'|}, ${3:dir}, ${4|'data','script'|} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "tar_extract"
	},
	{
		"documentation": "[timezone](https://www.mivascript.com/item/mivascript-functions/timezone.html)  \n\ntimezone()\n\nReturns an integer which is the number of hours behind or ahead of GMT (not accounting for Daylight Time)",
		"insertText": "timezone()$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "timezone"
	},
	{
		"documentation": "[time\\_t\\_dayofmonth](https://www.mivascript.com/item/mivascript-functions/time%5Ft%5Fdayofmonth.html)  \n\ntime_t_dayofmonth( time_t, time_zone )\n\nReturns the current day of the month as a number. The time\\_zone parameter can be the keyword 'local' which uses the server timezone.  ",
		"insertText": "time_t_dayofmonth( ${1:time_t}, ${2:time_zone} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "time_t_dayofmonth"
	},
	{
		"documentation": "[time\\_t\\_dayofweek](https://www.mivascript.com/item/mivascript-functions/time%5Ft%5Fdayofweek.html)  \n\ntime_t_dayofweek( time_t, time_zone )\n\nReturns the current day of the week as a number (Sunday=1). time\\_zone can be the keyword 'local'",
		"insertText": "time_t_dayofweek( ${1:time_t}, ${2:time_zone} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "time_t_dayofweek"
	},
	{
		"documentation": "[time\\_t\\_dayofyear](https://www.mivascript.com/item/mivascript-functions/time%5Ft%5Fdayofyear.html)  \n\ntime_t_dayofyear( time_t, time_zone )\n\nReturns the number of days since the beginning of the year, including today. time\\_zone can be the keyword 'local'",
		"insertText": "time_t_dayofyear( ${1:time_t}, ${2:time_zone} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "time_t_dayofyear"
	},
	{
		"documentation": "[time\\_t\\_hour](https://www.mivascript.com/item/mivascript-functions/time%5Ft%5Fhour.html)  \n\ntime_t_hour( time_t, time_zone )\n\nReturns current hour (using a 24-hour clock). time\\_zone can be the keyword 'local'",
		"insertText": "time_t_hour( ${1:time_t}, ${2:time_zone} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "time_t_hour"
	},
	{
		"documentation": "[time\\_t\\_min](https://www.mivascript.com/item/mivascript-functions/time%5Ft%5Fmin.html)  \n\ntime_t_min( time_t, time_zone )\n\nReturns the current minute in the hour. time\\_zone can be the keyword 'local'",
		"insertText": "time_t_min( ${1:time_t}, ${2:time_zone} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "time_t_min"
	},
	{
		"documentation": "[time\\_t\\_month](https://www.mivascript.com/item/mivascript-functions/time%5Ft%5Fmonth.html)  \n\ntime_t_month( time_t, time_zone )\n\nReturns the current month as a number. time\\_zone can be the keyword 'local'",
		"insertText": "time_t_month( ${1:time_t}, ${2:time_zone} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "time_t_month"
	},
	{
		"documentation": "[time\\_t\\_sec](https://www.mivascript.com/item/mivascript-functions/time%5Ft%5Fsec.html)  \n\ntime_t_sec( time_t, time_zone )\n\nReturns the current second in the minute. time\\_zone can be the keyword 'local'",
		"insertText": "time_t_sec( ${1:time_t}, ${2:time_zone} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "time_t_sec"
	},
	{
		"documentation": "[time\\_t\\_year](https://www.mivascript.com/item/mivascript-functions/time%5Ft%5Fyear.html)  \n\ntime_t_year( time_t, time_zone )\n\nReturns the current year, time\\_zone can be the keyword 'local'",
		"insertText": "time_t_year( ${1:time_t}, ${2:time_zone} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "time_t_year"
	},
	{
		"documentation": "[tokenize](https://www.mivascript.com/item/mivascript-functions/tokenize.html)  \n\ntokenize( string, variables )\n\nReturns the string, concatenated with the value of each token contained in replacements. Replacements is an array of structures, each with a token and a value.",
		"insertText": "tokenize( ${1:string}, ${2:variables} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "tokenize"
	},
	{
		"documentation": "[tolower](https://www.mivascript.com/item/mivascript-functions/tolower.html)  \n\ntolower( string )\n\nReturns a copy of string in lower case.",
		"insertText": "tolower( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "tolower"
	},
	{
		"documentation": "[toupper](https://www.mivascript.com/item/mivascript-functions/toupper.html)  \n\ntoupper( string )\n\nReturns a copy of string in upper case.",
		"insertText": "toupper( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "toupper"
	},
	{
		"documentation": "[trim](https://www.mivascript.com/item/mivascript-functions/trim.html)  \n\ntrim( string )\n\nReturns the value of string with leading and trailing spaces removed. ⇨ Version 5.32\\. Will now trim whitespace from arrays and structures. Previously the functions would convert arrays and structures to serialized data and then trim it. Arrays and structures are now iterated and all values within are trimmed appropriately.",
		"insertText": "trim( ${1:string} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "trim"
	},
	{
		"documentation": "[wdownload](https://www.mivascript.com/item/mivascript-functions/wdownload.html)  \n\nwdownload( url, filepath, location, callback, callbackdata var )\n\nDownloads and stores a file from a URL. Acts as a front end to wget()\n\nReturns -1 if fails, returns the server response code: Possible examples 200 = success, 301 = moved, 404 = not found.\n\n* url = file to retrieve\n* filepath = where destination file should be stored\n* location = destination 'data' or 'script'.callback\\_fn = the name of a callback function in current Miva Script file\n* callback\\_fn( size, total, data var ): a user defined user function that returns 1 to continue, 0 to abort.\n* callbackdata var = opaque data that is passed as the data parameter to each call of callback\\_fn",
		"insertText": "wdownload( ${1:url}, ${2:filepath}, ${3|'data','script'|}, ${4:callback}, ${5:callbackdata var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "wdownload"
	},
	{
		"documentation": "[wget](https://www.mivascript.com/item/mivascript-functions/wget.html)  \n\nwget( url, filepath, location )\n\nDownloads and stores a file from a URL. Note: If an error occurs, the error message will be stored instead.\n\nReturns -1 if fails, returns the server response code: Possible examples 200 = success, 301 = moved, 404 = not found.\n\n* url = file to retrieve\n* filepath = where destination file should be stored\n* location = destination 'data' or 'script'.",
		"insertText": "wget( ${1:url}, ${2:filepath}, ${3|'data','script'|} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "wget"
	},
	{
		"documentation": "[x509\\_create](https://www.mivascript.com/item/mivascript-functions/x509%5Fcreate.html)  \n\nx509_create( cert, x509 var )\n\nCreate an X509 Certificate from the PEM format data in \"cert\" where cert = PEM format certificate, x509 =Index into an internal array of certificates.\n\nReturns 1 on sucess, 0 on error.",
		"insertText": "x509_create( ${1:cert}, ${2:x509 var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "x509_create"
	},
	{
		"documentation": "[x509\\_digest](https://www.mivascript.com/item/mivascript-functions/x509%5Fdigest.html)  \n\nx509_digest( x509 var, digestname, digest var )\n\nReturn the digest of the given certificate referred to by the certificate reference, using the specified hash algorithm.\n\nReturns 1 on success, 0 on failure\n\n* x509 = Certificate reference returned from functions such as x509\\_load\\_mem\n* digestname = Hash algorithm name, such as \"md5\" or \"sha256\". Supported digest algorithms will vary between OpenSSL installations\n* digest = Hash value of the certificate",
		"insertText": "x509_digest( ${1:x509 var}, ${2|'sha256','md5',digestname|}, ${3:digest var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "x509_digest"
	},
	{
		"documentation": "[x509\\_free](https://www.mivascript.com/item/mivascript-functions/x509%5Ffree.html)  \n\nx509_free( rsa var )\n\nDeletes an x509 from the internal array of x509 certificates where x509 = Index into internal array of x509 certificates.\n\nReturns 1 on success, 0 on error.",
		"insertText": "x509_free( ${1:rsa var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "x509_free"
	},
	{
		"documentation": "[x509\\_get\\_extensions](https://www.mivascript.com/item/mivascript-functions/x509%5Fget%5Fextensions.html)  \n\nx509_get_extensions( certref var, extensions var )\n\nReturn X509 extension information for the certificate referred to by the certificate reference.\n\nReturns 1 on success, 0 on failure\n\n* certref = Certificate reference returned from functions such as x509\\_load\\_mem\n* extensions = Structure with members named for the entry names (e.g., \"data\", \"oid\", etc.)",
		"insertText": "x509_get_extensions( ${1:certref var}, ${2:extensions var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "x509_get_extensions"
	},
	{
		"documentation": "[x509\\_get\\_issuer\\_name](https://www.mivascript.com/item/mivascript-functions/x509%5Fget%5Fissuer%5Fname.html)  \n\nx509_get_issuer_name( certref var, issuername var )\n\nReturn X509 issuer information for the certificate referred to by the certificate reference.\n\nReturns 1 on success, 0 on failure\n\n* certref = Certificate reference returned from functions such as x509\\_load\\_mem\n* issuername = Structure with members named for the entry names (e.g., \"commonName\", \"countryName\", etc.)",
		"insertText": "x509_get_issuer_name( ${1:certref var}, ${2:issuername var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "x509_get_issuer_name"
	},
	{
		"documentation": "[x509\\_get\\_subject\\_name](https://www.mivascript.com/item/mivascript-functions/x509%5Fget%5Fsubject%5Fname.html)  \n\nx509_get_subject_name( certref var, subjectname var )\n\nReturn X509 name information for the certificate referred to by the certificate reference.\n\nReturns 1 on success, 0 on failure\n\n* certref = Certificate reference returned from functions such as x509\\_load\\_mem\n* subjectname = Structure with members named for the entry names (e.g., \"commonName\", \"countryName\", etc.)",
		"insertText": "x509_get_subject_name( ${1:certref var}, ${2:subjectname var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "x509_get_subject_name"
	},
	{
		"documentation": "[x509\\_load](https://www.mivascript.com/item/mivascript-functions/x509%5Fload.html)  \n\nx509_load( cert, x509 var )\n\nLoad an X509 Certificate from the file specified by \"cert\" where cert = File containing an x509 certificate, x509 = Index into an internal array of certificates.\n\nReturns 1 on sucess, 0 on error.",
		"insertText": "x509_load( ${1:cert}, ${2:x509 var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "x509_load"
	},
	{
		"documentation": "[x509\\_load\\_mem](https://www.mivascript.com/item/mivascript-functions/x509%5Fload%5Fmem.html)  \n\nx509_load_mem( cert, x509 var )\n\nLoads and parses the text of an x509 certificate, and gives a certificate reference that refers to the certificate in internal storage.\n\nReturns 1 on success, 0 on failure\n\n* cert = Text of the certificate\n* x509 = Certificate reference. On success, this will be neither zero nor null",
		"insertText": "x509_load_mem( ${1:cert}, ${2:x509 var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "x509_load_mem"
	},
	{
		"documentation": "[x509\\_pubkey\\_digest](https://www.mivascript.com/item/mivascript-functions/x509%5Fpubkey%5Fdigest.html)  \n\nx509_pubkey_digest( x509 var, digestname, digest var )\n\nReturn the digest of the public key portion of the given certificate referred to by the certificate reference, using the specified hash algorithm.\n\nReturns 1 on success, 0 on failure\n\n* x509 = Certificate reference returned from functions such as x509\\_load\\_mem\n* digestname = Hash algorithm name, such as \"md5\" or \"sha256\". Supported digest algorithms will vary between OpenSSL installations\n* digest = Hash value of the public key of the certificate",
		"insertText": "x509_pubkey_digest( ${1:x509 var}, ${2|'sha256','md5',digestname|}, ${3:digest var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "x509_pubkey_digest"
	},
	{
		"documentation": "[x509\\_rsa\\_publickey](https://www.mivascript.com/item/mivascript-functions/x509%5Frsa%5Fpublickey.html)  \n\nx509_rsa_publickey( x509 var, rsa var )\n\nExtracts the RSA public key from the X509 specified by \"x509\" and stores it in \"rsa\" where x509 = Index into internal array of x509 certificates, rsa =Index into internal array of RSA public keys.\n\nReturns 1 on success, 0 on error.",
		"insertText": "x509_rsa_publickey( ${1:x509 var}, ${2:rsa var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "x509_rsa_publickey"
	},
	{
		"documentation": "[x509\\_verify](https://www.mivascript.com/item/mivascript-functions/x509%5Fverify.html)  \n\nx509_verify( x509 var, trusted_certs )\n\nVerifies that the X509 certificate specified by \"x509\" was issued by one of the X509 certificates (in PEM format) in \"trusted\\_certs\", where x509 = Index into internal array of certificates, trusted\\_certs = Certificates (in PEM text format) to find the x50\n\nReturns 1 on successful find, 0 if certificate isn't in trusted\\_certs, or other error.",
		"insertText": "x509_verify( ${1:x509 var}, ${2:trusted_certs} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "x509_verify"
	},
	{
		"documentation": "[xml\\_parse](https://www.mivascript.com/item/mivascript-functions/xml%5Fparse.html)  \n\nxml_parse( filepath, location, output var )\n\nParces an XML file.\n\nReturns 1 on success, 0 on error\n\n* filepath = Location of the file to parse\n* location = either 'script' or 'data'\n* output = xml file parsed into an aggregate structure defined below:  \nThe variable has one structure member with the name of the root tag as the member name.",
		"insertText": "xml_parse( ${1:filepath}, ${2|'data','script'|}, ${3:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "xml_parse"
	},
	{
		"documentation": "[xml\\_parse\\_error](https://www.mivascript.com/item/mivascript-functions/xml%5Fparse%5Ferror.html)  \n\nxml_parse_error( lineno var, error var )\n\nRetrieves error information for xml\\_parse(), xml\\_parse\\_section(), and xml\\_parse\\_section\\_init()\n\nReturns null\n\n* lineno = line number of the XML file the error occurred (if applicable)\n* errortext = text of the error",
		"insertText": "xml_parse_error( ${1:lineno var}, ${2:error var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "xml_parse_error"
	},
	{
		"documentation": "[xml\\_parse\\_section](https://www.mivascript.com/item/mivascript-functions/xml%5Fparse%5Fsection.html)  \n\nxml_parse_section( output var, eof var )\n\nReturn a section of XML\n\nReturns 1 on success, 0 on failure.\n\n* output = Parsed XML output, same format as xml\\_parse()\n* eof = boolean \"end of file\".",
		"insertText": "xml_parse_section( ${1:output var}, ${2:eof var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "xml_parse_section"
	},
	{
		"documentation": "[xml\\_parse\\_section\\_getstate](https://www.mivascript.com/item/mivascript-functions/xml%5Fparse%5Fsection%5Fgetstate.html)  \n\nxml_parse_section_getstate( target var )\n\nRetrieves parse state information from a xml\\_parse\\_section session.\n\nReturns 1 on success, 0 on failure.\n\n* target = output aggregate",
		"insertText": "xml_parse_section_getstate( ${1:target var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "xml_parse_section_getstate"
	},
	{
		"documentation": "[xml\\_parse\\_section\\_init](https://www.mivascript.com/item/mivascript-functions/xml%5Fparse%5Fsection%5Finit.html)  \n\nxml_parse_section_init( filepath, location, level )\n\nInitializes a xml\\_parse\\_section session.\n\nReturns 1 on success, 0 on failure.\n\n* filepath = source file path (same as xml\\_parse)\n* location = 'script' or 'data'\n* level = level (not including the root) to return a \"section\" of parsed XML output.",
		"insertText": "xml_parse_section_init( ${1:filepath}, ${2|'data','script'|}, ${3:level} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "xml_parse_section_init"
	},
	{
		"documentation": "[xml\\_parse\\_section\\_setstate](https://www.mivascript.com/item/mivascript-functions/xml%5Fparse%5Fsection%5Fsetstate.html)  \n\nxml_parse_section_setstate( source var )\n\nSets internal parse state information for a xml\\_parse\\_section session.\n\nReturns 1 on success, 0 on failure.\n\n* source = input aggregate",
		"insertText": "xml_parse_section_setstate( ${1:source var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "xml_parse_section_setstate"
	},
	{
		"documentation": "[xml\\_parse\\_set\\_colon\\_replacement](https://www.mivascript.com/item/mivascript-functions/xml%5Fparse%5Fset%5Fcolon%5Freplacement.html)  \n\nxml_parse_set_colon_replacement( colon )",
		"insertText": "xml_parse_set_colon_replacement( ${1:colon} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "xml_parse_set_colon_replacement"
	},
	{
		"documentation": "[xml\\_parse\\_var](https://www.mivascript.com/item/mivascript-functions/xml%5Fparse%5Fvar.html)  \n\nxml_parse_var( var var, output var )",
		"insertText": "xml_parse_var( ${1:var var}, ${2:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "xml_parse_var"
	},
	{
		"documentation": "[file\\_overwrite](https://www.mivascript.com/item/mivascript-functions/file%5Foverwrite.html)  \n\nfile_overwrite( path, location, data var )\n\nReplaces the file in path if it exists. If will not create the file if it does not exist.\n\nReturns the length of data written or -1 on error\n\n* path = fully qualified path to the file\n* location = 'data' or 'script'\n* data = string variable containing the data to write",
		"insertText": "file_overwrite( ${1:path}, ${2|'data','script'|}, ${3:data var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "file_overwrite"
	},
	{
		"documentation": "[miva\\_joinstring](https://www.mivascript.com/item/mivascript-functions/miva%5Fjoinstring.html)  \n\nmiva_joinstring( input var, join_with, flags )\n\nJoins a simple array and outputs a string seperated by the join\\_with character or characters. If the input parameter is an array, then a string is returned with each array element's value separated by the join\\_with parameter along with any modifications made via the flags parameter. If the input parameter is a string, then a string is returned alongside any modifications made via the flags parameter. If the input parameter is a structure, an empty string is returned\n\nReturns : The joined string.\n\n* input = The input string, variable or simple array.\n* join\\_with = The string that will seperate array elements\n* flags = A comma separated list of any of the following keywords escape : Escapes the join\\_with characters. If the join\\_with characters exists in the elements value. insensitive : When combined with the escape flag, it will search for the join\\_with characters in an insensitive fashion.",
		"insertText": "miva_joinstring( ${1:input var}, ${2:join_with}, ${3|'trim','ltrim','rtrim','lower','upper','insensitive'|} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_joinstring"
	},
	{
		"documentation": "[file\\_set\\_time](https://www.mivascript.com/item/mivascript-functions/file%5Fset%5Ftime.html)  \n\nfile_set_time( path, location, modified )\n\nUpdates the modification time of the specified file to the time\\_t value in modified.\n\nReturn value: 0 on success, -1 on failure.\n\n* path = complete path and file name.\n* location = File location. \"script\" or \"data\", defaulting to \"data\" if any other value.\n* modified = the time\\_t timestamp value.",
		"insertText": "file_set_time( ${1:path}, ${2|'data','script'|}, ${3:modified} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "file_set_time"
	},
	{
		"documentation": "[crypto\\_next\\_error](https://www.mivascript.com/item/mivascript-functions/crypto%5Fnext%5Ferror.html)  \n\ncrypto_next_error()\n\nA string value containing the appropriate crypto error\n\n* Parameters: None",
		"insertText": "crypto_next_error()$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_next_error"
	},
	{
		"documentation": "[crypto\\_clear\\_error](https://www.mivascript.com/item/mivascript-functions/crypto%5Fclear%5Ferror.html)  \n\ncrypto_clear_error()\n\nClear out all crypto errors.\n\n* Parameters: None",
		"insertText": "crypto_clear_error()$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_clear_error"
	},
	{
		"documentation": "[crypto\\_evp\\_sign](https://www.mivascript.com/item/mivascript-functions/crypto%5Fevp%5Fsign.html)  \n\ncrypto_evp_sign( digestname, privkey, buffer, signature var )\n\n1 on success, 0 on failure\n\n* digestname = Hash algorithm name, such as \"md5\" or \"sha256\". Supported digest algorithms will vary between OpenSSL installations\n* privkey = EVP PKEY structure reference\n* buffer = The data to sign\n* signature = The signed output signature",
		"insertText": "crypto_evp_sign( ${1:digestname}, ${2:privkey}, ${3:buffer}, ${4:signature var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_evp_sign"
	},
	{
		"documentation": "[crypto\\_evp\\_verify](https://www.mivascript.com/item/mivascript-functions/crypto%5Fevp%5Fverify.html)  \n\ncrypto_evp_verify( digestname, pubkey, buffer, signature )\n\n1 on success, 0 on failure\n\n* digestname - Hash algorithm name, such as \"md5\" or \"sha256\". Supported digest algorithms will vary between OpenSSL installations\n* pubkey - EVP PKEY structure reference\n* buffer - The data to verify\n* signature - The signature to verify",
		"insertText": "crypto_evp_verify( ${1|'sha256','md5',digestname|}, ${2:pubkey}, ${3:buffer}, ${4:signature} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "crypto_evp_verify"
	},
	{
		"documentation": "[evp\\_pkey\\_load\\_pubkey\\_x509](https://www.mivascript.com/item/mivascript-functions/evp%5Fpkey%5Fload%5Fpubkey%5Fx509.html)  \n\nevp_pkey_load_pubkey_x509( x509 var, pkey var )\n\nLoads a PKEY reference from an x509 public key reference\n\n1 on success, 0 on failure\n\n* x509 = Certificate reference returned from functions such as x509\\_load\\_mem\n* pkey = Structure reference",
		"insertText": "evp_pkey_load_pubkey_x509( ${1:x509 var}, ${2:pkey var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "evp_pkey_load_pubkey_x509"
	},
	{
		"documentation": "[redis\\_connect](https://www.mivascript.com/item/mivascript-functions/redis%5Fconnect.html)  \n\nredis_connect( ip, port, conn_id var )\n\nConnects to Redis on the specified IP / hostname and port.\n\nReturns 1 on success, 0 on failure\n\n* ip / hostname = The IP address or hostname of the server Redis is on\n* port = The port number to connect on\n* conn\\_id = An output value containing an reference ID which is associated to the internal Redis connection.",
		"insertText": "redis_connect( ${1:ip}, ${2:port}, ${3:conn_id var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_connect"
	},
	{
		"documentation": "[redis\\_disconnect](https://www.mivascript.com/item/mivascript-functions/redis%5Fdisconnect.html)  \n\nredis_disconnect( conn_id )\n\nDisconnects the specified instance from the Redis server\n\nReturns 1 on success, 0 on failure\n\n* conn\\_id = The internal reference ID",
		"insertText": "redis_disconnect( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_disconnect"
	},
	{
		"documentation": "[redis\\_last\\_error](https://www.mivascript.com/item/mivascript-functions/redis%5Flast%5Ferror.html)  \n\nredis_last_error()\n\nGets the last error message resulting from a redis command.\n\nReturns the last error message.",
		"insertText": "redis_last_error()$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_last_error"
	},
	{
		"documentation": "[redis\\_append](https://www.mivascript.com/item/mivascript-functions/redis%5Fappend.html)  \n\nredis_append( conn_id, key, value )\n\nView documentation on redis.io: [redis\\_append(...) ](https://redis.io/commands/append \"redis_append( conn_id, key, value )\")",
		"insertText": "redis_append( ${1:conn_id}, ${2:key}, ${3:value} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_append"
	},
	{
		"documentation": "[redis\\_auth](https://www.mivascript.com/item/mivascript-functions/redis%5Fauth.html)  \n\nredis_auth( conn_id, password )\n\nView documentation on redis.io: [redis\\_auth(...) ](https://redis.io/commands/auth \"redis_auth( conn_id, password )\")",
		"insertText": "redis_auth( ${1:conn_id}, ${2:password} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_auth"
	},
	{
		"documentation": "[redis\\_bgsave](https://www.mivascript.com/item/mivascript-functions/redis%5Fbgsave.html)  \n\nredis_bgsave( conn_id )\n\nView documentation on redis.io: [redis\\_bgsave(...) ](https://redis.io/commands/bgsave \"redis_bgsave( conn_id )\")",
		"insertText": "redis_bgsave( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_bgsave"
	},
	{
		"documentation": "[redis\\_bitcount](https://www.mivascript.com/item/mivascript-functions/redis%5Fbitcount.html)  \n\nredis_bitcount( conn_id, key, options var )\n\nView documentation on redis.io: [redis\\_bitcount(...) ](https://redis.io/commands/bitcount \"redis_bitcount( conn_id, key, options var )\")",
		"insertText": "redis_bitcount( ${1:conn_id}, ${2:key}, ${3:options var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_bitcount"
	},
	{
		"documentation": "[redis\\_bitfield](https://www.mivascript.com/item/mivascript-functions/redis%5Fbitfield.html)  \n\nredis_bitfield( conn_id, key, options var, output var )\n\nView documentation on redis.io: [redis\\_bitfield(...) ](https://redis.io/commands/bitfield \"redis_bitfield( conn_id, key, options var, output var )\")",
		"insertText": "redis_bitfield( ${1:conn_id}, ${2:key}, ${3:options var}, ${4:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_bitfield"
	},
	{
		"documentation": "[redis\\_bitop](https://www.mivascript.com/item/mivascript-functions/redis%5Fbitop.html)  \n\nredis_bitop( conn_id, operation, destkey, key )\n\nView documentation on redis.io: [redis\\_bitop(...) ](https://redis.io/commands/bitop \"redis_bitop( conn_id, operation, destkey, key )\")",
		"insertText": "redis_bitop( ${1:conn_id}, ${2:operation}, ${3:destkey}, ${4:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_bitop"
	},
	{
		"documentation": "[redis\\_bitpos](https://www.mivascript.com/item/mivascript-functions/redis%5Fbitpos.html)  \n\nredis_bitpos( conn_id, key, bit, options var )\n\nView documentation on redis.io: [redis\\_bitpos(...) ](https://redis.io/commands/bitpos \"redis_bitpos( conn_id, key, bit, options var )\")",
		"insertText": "redis_bitpos( ${1:conn_id}, ${2:key}, ${3:bit}, ${4:options var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_bitpos"
	},
	{
		"documentation": "[redis\\_blpop](https://www.mivascript.com/item/mivascript-functions/redis%5Fblpop.html)  \n\nredis_blpop( conn_id, key, timeout, output var )\n\nView documentation on redis.io: [redis\\_blpop(...) ](https://redis.io/commands/blpop \"redis_blpop( conn_id, key, timeout, output var )\")",
		"insertText": "redis_blpop( ${1:conn_id}, ${2:key}, ${3:timeout}, ${4:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_blpop"
	},
	{
		"documentation": "[redis\\_brpop](https://www.mivascript.com/item/mivascript-functions/redis%5Fbrpop.html)  \n\nredis_brpop( conn_id, key, timeout, output var )\n\nView documentation on redis.io: [redis\\_brpop(...) ](https://redis.io/commands/brpop \"redis_brpop( conn_id, key, timeout, output var )\")",
		"insertText": "redis_brpop( ${1:conn_id}, ${2:key}, ${3:timeout}, ${4:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_brpop"
	},
	{
		"documentation": "[redis\\_brpoplpush](https://www.mivascript.com/item/mivascript-functions/redis%5Fbrpoplpush.html)  \n\nredis_brpoplpush( conn_id, source, destination, timeout )\n\nView documentation on redis.io: [redis\\_brpoplpush(...) ](https://redis.io/commands/brpoplpush \"redis_brpoplpush( conn_id, source, destination, timeout )\")",
		"insertText": "redis_brpoplpush( ${1:conn_id}, ${2:source}, ${3:destination}, ${4:timeout} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_brpoplpush"
	},
	{
		"documentation": "[redis\\_client\\_getname](https://www.mivascript.com/item/mivascript-functions/redis%5Fclient%5Fgetname.html)  \n\nredis_client_getname( conn_id )\n\nView documentation on redis.io: [redis\\_client\\_getname(...) ](https://redis.io/commands/client-getname \"redis_client_getname( conn_id )\")",
		"insertText": "redis_client_getname( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_client_getname"
	},
	{
		"documentation": "[redis\\_client\\_kill](https://www.mivascript.com/item/mivascript-functions/redis%5Fclient%5Fkill.html)  \n\nredis_client_kill( conn_id, options var )\n\nView documentation on redis.io: [redis\\_client\\_kill(...) ](https://redis.io/commands/client-kill \"redis_client_kill( conn_id, options var )\")",
		"insertText": "redis_client_kill( ${1:conn_id}, ${2:options var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_client_kill"
	},
	{
		"documentation": "[redis\\_client\\_list](https://www.mivascript.com/item/mivascript-functions/redis%5Fclient%5Flist.html)  \n\nredis_client_list( conn_id )\n\nView documentation on redis.io: [redis\\_client\\_list(...) ](https://redis.io/commands/client-list \"redis_client_list( conn_id )\")",
		"insertText": "redis_client_list( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_client_list"
	},
	{
		"documentation": "[redis\\_client\\_pause](https://www.mivascript.com/item/mivascript-functions/redis%5Fclient%5Fpause.html)  \n\nredis_client_pause( conn_id, timeout )\n\nView documentation on redis.io: [redis\\_client\\_pause(...) ](https://redis.io/commands/client-pause \"redis_client_pause( conn_id, timeout )\")",
		"insertText": "redis_client_pause( ${1:conn_id}, ${2:timeout} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_client_pause"
	},
	{
		"documentation": "[redis\\_client\\_setname](https://www.mivascript.com/item/mivascript-functions/redis%5Fclient%5Fsetname.html)  \n\nredis_client_setname( conn_id, name )\n\nView documentation on redis.io: [redis\\_client\\_setname(...) ](https://redis.io/commands/client-setname \"redis_client_setname( conn_id, name )\")",
		"insertText": "redis_client_setname( ${1:conn_id}, ${2:name} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_client_setname"
	},
	{
		"documentation": "[redis\\_command](https://www.mivascript.com/item/mivascript-functions/redis%5Fcommand.html)  \n\nredis_command( conn_id, output var )\n\nView documentation on redis.io: [redis\\_command(...) ](https://redis.io/commands/command \"redis_command( conn_id, output var )\")",
		"insertText": "redis_command( ${1:conn_id}, ${2:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_command"
	},
	{
		"documentation": "[redis\\_command\\_count](https://www.mivascript.com/item/mivascript-functions/redis%5Fcommand%5Fcount.html)  \n\nredis_command_count( conn_id )\n\nView documentation on redis.io: [redis\\_command\\_count(...) ](https://redis.io/commands/command \"redis_command_count( conn_id )\")",
		"insertText": "redis_command_count( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_command_count"
	},
	{
		"documentation": "[redis\\_command\\_getkeys](https://www.mivascript.com/item/mivascript-functions/redis%5Fcommand%5Fgetkeys.html)  \n\nredis_command_getkeys( conn_id, input var, output var )\n\nView documentation on redis.io: [redis\\_command\\_getkeys(...) ](https://redis.io/commands/command \"redis_command_getkeys( conn_id, input var, output var )\")",
		"insertText": "redis_command_getkeys( ${1:conn_id}, ${2:input var}, ${3:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_command_getkeys"
	},
	{
		"documentation": "[redis\\_command\\_info](https://www.mivascript.com/item/mivascript-functions/redis%5Fcommand%5Finfo.html)  \n\nredis_command_info( conn_id, command_name, output var )\n\nView documentation on redis.io: [redis\\_command\\_info(...) ](https://redis.io/commands/command \"redis_command_info( conn_id, command_name, output var )\")",
		"insertText": "redis_command_info( ${1:conn_id}, ${2:command_name}, ${3:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_command_info"
	},
	{
		"documentation": "[redis\\_config\\_get](https://www.mivascript.com/item/mivascript-functions/redis%5Fconfig%5Fget.html)  \n\nredis_config_get( conn_id, parameter, output var )\n\nView documentation on redis.io: [redis\\_config\\_get(...) ](https://redis.io/commands/config-get \"redis_config_get( conn_id, parameter, output var )\")",
		"insertText": "redis_config_get( ${1:conn_id}, ${2:parameter}, ${3:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_config_get"
	},
	{
		"documentation": "[redis\\_config\\_resetstat](https://www.mivascript.com/item/mivascript-functions/redis%5Fconfig%5Fresetstat.html)  \n\nredis_config_resetstat( conn_id )\n\nView documentation on redis.io: [redis\\_config\\_resetstat(...) ](https://redis.io/commands/config-resetstat \"redis_config_resetstat( conn_id )\")",
		"insertText": "redis_config_resetstat( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_config_resetstat"
	},
	{
		"documentation": "[redis\\_config\\_rewrite](https://www.mivascript.com/item/mivascript-functions/redis%5Fconfig%5Frewrite.html)  \n\nredis_config_rewrite( conn_id )\n\nView documentation on redis.io: [redis\\_config\\_rewrite(...) ](https://redis.io/commands/config-rewrite \"redis_config_rewrite( conn_id )\")",
		"insertText": "redis_config_rewrite( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_config_rewrite"
	},
	{
		"documentation": "[redis\\_config\\_set](https://www.mivascript.com/item/mivascript-functions/redis%5Fconfig%5Fset.html)  \n\nredis_config_set( conn_id, parameter, value )\n\nView documentation on redis.io: [redis\\_config\\_set(...) ](https://redis.io/commands/config-set \"redis_config_set( conn_id, parameter, value )\")",
		"insertText": "redis_config_set( ${1:conn_id}, ${2:parameter}, ${3:value} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_config_set"
	},
	{
		"documentation": "[redis\\_dbsize](https://www.mivascript.com/item/mivascript-functions/redis%5Fdbsize.html)  \n\nredis_dbsize( conn_id )\n\nView documentation on redis.io: [redis\\_dbsize(...) ](https://redis.io/commands/dbsize \"redis_dbsize( conn_id )\")",
		"insertText": "redis_dbsize( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_dbsize"
	},
	{
		"documentation": "[redis\\_debug\\_object](https://www.mivascript.com/item/mivascript-functions/redis%5Fdebug%5Fobject.html)  \n\nredis_debug_object( conn_id, key )\n\nView documentation on redis.io: [redis\\_debug\\_object(...) ](https://redis.io/commands/debug-object \"redis_debug_object( conn_id, key )\")",
		"insertText": "redis_debug_object( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_debug_object"
	},
	{
		"documentation": "[redis\\_debug\\_segfault](https://www.mivascript.com/item/mivascript-functions/redis%5Fdebug%5Fsegfault.html)  \n\nredis_debug_segfault( conn_id )\n\nView documentation on redis.io: [redis\\_debug\\_segfault(...) ](https://redis.io/commands/debug-segfault \"redis_debug_segfault( conn_id )\")",
		"insertText": "redis_debug_segfault( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_debug_segfault"
	},
	{
		"documentation": "[redis\\_decr](https://www.mivascript.com/item/mivascript-functions/redis%5Fdecr.html)  \n\nredis_decr( conn_id, key )\n\nView documentation on redis.io: [redis\\_decr(...) ](https://redis.io/commands/decr \"redis_decr( conn_id, key )\")",
		"insertText": "redis_decr( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_decr"
	},
	{
		"documentation": "[redis\\_decrby](https://www.mivascript.com/item/mivascript-functions/redis%5Fdecrby.html)  \n\nredis_decrby( conn_id, key, decrement )\n\nView documentation on redis.io: [redis\\_decrby(...) ](https://redis.io/commands/decrby \"redis_decrby( conn_id, key, decrement )\")",
		"insertText": "redis_decrby( ${1:conn_id}, ${2:key}, ${3:decrement} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_decrby"
	},
	{
		"documentation": "[redis\\_del](https://www.mivascript.com/item/mivascript-functions/redis%5Fdel.html)  \n\nredis_del( conn_id, key )\n\nView documentation on redis.io: [redis\\_del(...) ](https://redis.io/commands/del \"redis_del( conn_id, key )\")",
		"insertText": "redis_del( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_del"
	},
	{
		"documentation": "[redis\\_discard](https://www.mivascript.com/item/mivascript-functions/redis%5Fdiscard.html)  \n\nredis_discard( conn_id )\n\nView documentation on redis.io: [redis\\_discard(...) ](https://redis.io/commands/discard \"redis_discard( conn_id )\")",
		"insertText": "redis_discard( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_discard"
	},
	{
		"documentation": "[redis\\_dump](https://www.mivascript.com/item/mivascript-functions/redis%5Fdump.html)  \n\nredis_dump( conn_id, key )\n\nView documentation on redis.io: [redis\\_dump(...) ](https://redis.io/commands/dump \"redis_dump( conn_id, key )\")",
		"insertText": "redis_dump( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_dump"
	},
	{
		"documentation": "[redis\\_echo](https://www.mivascript.com/item/mivascript-functions/redis%5Fecho.html)  \n\nredis_echo( conn_id, message )\n\nView documentation on redis.io: [redis\\_echo(...) ](https://redis.io/commands/echo \"redis_echo( conn_id, message )\")",
		"insertText": "redis_echo( ${1:conn_id}, ${2:message} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_echo"
	},
	{
		"documentation": "[redis\\_eval](https://www.mivascript.com/item/mivascript-functions/redis%5Feval.html)  \n\nredis_eval( conn_id, script, key, arg )\n\nView documentation on redis.io: [redis\\_eval(...) ](https://redis.io/commands/eval \"redis_eval( conn_id, script, key, arg )\")",
		"insertText": "redis_eval( ${1:conn_id}, ${2:script}, ${3:key}, ${4:arg} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_eval"
	},
	{
		"documentation": "[redis\\_eval\\_array](https://www.mivascript.com/item/mivascript-functions/redis%5Feval%5Farray.html)  \n\nredis_eval_array( conn_id, script, key, arg, output var )\n\nView documentation on redis.io: [redis\\_eval\\_array(...) ](https://redis.io/commands/eval \"redis_eval_array( conn_id, script, key, arg, output var )\")",
		"insertText": "redis_eval_array( ${1:conn_id}, ${2:script}, ${3:key}, ${4:arg}, ${5:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_eval_array"
	},
	{
		"documentation": "[redis\\_evalsha](https://www.mivascript.com/item/mivascript-functions/redis%5Fevalsha.html)  \n\nredis_evalsha( conn_id, sha1, key, arg )\n\nView documentation on redis.io: [redis\\_evalsha(...) ](https://redis.io/commands/evalsha \"redis_evalsha( conn_id, sha1, key, arg )\")",
		"insertText": "redis_evalsha( ${1:conn_id}, ${2:sha1}, ${3:key}, ${4:arg} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_evalsha"
	},
	{
		"documentation": "[redis\\_evalsha\\_array](https://www.mivascript.com/item/mivascript-functions/redis%5Fevalsha%5Farray.html)  \n\nredis_evalsha_array( conn_id, sha1, key, arg, output var )\n\nView documentation on redis.io: [redis\\_evalsha\\_array(...) ](https://redis.io/commands/evalsha \"redis_evalsha_array( conn_id, sha1, key, arg, output var )\")",
		"insertText": "redis_evalsha_array( ${1:conn_id}, ${2:sha1}, ${3:key}, ${4:arg}, ${5:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_evalsha_array"
	},
	{
		"documentation": "[redis\\_exec](https://www.mivascript.com/item/mivascript-functions/redis%5Fexec.html)  \n\nredis_exec( conn_id, output var )\n\nView documentation on redis.io: [redis\\_exec(...) ](https://redis.io/commands/exec \"redis_exec( conn_id, output var )\")",
		"insertText": "redis_exec( ${1:conn_id}, ${2:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_exec"
	},
	{
		"documentation": "[redis\\_exists](https://www.mivascript.com/item/mivascript-functions/redis%5Fexists.html)  \n\nredis_exists( conn_id, key )\n\nView documentation on redis.io: [redis\\_exists(...) ](https://redis.io/commands/exists \"redis_exists( conn_id, key )\")",
		"insertText": "redis_exists( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_exists"
	},
	{
		"documentation": "[redis\\_expire](https://www.mivascript.com/item/mivascript-functions/redis%5Fexpire.html)  \n\nredis_expire( conn_id, key, seconds )\n\nView documentation on redis.io: [redis\\_expire(...) ](https://redis.io/commands/expire \"redis_expire( conn_id, key, seconds )\")",
		"insertText": "redis_expire( ${1:conn_id}, ${2:key}, ${3:seconds} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_expire"
	},
	{
		"documentation": "[redis\\_expireat](https://www.mivascript.com/item/mivascript-functions/redis%5Fexpireat.html)  \n\nredis_expireat( conn_id, key, timestamp )\n\nView documentation on redis.io: [redis\\_expireat(...) ](https://redis.io/commands/expireat \"redis_expireat( conn_id, key, timestamp )\")",
		"insertText": "redis_expireat( ${1:conn_id}, ${2:key}, ${3:timestamp} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_expireat"
	},
	{
		"documentation": "[redis\\_flushall](https://www.mivascript.com/item/mivascript-functions/redis%5Fflushall.html)  \n\nredis_flushall( conn_id )\n\nView documentation on redis.io: [redis\\_flushall(...) ](https://redis.io/commands/flushall \"redis_flushall( conn_id )\")",
		"insertText": "redis_flushall( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_flushall"
	},
	{
		"documentation": "[redis\\_flushdb](https://www.mivascript.com/item/mivascript-functions/redis%5Fflushdb.html)  \n\nredis_flushdb( conn_id )\n\nView documentation on redis.io: [redis\\_flushdb(...) ](https://redis.io/commands/flushdb \"redis_flushdb( conn_id )\")",
		"insertText": "redis_flushdb( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_flushdb"
	},
	{
		"documentation": "[redis\\_geoadd](https://www.mivascript.com/item/mivascript-functions/redis%5Fgeoadd.html)  \n\nredis_geoadd( conn_id, key, longitude, latitude, member )\n\nView documentation on redis.io: [redis\\_geoadd(...) ](https://redis.io/commands/geoadd \"redis_geoadd( conn_id, key, longitude, latitude, member )\")",
		"insertText": "redis_geoadd( ${1:conn_id}, ${2:key}, ${3:longitude}, ${4:latitude}, ${5:member} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_geoadd"
	},
	{
		"documentation": "[redis\\_geodist](https://www.mivascript.com/item/mivascript-functions/redis%5Fgeodist.html)  \n\nredis_geodist( conn_id, key, member1, member2, options var )\n\nView documentation on redis.io: [redis\\_geodist(...) ](https://redis.io/commands/geodist \"redis_geodist( conn_id, key, member1, member2, options var )\")",
		"insertText": "redis_geodist( ${1:conn_id}, ${2:key}, ${3:member1}, ${4:member2}, ${5:options var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_geodist"
	},
	{
		"documentation": "[redis\\_geohash](https://www.mivascript.com/item/mivascript-functions/redis%5Fgeohash.html)  \n\nredis_geohash( conn_id, key, member, output var )\n\nView documentation on redis.io: [redis\\_geohash(...) ](https://redis.io/commands/geohash \"redis_geohash( conn_id, key, member, output var )\")",
		"insertText": "redis_geohash( ${1:conn_id}, ${2:key}, ${3:member}, ${4:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_geohash"
	},
	{
		"documentation": "[redis\\_geopos](https://www.mivascript.com/item/mivascript-functions/redis%5Fgeopos.html)  \n\nredis_geopos( conn_id, key, member, output var )\n\nView documentation on redis.io: [redis\\_geopos(...) ](https://redis.io/commands/geopos \"redis_geopos( conn_id, key, member, output var )\")",
		"insertText": "redis_geopos( ${1:conn_id}, ${2:key}, ${3:member}, ${4:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_geopos"
	},
	{
		"documentation": "[redis\\_georadius](https://www.mivascript.com/item/mivascript-functions/redis%5Fgeoradius.html)  \n\nredis_georadius( conn_id, key, longitude, latitude, radius, unit, options var, output var )\n\nView documentation on redis.io: [redis\\_georadius(...) ](https://redis.io/commands/georadius \"redis_georadius( conn_id, key, longitude, latitude, radius, unit, options var, output var )\")",
		"insertText": "redis_georadius( ${1:conn_id}, ${2:key}, ${3:longitude}, ${4:latitude}, ${5:radius}, ${6:unit}, ${7:options var}, ${8:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_georadius"
	},
	{
		"documentation": "[redis\\_georadiusbymember](https://www.mivascript.com/item/mivascript-functions/redis%5Fgeoradiusbymember.html)  \n\nredis_georadiusbymember( conn_id, key, member, radius, unit, options var, output var )\n\nView documentation on redis.io: [redis\\_georadiusbymember(...) ](https://redis.io/commands/georadiusbymember \"redis_georadiusbymember( conn_id, key, member, radius, unit, options var, output var )\")",
		"insertText": "redis_georadiusbymember( ${1:conn_id}, ${2:key}, ${3:member}, ${4:radius}, ${5:unit}, ${6:options var}, ${7:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_georadiusbymember"
	},
	{
		"documentation": "[redis\\_georadiusbymemberstore](https://www.mivascript.com/item/mivascript-functions/redis%5Fgeoradiusbymemberstore.html)  \n\nredis_georadiusbymemberstore( conn_id, key, member, latitude, radius, unit, store_key )\n\nView documentation on redis.io: [redis\\_georadiusbymemberstore(...) ](https://redis.io/commands/georadiusbymember \"redis_georadiusbymemberstore( conn_id, key, member, latitude, radius, unit, store_key )\")",
		"insertText": "redis_georadiusbymemberstore( ${1:conn_id}, ${2:key}, ${3:member}, ${4:latitude}, ${5:radius}, ${6:unit}, ${7:store_key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_georadiusbymemberstore"
	},
	{
		"documentation": "[redis\\_georadiusbymemberstoredist](https://www.mivascript.com/item/mivascript-functions/redis%5Fgeoradiusbymemberstoredist.html)  \n\nredis_georadiusbymemberstoredist( conn_id, key, member, latitude, radius, unit, storedist_key )\n\nView documentation on redis.io: [redis\\_georadiusbymemberstoredist(...) ](https://redis.io/commands/georadiusbymember \"redis_georadiusbymemberstoredist( conn_id, key, member, latitude, radius, unit, storedist_key )\")",
		"insertText": "redis_georadiusbymemberstoredist( ${1:conn_id}, ${2:key}, ${3:member}, ${4:latitude}, ${5:radius}, ${6:unit}, ${7:storedist_key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_georadiusbymemberstoredist"
	},
	{
		"documentation": "[redis\\_georadiusstore](https://www.mivascript.com/item/mivascript-functions/redis%5Fgeoradiusstore.html)  \n\nredis_georadiusstore( conn_id, key, longitude, latitude, radius, unit, store_key, count )\n\nView documentation on redis.io: [redis\\_georadiusstore(...) ](https://redis.io/commands/georadius \"redis_georadiusstore( conn_id, key, longitude, latitude, radius, unit, store_key, count )\")",
		"insertText": "redis_georadiusstore( ${1:conn_id}, ${2:key}, ${3:longitude}, ${4:latitude}, ${5:radius}, ${6:unit}, ${7:store_key}, ${8:count} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_georadiusstore"
	},
	{
		"documentation": "[redis\\_georadiusstoredist](https://www.mivascript.com/item/mivascript-functions/redis%5Fgeoradiusstoredist.html)  \n\nredis_georadiusstoredist( conn_id, key, longitude, latitude, radius, unit, storedist_key, count )\n\nView documentation on redis.io: [redis\\_georadiusstoredist(...) ](https://redis.io/commands/georadius \"redis_georadiusstoredist( conn_id, key, longitude, latitude, radius, unit, storedist_key, count )\")",
		"insertText": "redis_georadiusstoredist( ${1:conn_id}, ${2:key}, ${3:longitude}, ${4:latitude}, ${5:radius}, ${6:unit}, ${7:storedist_key}, ${8:count} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_georadiusstoredist"
	},
	{
		"documentation": "[redis\\_get](https://www.mivascript.com/item/mivascript-functions/redis%5Fget.html)  \n\nredis_get( conn_id, key )\n\nView documentation on redis.io: [redis\\_get(...) ](https://redis.io/commands/get \"redis_get( conn_id, key )\")",
		"insertText": "redis_get( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_get"
	},
	{
		"documentation": "[redis\\_getbit](https://www.mivascript.com/item/mivascript-functions/redis%5Fgetbit.html)  \n\nredis_getbit( conn_id, key, offset )\n\nView documentation on redis.io: [redis\\_getbit(...) ](https://redis.io/commands/getbit \"redis_getbit( conn_id, key, offset )\")",
		"insertText": "redis_getbit( ${1:conn_id}, ${2:key}, ${3:offset} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_getbit"
	},
	{
		"documentation": "[redis\\_getrange](https://www.mivascript.com/item/mivascript-functions/redis%5Fgetrange.html)  \n\nredis_getrange( conn_id, key, start, end )\n\nView documentation on redis.io: [redis\\_getrange(...) ](https://redis.io/commands/getrange \"redis_getrange( conn_id, key, start, end )\")",
		"insertText": "redis_getrange( ${1:conn_id}, ${2:key}, ${3:start}, ${4:end} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_getrange"
	},
	{
		"documentation": "[redis\\_getset](https://www.mivascript.com/item/mivascript-functions/redis%5Fgetset.html)  \n\nredis_getset( conn_id, key, value )\n\nView documentation on redis.io: [redis\\_getset(...) ](https://redis.io/commands/getset \"redis_getset( conn_id, key, value )\")",
		"insertText": "redis_getset( ${1:conn_id}, ${2:key}, ${3:value} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_getset"
	},
	{
		"documentation": "[redis\\_hdel](https://www.mivascript.com/item/mivascript-functions/redis%5Fhdel.html)  \n\nredis_hdel( conn_id, key, field )\n\nView documentation on redis.io: [redis\\_hdel(...) ](https://redis.io/commands/hdel \"redis_hdel( conn_id, key, field )\")",
		"insertText": "redis_hdel( ${1:conn_id}, ${2:key}, ${3:field} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_hdel"
	},
	{
		"documentation": "[redis\\_hexists](https://www.mivascript.com/item/mivascript-functions/redis%5Fhexists.html)  \n\nredis_hexists( conn_id, key, field )\n\nView documentation on redis.io: [redis\\_hexists(...) ](https://redis.io/commands/hexists \"redis_hexists( conn_id, key, field )\")",
		"insertText": "redis_hexists( ${1:conn_id}, ${2:key}, ${3:field} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_hexists"
	},
	{
		"documentation": "[redis\\_hget](https://www.mivascript.com/item/mivascript-functions/redis%5Fhget.html)  \n\nredis_hget( conn_id, key, field )\n\nView documentation on redis.io: [redis\\_hget(...) ](https://redis.io/commands/hget \"redis_hget( conn_id, key, field )\")",
		"insertText": "redis_hget( ${1:conn_id}, ${2:key}, ${3:field} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_hget"
	},
	{
		"documentation": "[redis\\_hgetall](https://www.mivascript.com/item/mivascript-functions/redis%5Fhgetall.html)  \n\nredis_hgetall( conn_id, key, output var )\n\nView documentation on redis.io: [redis\\_hgetall(...) ](https://redis.io/commands/hgetall \"redis_hgetall( conn_id, key, output var )\")",
		"insertText": "redis_hgetall( ${1:conn_id}, ${2:key}, ${3:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_hgetall"
	},
	{
		"documentation": "[redis\\_hincrby](https://www.mivascript.com/item/mivascript-functions/redis%5Fhincrby.html)  \n\nredis_hincrby( conn_id, key, field, increment )\n\nView documentation on redis.io: [redis\\_hincrby(...) ](https://redis.io/commands/hincrby \"redis_hincrby( conn_id, key, field, increment )\")",
		"insertText": "redis_hincrby( ${1:conn_id}, ${2:key}, ${3:field}, ${4:increment} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_hincrby"
	},
	{
		"documentation": "[redis\\_hincrbyfloat](https://www.mivascript.com/item/mivascript-functions/redis%5Fhincrbyfloat.html)  \n\nredis_hincrbyfloat( conn_id, key, field, increment )\n\nView documentation on redis.io: [redis\\_hincrbyfloat(...) ](https://redis.io/commands/hincrbyfloat \"redis_hincrbyfloat( conn_id, key, field, increment )\")",
		"insertText": "redis_hincrbyfloat( ${1:conn_id}, ${2:key}, ${3:field}, ${4:increment} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_hincrbyfloat"
	},
	{
		"documentation": "[redis\\_hkeys](https://www.mivascript.com/item/mivascript-functions/redis%5Fhkeys.html)  \n\nredis_hkeys( conn_id, key, output var )\n\nView documentation on redis.io: [redis\\_hkeys(...) ](https://redis.io/commands/hkeys \"redis_hkeys( conn_id, key, output var )\")",
		"insertText": "redis_hkeys( ${1:conn_id}, ${2:key}, ${3:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_hkeys"
	},
	{
		"documentation": "[redis\\_hlen](https://www.mivascript.com/item/mivascript-functions/redis%5Fhlen.html)  \n\nredis_hlen( conn_id, key )\n\nView documentation on redis.io: [redis\\_hlen(...) ](https://redis.io/commands/hlen \"redis_hlen( conn_id, key )\")",
		"insertText": "redis_hlen( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_hlen"
	},
	{
		"documentation": "[redis\\_hmget](https://www.mivascript.com/item/mivascript-functions/redis%5Fhmget.html)  \n\nredis_hmget( conn_id, key, field, output var )\n\nView documentation on redis.io: [redis\\_hmget(...) ](https://redis.io/commands/hmget \"redis_hmget( conn_id, key, field, output var )\")",
		"insertText": "redis_hmget( ${1:conn_id}, ${2:key}, ${3:field}, ${4:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_hmget"
	},
	{
		"documentation": "[redis\\_hmset](https://www.mivascript.com/item/mivascript-functions/redis%5Fhmset.html)  \n\nredis_hmset( conn_id, key, field, value )\n\nView documentation on redis.io: [redis\\_hmset(...) ](https://redis.io/commands/hmset \"redis_hmset( conn_id, key, field, value )\")",
		"insertText": "redis_hmset( ${1:conn_id}, ${2:key}, ${3:field}, ${4:value} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_hmset"
	},
	{
		"documentation": "[redis\\_hscan](https://www.mivascript.com/item/mivascript-functions/redis%5Fhscan.html)  \n\nredis_hscan( conn_id, key, cursor, options var, output var )\n\nView documentation on redis.io: [redis\\_hscan(...) ](https://redis.io/commands/hscan \"redis_hscan( conn_id, key, cursor, options var, output var )\")",
		"insertText": "redis_hscan( ${1:conn_id}, ${2:key}, ${3:cursor}, ${4:options var}, ${5:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_hscan"
	},
	{
		"documentation": "[redis\\_hset](https://www.mivascript.com/item/mivascript-functions/redis%5Fhset.html)  \n\nredis_hset( conn_id, key, field, value )\n\nView documentation on redis.io: [redis\\_hset(...) ](https://redis.io/commands/hset \"redis_hset( conn_id, key, field, value )\")",
		"insertText": "redis_hset( ${1:conn_id}, ${2:key}, ${3:field}, ${4:value} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_hset"
	},
	{
		"documentation": "[redis\\_hsetnx](https://www.mivascript.com/item/mivascript-functions/redis%5Fhsetnx.html)  \n\nredis_hsetnx( conn_id, key, field, value )\n\nView documentation on redis.io: [redis\\_hsetnx(...) ](https://redis.io/commands/hsetnx \"redis_hsetnx( conn_id, key, field, value )\")",
		"insertText": "redis_hsetnx( ${1:conn_id}, ${2:key}, ${3:field}, ${4:value} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_hsetnx"
	},
	{
		"documentation": "[redis\\_hstrlen](https://www.mivascript.com/item/mivascript-functions/redis%5Fhstrlen.html)  \n\nredis_hstrlen( conn_id, key, field )\n\nView documentation on redis.io: [redis\\_hstrlen(...) ](https://redis.io/commands/hstrlen \"redis_hstrlen( conn_id, key, field )\")",
		"insertText": "redis_hstrlen( ${1:conn_id}, ${2:key}, ${3:field} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_hstrlen"
	},
	{
		"documentation": "[redis\\_hvals](https://www.mivascript.com/item/mivascript-functions/redis%5Fhvals.html)  \n\nredis_hvals( conn_id, key, output var )\n\nView documentation on redis.io: [redis\\_hvals(...) ](https://redis.io/commands/hvals \"redis_hvals( conn_id, key, output var )\")",
		"insertText": "redis_hvals( ${1:conn_id}, ${2:key}, ${3:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_hvals"
	},
	{
		"documentation": "[redis\\_incr](https://www.mivascript.com/item/mivascript-functions/redis%5Fincr.html)  \n\nredis_incr( conn_id, key )\n\nView documentation on redis.io: [redis\\_incr(...) ](https://redis.io/commands/incr \"redis_incr( conn_id, key )\")",
		"insertText": "redis_incr( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_incr"
	},
	{
		"documentation": "[redis\\_incrby](https://www.mivascript.com/item/mivascript-functions/redis%5Fincrby.html)  \n\nredis_incrby( conn_id, key, increment )\n\nView documentation on redis.io: [redis\\_incrby(...) ](https://redis.io/commands/incrby \"redis_incrby( conn_id, key, increment )\")",
		"insertText": "redis_incrby( ${1:conn_id}, ${2:key}, ${3:increment} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_incrby"
	},
	{
		"documentation": "[redis\\_incrbyfloat](https://www.mivascript.com/item/mivascript-functions/redis%5Fincrbyfloat.html)  \n\nredis_incrbyfloat( conn_id, key, increment )\n\nView documentation on redis.io: [redis\\_incrbyfloat(...) ](https://redis.io/commands/incrbyfloat \"redis_incrbyfloat( conn_id, key, increment )\")",
		"insertText": "redis_incrbyfloat( ${1:conn_id}, ${2:key}, ${3:increment} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_incrbyfloat"
	},
	{
		"documentation": "[redis\\_info](https://www.mivascript.com/item/mivascript-functions/redis%5Finfo.html)  \n\nredis_info( conn_id )\n\nView documentation on redis.io: [redis\\_info(...) ](https://redis.io/commands/info \"redis_info( conn_id )\")",
		"insertText": "redis_info( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_info"
	},
	{
		"documentation": "[redis\\_info\\_section](https://www.mivascript.com/item/mivascript-functions/redis%5Finfo%5Fsection.html)  \n\nredis_info_section( conn_id, section )\n\nView documentation on redis.io: [redis\\_info\\_section(...) ](https://redis.io/commands/info \"redis_info_section( conn_id, section )\")",
		"insertText": "redis_info_section( ${1:conn_id}, ${2:section} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_info_section"
	},
	{
		"documentation": "[redis\\_keys](https://www.mivascript.com/item/mivascript-functions/redis%5Fkeys.html)  \n\nredis_keys( conn_id, pattern, output var )\n\nView documentation on redis.io: [redis\\_keys(...) ](https://redis.io/commands/keys \"redis_keys( conn_id, pattern, output var )\")",
		"insertText": "redis_keys( ${1:conn_id}, ${2:pattern}, ${3:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_keys"
	},
	{
		"documentation": "[redis\\_lastsave](https://www.mivascript.com/item/mivascript-functions/redis%5Flastsave.html)  \n\nredis_lastsave( conn_id )\n\nView documentation on redis.io: [redis\\_lastsave(...) ](https://redis.io/commands/lastsave \"redis_lastsave( conn_id )\")",
		"insertText": "redis_lastsave( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_lastsave"
	},
	{
		"documentation": "[redis\\_lindex](https://www.mivascript.com/item/mivascript-functions/redis%5Flindex.html)  \n\nredis_lindex( conn_id, key, index )\n\nView documentation on redis.io: [redis\\_lindex(...) ](https://redis.io/commands/lindex \"redis_lindex( conn_id, key, index )\")",
		"insertText": "redis_lindex( ${1:conn_id}, ${2:key}, ${3:index} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_lindex"
	},
	{
		"documentation": "[redis\\_linsert\\_after](https://www.mivascript.com/item/mivascript-functions/redis%5Flinsert%5Fafter.html)  \n\nredis_linsert_after( conn_id, key, pivot, value )\n\nView documentation on redis.io: [redis\\_linsert\\_after(...) ](https://redis.io/commands/linsert \"redis_linsert_after( conn_id, key, pivot, value )\")",
		"insertText": "redis_linsert_after( ${1:conn_id}, ${2:key}, ${3:pivot}, ${4:value} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_linsert_after"
	},
	{
		"documentation": "[redis\\_linsert\\_before](https://www.mivascript.com/item/mivascript-functions/redis%5Flinsert%5Fbefore.html)  \n\nredis_linsert_before( conn_id, key, pivot, value )\n\nView documentation on redis.io: [redis\\_linsert\\_before(...) ](https://redis.io/commands/linsert \"redis_linsert_before( conn_id, key, pivot, value )\")",
		"insertText": "redis_linsert_before( ${1:conn_id}, ${2:key}, ${3:pivot}, ${4:value} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_linsert_before"
	},
	{
		"documentation": "[redis\\_llen](https://www.mivascript.com/item/mivascript-functions/redis%5Fllen.html)  \n\nredis_llen( conn_id, key )\n\nView documentation on redis.io: [redis\\_llen(...) ](https://redis.io/commands/llen \"redis_llen( conn_id, key )\")",
		"insertText": "redis_llen( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_llen"
	},
	{
		"documentation": "[redis\\_lpop](https://www.mivascript.com/item/mivascript-functions/redis%5Flpop.html)  \n\nredis_lpop( conn_id, key )\n\nView documentation on redis.io: [redis\\_lpop(...) ](https://redis.io/commands/lpop \"redis_lpop( conn_id, key )\")",
		"insertText": "redis_lpop( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_lpop"
	},
	{
		"documentation": "[redis\\_lpush](https://www.mivascript.com/item/mivascript-functions/redis%5Flpush.html)  \n\nredis_lpush( conn_id, key, value )\n\nView documentation on redis.io: [redis\\_lpush(...) ](https://redis.io/commands/lpush \"redis_lpush( conn_id, key, value )\")",
		"insertText": "redis_lpush( ${1:conn_id}, ${2:key}, ${3:value} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_lpush"
	},
	{
		"documentation": "[redis\\_lpushx](https://www.mivascript.com/item/mivascript-functions/redis%5Flpushx.html)  \n\nredis_lpushx( conn_id, key, value )\n\nView documentation on redis.io: [redis\\_lpushx(...) ](https://redis.io/commands/lpushx \"redis_lpushx( conn_id, key, value )\")",
		"insertText": "redis_lpushx( ${1:conn_id}, ${2:key}, ${3:value} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_lpushx"
	},
	{
		"documentation": "[redis\\_lrange](https://www.mivascript.com/item/mivascript-functions/redis%5Flrange.html)  \n\nredis_lrange( conn_id, key, start, stop, output var )\n\nView documentation on redis.io: [redis\\_lrange(...) ](https://redis.io/commands/lrange \"redis_lrange( conn_id, key, start, stop, output var )\")",
		"insertText": "redis_lrange( ${1:conn_id}, ${2:key}, ${3:start}, ${4:stop}, ${5:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_lrange"
	},
	{
		"documentation": "[redis\\_lrem](https://www.mivascript.com/item/mivascript-functions/redis%5Flrem.html)  \n\nredis_lrem( conn_id, key, count, value )\n\nView documentation on redis.io: [redis\\_lrem(...) ](https://redis.io/commands/lrem \"redis_lrem( conn_id, key, count, value )\")",
		"insertText": "redis_lrem( ${1:conn_id}, ${2:key}, ${3:count}, ${4:value} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_lrem"
	},
	{
		"documentation": "[redis\\_lset](https://www.mivascript.com/item/mivascript-functions/redis%5Flset.html)  \n\nredis_lset( conn_id, key, index, value )\n\nView documentation on redis.io: [redis\\_lset(...) ](https://redis.io/commands/lset \"redis_lset( conn_id, key, index, value )\")",
		"insertText": "redis_lset( ${1:conn_id}, ${2:key}, ${3:index}, ${4:value} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_lset"
	},
	{
		"documentation": "[redis\\_ltrim](https://www.mivascript.com/item/mivascript-functions/redis%5Fltrim.html)  \n\nredis_ltrim( conn_id, key, start, stop )\n\nView documentation on redis.io: [redis\\_ltrim(...) ](https://redis.io/commands/ltrim \"redis_ltrim( conn_id, key, start, stop )\")",
		"insertText": "redis_ltrim( ${1:conn_id}, ${2:key}, ${3:start}, ${4:stop} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_ltrim"
	},
	{
		"documentation": "[redis\\_mget](https://www.mivascript.com/item/mivascript-functions/redis%5Fmget.html)  \n\nredis_mget( conn_id, key, output var )\n\nView documentation on redis.io: [redis\\_mget(...) ](https://redis.io/commands/mget \"redis_mget( conn_id, key, output var )\")",
		"insertText": "redis_mget( ${1:conn_id}, ${2:key}, ${3:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_mget"
	},
	{
		"documentation": "[redis\\_migrate](https://www.mivascript.com/item/mivascript-functions/redis%5Fmigrate.html)  \n\nredis_migrate( conn_id, host, port, key, destination_db, timeout, options var )\n\nView documentation on redis.io: [redis\\_migrate(...) ](https://redis.io/commands/migrate \"redis_migrate( conn_id, host, port, key, destination_db, timeout, options var )\")",
		"insertText": "redis_migrate( ${1:conn_id}, ${2:host}, ${3:port}, ${4:key}, ${5:destination_db}, ${6:timeout}, ${7:options var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_migrate"
	},
	{
		"documentation": "[redis\\_move](https://www.mivascript.com/item/mivascript-functions/redis%5Fmove.html)  \n\nredis_move( conn_id, key, db )\n\nView documentation on redis.io: [redis\\_move(...) ](https://redis.io/commands/move \"redis_move( conn_id, key, db )\")",
		"insertText": "redis_move( ${1:conn_id}, ${2:key}, ${3:db} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_move"
	},
	{
		"documentation": "[redis\\_mset](https://www.mivascript.com/item/mivascript-functions/redis%5Fmset.html)  \n\nredis_mset( conn_id, key, value )\n\nView documentation on redis.io: [redis\\_mset(...) ](https://redis.io/commands/mset \"redis_mset( conn_id, key, value )\")",
		"insertText": "redis_mset( ${1:conn_id}, ${2:key}, ${3:value} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_mset"
	},
	{
		"documentation": "[redis\\_msetnx](https://www.mivascript.com/item/mivascript-functions/redis%5Fmsetnx.html)  \n\nredis_msetnx( conn_id, key, value )\n\nView documentation on redis.io: [redis\\_msetnx(...) ](https://redis.io/commands/msetnx \"redis_msetnx( conn_id, key, value )\")",
		"insertText": "redis_msetnx( ${1:conn_id}, ${2:key}, ${3:value} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_msetnx"
	},
	{
		"documentation": "[redis\\_multi](https://www.mivascript.com/item/mivascript-functions/redis%5Fmulti.html)  \n\nredis_multi( conn_id )\n\nView documentation on redis.io: [redis\\_multi(...) ](https://redis.io/commands/multi \"redis_multi( conn_id )\")",
		"insertText": "redis_multi( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_multi"
	},
	{
		"documentation": "[redis\\_object\\_encoding](https://www.mivascript.com/item/mivascript-functions/redis%5Fobject%5Fencoding.html)  \n\nredis_object_encoding( conn_id, key )\n\nView documentation on redis.io: [redis\\_object\\_encoding(...) ](https://redis.io/commands/object \"redis_object_encoding( conn_id, key )\")",
		"insertText": "redis_object_encoding( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_object_encoding"
	},
	{
		"documentation": "[redis\\_object\\_idletime](https://www.mivascript.com/item/mivascript-functions/redis%5Fobject%5Fidletime.html)  \n\nredis_object_idletime( conn_id, key )\n\nView documentation on redis.io: [redis\\_object\\_idletime(...) ](https://redis.io/commands/object \"redis_object_idletime( conn_id, key )\")",
		"insertText": "redis_object_idletime( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_object_idletime"
	},
	{
		"documentation": "[redis\\_object\\_refcount](https://www.mivascript.com/item/mivascript-functions/redis%5Fobject%5Frefcount.html)  \n\nredis_object_refcount( conn_id, key )\n\nView documentation on redis.io: [redis\\_object\\_refcount(...) ](https://redis.io/commands/object \"redis_object_refcount( conn_id, key )\")",
		"insertText": "redis_object_refcount( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_object_refcount"
	},
	{
		"documentation": "[redis\\_persist](https://www.mivascript.com/item/mivascript-functions/redis%5Fpersist.html)  \n\nredis_persist( conn_id, key )\n\nView documentation on redis.io: [redis\\_persist(...) ](https://redis.io/commands/persist \"redis_persist( conn_id, key )\")",
		"insertText": "redis_persist( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_persist"
	},
	{
		"documentation": "[redis\\_pexpire](https://www.mivascript.com/item/mivascript-functions/redis%5Fpexpire.html)  \n\nredis_pexpire( conn_id, key, milliseconds )\n\nView documentation on redis.io: [redis\\_pexpire(...) ](https://redis.io/commands/pexpire \"redis_pexpire( conn_id, key, milliseconds )\")",
		"insertText": "redis_pexpire( ${1:conn_id}, ${2:key}, ${3:milliseconds} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_pexpire"
	},
	{
		"documentation": "[redis\\_pexpireat](https://www.mivascript.com/item/mivascript-functions/redis%5Fpexpireat.html)  \n\nredis_pexpireat( conn_id, key, milliseconds_timestamp )\n\nView documentation on redis.io: [redis\\_pexpireat(...) ](https://redis.io/commands/pexpireat \"redis_pexpireat( conn_id, key, milliseconds_timestamp )\")",
		"insertText": "redis_pexpireat( ${1:conn_id}, ${2:key}, ${3:milliseconds_timestamp} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_pexpireat"
	},
	{
		"documentation": "[redis\\_pfadd](https://www.mivascript.com/item/mivascript-functions/redis%5Fpfadd.html)  \n\nredis_pfadd( conn_id, key, element )\n\nView documentation on redis.io: [redis\\_pfadd(...) ](https://redis.io/commands/pfadd \"redis_pfadd( conn_id, key, element )\")",
		"insertText": "redis_pfadd( ${1:conn_id}, ${2:key}, ${3:element} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_pfadd"
	},
	{
		"documentation": "[redis\\_pfcount](https://www.mivascript.com/item/mivascript-functions/redis%5Fpfcount.html)  \n\nredis_pfcount( conn_id, key )\n\nView documentation on redis.io: [redis\\_pfcount(...) ](https://redis.io/commands/pfcount \"redis_pfcount( conn_id, key )\")",
		"insertText": "redis_pfcount( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_pfcount"
	},
	{
		"documentation": "[redis\\_pfmerge](https://www.mivascript.com/item/mivascript-functions/redis%5Fpfmerge.html)  \n\nredis_pfmerge( conn_id, destkey, sourcekey )\n\nView documentation on redis.io: [redis\\_pfmerge(...) ](https://redis.io/commands/pfmerge \"redis_pfmerge( conn_id, destkey, sourcekey )\")",
		"insertText": "redis_pfmerge( ${1:conn_id}, ${2:destkey}, ${3:sourcekey} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_pfmerge"
	},
	{
		"documentation": "[redis\\_ping](https://www.mivascript.com/item/mivascript-functions/redis%5Fping.html)  \n\nredis_ping( conn_id )\n\nView documentation on redis.io: [redis\\_ping(...) ](https://redis.io/commands/ping \"redis_ping( conn_id )\")",
		"insertText": "redis_ping( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_ping"
	},
	{
		"documentation": "[redis\\_ping\\_message](https://www.mivascript.com/item/mivascript-functions/redis%5Fping%5Fmessage.html)  \n\nredis_ping_message( conn_id, message )\n\nView documentation on redis.io: [redis\\_ping\\_message(...) ](https://redis.io/commands/ping \"redis_ping_message( conn_id, message )\")",
		"insertText": "redis_ping_message( ${1:conn_id}, ${2:message} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_ping_message"
	},
	{
		"documentation": "[redis\\_pttl](https://www.mivascript.com/item/mivascript-functions/redis%5Fpttl.html)  \n\nredis_pttl( conn_id, key )\n\nView documentation on redis.io: [redis\\_pttl(...) ](https://redis.io/commands/pttl \"redis_pttl( conn_id, key )\")",
		"insertText": "redis_pttl( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_pttl"
	},
	{
		"documentation": "[redis\\_quit](https://www.mivascript.com/item/mivascript-functions/redis%5Fquit.html)  \n\nredis_quit( conn_id )\n\nView documentation on redis.io: [redis\\_quit(...) ](https://redis.io/commands/quit \"redis_quit( conn_id )\")",
		"insertText": "redis_quit( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_quit"
	},
	{
		"documentation": "[redis\\_randomkey](https://www.mivascript.com/item/mivascript-functions/redis%5Frandomkey.html)  \n\nredis_randomkey( conn_id )\n\nView documentation on redis.io: [redis\\_randomkey(...) ](https://redis.io/commands/randomkey \"redis_randomkey( conn_id )\")",
		"insertText": "redis_randomkey( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_randomkey"
	},
	{
		"documentation": "[redis\\_rename](https://www.mivascript.com/item/mivascript-functions/redis%5Frename.html)  \n\nredis_rename( conn_id, key, newkey )\n\nView documentation on redis.io: [redis\\_rename(...) ](https://redis.io/commands/rename \"redis_rename( conn_id, key, newkey )\")",
		"insertText": "redis_rename( ${1:conn_id}, ${2:key}, ${3:newkey} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_rename"
	},
	{
		"documentation": "[redis\\_renamenx](https://www.mivascript.com/item/mivascript-functions/redis%5Frenamenx.html)  \n\nredis_renamenx( conn_id, key, newkey )\n\nView documentation on redis.io: [redis\\_renamenx(...) ](https://redis.io/commands/renamenx \"redis_renamenx( conn_id, key, newkey )\")",
		"insertText": "redis_renamenx( ${1:conn_id}, ${2:key}, ${3:newkey} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_renamenx"
	},
	{
		"documentation": "[redis\\_restore](https://www.mivascript.com/item/mivascript-functions/redis%5Frestore.html)  \n\nredis_restore( conn_id, key, ttl, serialized_value, options var )\n\nView documentation on redis.io: [redis\\_restore(...) ](https://redis.io/commands/restore \"redis_restore( conn_id, key, ttl, serialized_value, options var )\")",
		"insertText": "redis_restore( ${1:conn_id}, ${2:key}, ${3:ttl}, ${4:serialized_value}, ${5:options var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_restore"
	},
	{
		"documentation": "[redis\\_role](https://www.mivascript.com/item/mivascript-functions/redis%5Frole.html)  \n\nredis_role( conn_id, output var )\n\nView documentation on redis.io: [redis\\_role(...) ](https://redis.io/commands/role \"redis_role( conn_id, output var )\")",
		"insertText": "redis_role( ${1:conn_id}, ${2:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_role"
	},
	{
		"documentation": "[redis\\_rpop](https://www.mivascript.com/item/mivascript-functions/redis%5Frpop.html)  \n\nredis_rpop( conn_id, key )\n\nView documentation on redis.io: [redis\\_rpop(...) ](https://redis.io/commands/rpop \"redis_rpop( conn_id, key )\")",
		"insertText": "redis_rpop( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_rpop"
	},
	{
		"documentation": "[redis\\_rpoplpush](https://www.mivascript.com/item/mivascript-functions/redis%5Frpoplpush.html)  \n\nredis_rpoplpush( conn_id, source, destination )\n\nView documentation on redis.io: [redis\\_rpoplpush(...) ](https://redis.io/commands/rpoplpush \"redis_rpoplpush( conn_id, source, destination )\")",
		"insertText": "redis_rpoplpush( ${1:conn_id}, ${2:source}, ${3:destination} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_rpoplpush"
	},
	{
		"documentation": "[redis\\_rpush](https://www.mivascript.com/item/mivascript-functions/redis%5Frpush.html)  \n\nredis_rpush( conn_id, key, value )\n\nView documentation on redis.io: [redis\\_rpush(...) ](https://redis.io/commands/rpush \"redis_rpush( conn_id, key, value )\")",
		"insertText": "redis_rpush( ${1:conn_id}, ${2:key}, ${3:value} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_rpush"
	},
	{
		"documentation": "[redis\\_rpushx](https://www.mivascript.com/item/mivascript-functions/redis%5Frpushx.html)  \n\nredis_rpushx( conn_id, key, value )\n\nView documentation on redis.io: [redis\\_rpushx(...) ](https://redis.io/commands/rpushx \"redis_rpushx( conn_id, key, value )\")",
		"insertText": "redis_rpushx( ${1:conn_id}, ${2:key}, ${3:value} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_rpushx"
	},
	{
		"documentation": "[redis\\_sadd](https://www.mivascript.com/item/mivascript-functions/redis%5Fsadd.html)  \n\nredis_sadd( conn_id, key, member )\n\nView documentation on redis.io: [redis\\_sadd(...) ](https://redis.io/commands/sadd \"redis_sadd( conn_id, key, member )\")",
		"insertText": "redis_sadd( ${1:conn_id}, ${2:key}, ${3:member} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_sadd"
	},
	{
		"documentation": "[redis\\_save](https://www.mivascript.com/item/mivascript-functions/redis%5Fsave.html)  \n\nredis_save( conn_id )\n\nView documentation on redis.io: [redis\\_save(...) ](https://redis.io/commands/save \"redis_save( conn_id )\")",
		"insertText": "redis_save( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_save"
	},
	{
		"documentation": "[redis\\_scan](https://www.mivascript.com/item/mivascript-functions/redis%5Fscan.html)  \n\nredis_scan( conn_id, cursor, options var, output var )\n\nView documentation on redis.io: [redis\\_scan(...) ](https://redis.io/commands/scan \"redis_scan( conn_id, cursor, options var, output var )\")",
		"insertText": "redis_scan( ${1:conn_id}, ${2:cursor}, ${3:options var}, ${4:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_scan"
	},
	{
		"documentation": "[redis\\_scard](https://www.mivascript.com/item/mivascript-functions/redis%5Fscard.html)  \n\nredis_scard( conn_id, key )\n\nView documentation on redis.io: [redis\\_scard(...) ](https://redis.io/commands/scard \"redis_scard( conn_id, key )\")",
		"insertText": "redis_scard( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_scard"
	},
	{
		"documentation": "[redis\\_script\\_exists](https://www.mivascript.com/item/mivascript-functions/redis%5Fscript%5Fexists.html)  \n\nredis_script_exists( conn_id, sha1, output var )\n\nView documentation on redis.io: [redis\\_script\\_exists(...) ](https://redis.io/commands/script-exists \"redis_script_exists( conn_id, sha1, output var )\")",
		"insertText": "redis_script_exists( ${1:conn_id}, ${2:sha1}, ${3:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_script_exists"
	},
	{
		"documentation": "[redis\\_script\\_flush](https://www.mivascript.com/item/mivascript-functions/redis%5Fscript%5Fflush.html)  \n\nredis_script_flush( conn_id )\n\nView documentation on redis.io: [redis\\_script\\_flush(...) ](https://redis.io/commands/script-flush \"redis_script_flush( conn_id )\")",
		"insertText": "redis_script_flush( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_script_flush"
	},
	{
		"documentation": "[redis\\_script\\_kill](https://www.mivascript.com/item/mivascript-functions/redis%5Fscript%5Fkill.html)  \n\nredis_script_kill( conn_id )\n\nView documentation on redis.io: [redis\\_script\\_kill(...) ](https://redis.io/commands/script-kill \"redis_script_kill( conn_id )\")",
		"insertText": "redis_script_kill( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_script_kill"
	},
	{
		"documentation": "[redis\\_script\\_load](https://www.mivascript.com/item/mivascript-functions/redis%5Fscript%5Fload.html)  \n\nredis_script_load( conn_id, script )\n\nView documentation on redis.io: [redis\\_script\\_load(...) ](https://redis.io/commands/script-load \"redis_script_load( conn_id, script )\")",
		"insertText": "redis_script_load( ${1:conn_id}, ${2:script} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_script_load"
	},
	{
		"documentation": "[redis\\_sdiff](https://www.mivascript.com/item/mivascript-functions/redis%5Fsdiff.html)  \n\nredis_sdiff( conn_id, key, output var )\n\nView documentation on redis.io: [redis\\_sdiff(...) ](https://redis.io/commands/sdiff \"redis_sdiff( conn_id, key, output var )\")",
		"insertText": "redis_sdiff( ${1:conn_id}, ${2:key}, ${3:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_sdiff"
	},
	{
		"documentation": "[redis\\_sdiffstore](https://www.mivascript.com/item/mivascript-functions/redis%5Fsdiffstore.html)  \n\nredis_sdiffstore( conn_id, destination, key )\n\nView documentation on redis.io: [redis\\_sdiffstore(...) ](https://redis.io/commands/sdiff \"redis_sdiffstore( conn_id, destination, key )\")",
		"insertText": "redis_sdiffstore( ${1:conn_id}, ${2:destination}, ${3:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_sdiffstore"
	},
	{
		"documentation": "[redis\\_select](https://www.mivascript.com/item/mivascript-functions/redis%5Fselect.html)  \n\nredis_select( conn_id, index )\n\nView documentation on redis.io: [redis\\_select(...) ](https://redis.io/commands/select \"redis_select( conn_id, index )\")",
		"insertText": "redis_select( ${1:conn_id}, ${2:index} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_select"
	},
	{
		"documentation": "[redis\\_set](https://www.mivascript.com/item/mivascript-functions/redis%5Fset.html)  \n\nredis_set( conn_id, key, value, options var )\n\nView documentation on redis.io: [redis\\_set(...) ](https://redis.io/commands/set \"redis_set( conn_id, key, value, options var )\")",
		"insertText": "redis_set( ${1:conn_id}, ${2:key}, ${3:value}, ${4:options var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_set"
	},
	{
		"documentation": "[redis\\_setbit](https://www.mivascript.com/item/mivascript-functions/redis%5Fsetbit.html)  \n\nredis_setbit( conn_id, key, offset, value )\n\nView documentation on redis.io: [redis\\_setbit(...) ](https://redis.io/commands/setbit \"redis_setbit( conn_id, key, offset, value )\")",
		"insertText": "redis_setbit( ${1:conn_id}, ${2:key}, ${3:offset}, ${4:value} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_setbit"
	},
	{
		"documentation": "[redis\\_setrange](https://www.mivascript.com/item/mivascript-functions/redis%5Fsetrange.html)  \n\nredis_setrange( conn_id, key, offset, value )\n\nView documentation on redis.io: [redis\\_setrange(...) ](https://redis.io/commands/setrange \"redis_setrange( conn_id, key, offset, value )\")",
		"insertText": "redis_setrange( ${1:conn_id}, ${2:key}, ${3:offset}, ${4:value} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_setrange"
	},
	{
		"documentation": "[redis\\_shutdown](https://www.mivascript.com/item/mivascript-functions/redis%5Fshutdown.html)  \n\nredis_shutdown( conn_id )\n\nView documentation on redis.io: [redis\\_shutdown(...) ](https://redis.io/commands/shutdown \"redis_shutdown( conn_id )\")",
		"insertText": "redis_shutdown( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_shutdown"
	},
	{
		"documentation": "[redis\\_shutdown\\_nosave](https://www.mivascript.com/item/mivascript-functions/redis%5Fshutdown%5Fnosave.html)  \n\nredis_shutdown_nosave( conn_id )\n\nView documentation on redis.io: [redis\\_shutdown\\_nosave(...) ](https://redis.io/commands/shutdown \"redis_shutdown_nosave( conn_id )\")",
		"insertText": "redis_shutdown_nosave( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_shutdown_nosave"
	},
	{
		"documentation": "[redis\\_shutdown\\_save](https://www.mivascript.com/item/mivascript-functions/redis%5Fshutdown%5Fsave.html)  \n\nredis_shutdown_save( conn_id )\n\nView documentation on redis.io: [redis\\_shutdown\\_save(...) ](https://redis.io/commands/shutdown \"redis_shutdown_save( conn_id )\")",
		"insertText": "redis_shutdown_save( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_shutdown_save"
	},
	{
		"documentation": "[redis\\_sinter](https://www.mivascript.com/item/mivascript-functions/redis%5Fsinter.html)  \n\nredis_sinter( conn_id, key, output var )\n\nView documentation on redis.io: [redis\\_sinter(...) ](https://redis.io/commands/sinter \"redis_sinter( conn_id, key, output var )\")",
		"insertText": "redis_sinter( ${1:conn_id}, ${2:key}, ${3:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_sinter"
	},
	{
		"documentation": "[redis\\_sinterstore](https://www.mivascript.com/item/mivascript-functions/redis%5Fsinterstore.html)  \n\nredis_sinterstore( conn_id, destination, key )\n\nView documentation on redis.io: [redis\\_sinterstore(...) ](https://redis.io/commands/sinter \"redis_sinterstore( conn_id, destination, key )\")",
		"insertText": "redis_sinterstore( ${1:conn_id}, ${2:destination}, ${3:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_sinterstore"
	},
	{
		"documentation": "[redis\\_sismember](https://www.mivascript.com/item/mivascript-functions/redis%5Fsismember.html)  \n\nredis_sismember( conn_id, key, member )\n\nView documentation on redis.io: [redis\\_sismember(...) ](https://redis.io/commands/sismember \"redis_sismember( conn_id, key, member )\")",
		"insertText": "redis_sismember( ${1:conn_id}, ${2:key}, ${3:member} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_sismember"
	},
	{
		"documentation": "[redis\\_slowlog\\_get](https://www.mivascript.com/item/mivascript-functions/redis%5Fslowlog%5Fget.html)  \n\nredis_slowlog_get( conn_id, output var )\n\nView documentation on redis.io: [redis\\_slowlog\\_get(...) ](https://redis.io/commands/slowlog \"redis_slowlog_get( conn_id, output var )\")",
		"insertText": "redis_slowlog_get( ${1:conn_id}, ${2:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_slowlog_get"
	},
	{
		"documentation": "[redis\\_slowlog\\_get\\_count](https://www.mivascript.com/item/mivascript-functions/redis%5Fslowlog%5Fget%5Fcount.html)  \n\nredis_slowlog_get_count( conn_id, count, output var )\n\nView documentation on redis.io: [redis\\_slowlog\\_get\\_count(...) ](https://redis.io/commands/slowlog \"redis_slowlog_get_count( conn_id, count, output var )\")",
		"insertText": "redis_slowlog_get_count( ${1:conn_id}, ${2:count}, ${3:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_slowlog_get_count"
	},
	{
		"documentation": "[redis\\_slowlog\\_len](https://www.mivascript.com/item/mivascript-functions/redis%5Fslowlog%5Flen.html)  \n\nredis_slowlog_len( conn_id )\n\nView documentation on redis.io: [redis\\_slowlog\\_len(...) ](https://redis.io/commands/slowlog \"redis_slowlog_len( conn_id )\")",
		"insertText": "redis_slowlog_len( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_slowlog_len"
	},
	{
		"documentation": "[redis\\_slowlog\\_reset](https://www.mivascript.com/item/mivascript-functions/redis%5Fslowlog%5Freset.html)  \n\nredis_slowlog_reset( conn_id )\n\nView documentation on redis.io: [redis\\_slowlog\\_reset(...) ](https://redis.io/commands/slowlog \"redis_slowlog_reset( conn_id )\")",
		"insertText": "redis_slowlog_reset( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_slowlog_reset"
	},
	{
		"documentation": "[redis\\_smembers](https://www.mivascript.com/item/mivascript-functions/redis%5Fsmembers.html)  \n\nredis_smembers( conn_id, key, output var )\n\nView documentation on redis.io: [redis\\_smembers(...) ](https://redis.io/commands/smembers \"redis_smembers( conn_id, key, output var )\")",
		"insertText": "redis_smembers( ${1:conn_id}, ${2:key}, ${3:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_smembers"
	},
	{
		"documentation": "[redis\\_smove](https://www.mivascript.com/item/mivascript-functions/redis%5Fsmove.html)  \n\nredis_smove( conn_id, source, destination, member )\n\nView documentation on redis.io: [redis\\_smove(...) ](https://redis.io/commands/smove \"redis_smove( conn_id, source, destination, member )\")",
		"insertText": "redis_smove( ${1:conn_id}, ${2:source}, ${3:destination}, ${4:member} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_smove"
	},
	{
		"documentation": "[redis\\_sort](https://www.mivascript.com/item/mivascript-functions/redis%5Fsort.html)  \n\nredis_sort( conn_id, key, options var, output var )\n\nView documentation on redis.io: [redis\\_sort(...) ](https://redis.io/commands/sort \"redis_sort( conn_id, key, options var, output var )\")",
		"insertText": "redis_sort( ${1:conn_id}, ${2:key}, ${3:options var}, ${4:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_sort"
	},
	{
		"documentation": "[redis\\_sortstore](https://www.mivascript.com/item/mivascript-functions/redis%5Fsortstore.html)  \n\nredis_sortstore( conn_id, key, destination, options var )\n\nView documentation on redis.io: [redis\\_sortstore(...) ](https://redis.io/commands/sort \"redis_sortstore( conn_id, key, destination, options var )\")",
		"insertText": "redis_sortstore( ${1:conn_id}, ${2:key}, ${3:destination}, ${4:options var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_sortstore"
	},
	{
		"documentation": "[redis\\_spop](https://www.mivascript.com/item/mivascript-functions/redis%5Fspop.html)  \n\nredis_spop( conn_id, key )\n\nView documentation on redis.io: [redis\\_spop(...) ](https://redis.io/commands/spop \"redis_spop( conn_id, key )\")",
		"insertText": "redis_spop( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_spop"
	},
	{
		"documentation": "[redis\\_spop\\_count](https://www.mivascript.com/item/mivascript-functions/redis%5Fspop%5Fcount.html)  \n\nredis_spop_count( conn_id, key, count, output var )\n\nView documentation on redis.io: [redis\\_spop\\_count(...) ](https://redis.io/commands/spop \"redis_spop_count( conn_id, key, count, output var )\")",
		"insertText": "redis_spop_count( ${1:conn_id}, ${2:key}, ${3:count}, ${4:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_spop_count"
	},
	{
		"documentation": "[redis\\_srandmember](https://www.mivascript.com/item/mivascript-functions/redis%5Fsrandmember.html)  \n\nredis_srandmember( conn_id, key )\n\nView documentation on redis.io: [redis\\_srandmember(...) ](https://redis.io/commands/srandmember \"redis_srandmember( conn_id, key )\")",
		"insertText": "redis_srandmember( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_srandmember"
	},
	{
		"documentation": "[redis\\_srandmember\\_count](https://www.mivascript.com/item/mivascript-functions/redis%5Fsrandmember%5Fcount.html)  \n\nredis_srandmember_count( conn_id, key, count, output var )\n\nView documentation on redis.io: [redis\\_srandmember\\_count(...) ](https://redis.io/commands/srandmember \"redis_srandmember_count( conn_id, key, count, output var )\")",
		"insertText": "redis_srandmember_count( ${1:conn_id}, ${2:key}, ${3:count}, ${4:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_srandmember_count"
	},
	{
		"documentation": "[redis\\_srem](https://www.mivascript.com/item/mivascript-functions/redis%5Fsrem.html)  \n\nredis_srem( conn_id, key, member )\n\nView documentation on redis.io: [redis\\_srem(...) ](https://redis.io/commands/srem \"redis_srem( conn_id, key, member )\")",
		"insertText": "redis_srem( ${1:conn_id}, ${2:key}, ${3:member} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_srem"
	},
	{
		"documentation": "[redis\\_sscan](https://www.mivascript.com/item/mivascript-functions/redis%5Fsscan.html)  \n\nredis_sscan( conn_id, key, cursor, options var, output var )\n\nView documentation on redis.io: [redis\\_sscan(...) ](https://redis.io/commands/sscan \"redis_sscan( conn_id, key, cursor, options var, output var )\")",
		"insertText": "redis_sscan( ${1:conn_id}, ${2:key}, ${3:cursor}, ${4:options var}, ${5:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_sscan"
	},
	{
		"documentation": "[redis\\_strlen](https://www.mivascript.com/item/mivascript-functions/redis%5Fstrlen.html)  \n\nredis_strlen( conn_id, key )\n\nView documentation on redis.io: [redis\\_strlen(...) ](https://redis.io/commands/strlen \"redis_strlen( conn_id, key )\")",
		"insertText": "redis_strlen( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_strlen"
	},
	{
		"documentation": "[redis\\_sunion](https://www.mivascript.com/item/mivascript-functions/redis%5Fsunion.html)  \n\nredis_sunion( conn_id, key, output var )\n\nView documentation on redis.io: [redis\\_sunion(...) ](https://redis.io/commands/sunion \"redis_sunion( conn_id, key, output var )\")",
		"insertText": "redis_sunion( ${1:conn_id}, ${2:key}, ${3:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_sunion"
	},
	{
		"documentation": "[redis\\_sunionstore](https://www.mivascript.com/item/mivascript-functions/redis%5Fsunionstore.html)  \n\nredis_sunionstore( conn_id, destination, key )\n\nView documentation on redis.io: [redis\\_sunionstore(...) ](https://redis.io/commands/sunion \"redis_sunionstore( conn_id, destination, key )\")",
		"insertText": "redis_sunionstore( ${1:conn_id}, ${2:destination}, ${3:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_sunionstore"
	},
	{
		"documentation": "[redis\\_time](https://www.mivascript.com/item/mivascript-functions/redis%5Ftime.html)  \n\nredis_time( conn_id, output var )\n\nView documentation on redis.io: [redis\\_time(...) ](https://redis.io/commands/time \"redis_time( conn_id, output var )\")",
		"insertText": "redis_time( ${1:conn_id}, ${2:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_time"
	},
	{
		"documentation": "[redis\\_touch](https://www.mivascript.com/item/mivascript-functions/redis%5Ftouch.html)  \n\nredis_touch( conn_id, key )\n\nView documentation on redis.io: [redis\\_touch(...) ](https://redis.io/commands/touch \"redis_touch( conn_id, key )\")",
		"insertText": "redis_touch( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_touch"
	},
	{
		"documentation": "[redis\\_ttl](https://www.mivascript.com/item/mivascript-functions/redis%5Fttl.html)  \n\nredis_ttl( conn_id, key )\n\nView documentation on redis.io: [redis\\_ttl(...) ](https://redis.io/commands/ttl \"redis_ttl( conn_id, key )\")",
		"insertText": "redis_ttl( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_ttl"
	},
	{
		"documentation": "[redis\\_type](https://www.mivascript.com/item/mivascript-functions/redis%5Ftype.html)  \n\nredis_type( conn_id, key )\n\nView documentation on redis.io: [redis\\_type(...) ](https://redis.io/commands/type \"redis_type( conn_id, key )\")",
		"insertText": "redis_type( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_type"
	},
	{
		"documentation": "[redis\\_unwatch](https://www.mivascript.com/item/mivascript-functions/redis%5Funwatch.html)  \n\nredis_unwatch( conn_id )\n\nView documentation on redis.io: [redis\\_unwatch(...) ](https://redis.io/commands/unwatch \"redis_unwatch( conn_id )\")",
		"insertText": "redis_unwatch( ${1:conn_id} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_unwatch"
	},
	{
		"documentation": "[redis\\_watch](https://www.mivascript.com/item/mivascript-functions/redis%5Fwatch.html)  \n\nredis_watch( conn_id, key )\n\nView documentation on redis.io: [redis\\_watch(...) ](https://redis.io/commands/watch \"redis_watch( conn_id, key )\")",
		"insertText": "redis_watch( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_watch"
	},
	{
		"documentation": "[redis\\_zadd](https://www.mivascript.com/item/mivascript-functions/redis%5Fzadd.html)  \n\nredis_zadd( conn_id, key, score, member, options var )\n\nView documentation on redis.io: [redis\\_zadd(...) ](https://redis.io/commands/zadd \"redis_zadd( conn_id, key, score, member, options var )\")",
		"insertText": "redis_zadd( ${1:conn_id}, ${2:key}, ${3:score}, ${4:member}, ${5:options var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_zadd"
	},
	{
		"documentation": "[redis\\_zcard](https://www.mivascript.com/item/mivascript-functions/redis%5Fzcard.html)  \n\nredis_zcard( conn_id, key )\n\nView documentation on redis.io: [redis\\_zcard(...) ](https://redis.io/commands/zcard \"redis_zcard( conn_id, key )\")",
		"insertText": "redis_zcard( ${1:conn_id}, ${2:key} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_zcard"
	},
	{
		"documentation": "[redis\\_zcount](https://www.mivascript.com/item/mivascript-functions/redis%5Fzcount.html)  \n\nredis_zcount( conn_id, key, min, max )\n\nView documentation on redis.io: [redis\\_zcount(...) ](https://redis.io/commands/zcount \"redis_zcount( conn_id, key, min, max )\")",
		"insertText": "redis_zcount( ${1:conn_id}, ${2:key}, ${3:min}, ${4:max} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_zcount"
	},
	{
		"documentation": "[redis\\_zincrby](https://www.mivascript.com/item/mivascript-functions/redis%5Fzincrby.html)  \n\nredis_zincrby( conn_id, key, increment, member )\n\nView documentation on redis.io: [redis\\_zincrby(...) ](https://redis.io/commands/zincrby \"redis_zincrby( conn_id, key, increment, member )\")",
		"insertText": "redis_zincrby( ${1:conn_id}, ${2:key}, ${3:increment}, ${4:member} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_zincrby"
	},
	{
		"documentation": "[redis\\_zinterstore](https://www.mivascript.com/item/mivascript-functions/redis%5Fzinterstore.html)  \n\nredis_zinterstore( conn_id, destination, key, options var )\n\nView documentation on redis.io: [redis\\_zinterstore(...) ](https://redis.io/commands/zinterstore \"redis_zinterstore( conn_id, destination, key, options var )\")",
		"insertText": "redis_zinterstore( ${1:conn_id}, ${2:destination}, ${3:key}, ${4:options var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_zinterstore"
	},
	{
		"documentation": "[redis\\_zlexcount](https://www.mivascript.com/item/mivascript-functions/redis%5Fzlexcount.html)  \n\nredis_zlexcount( conn_id, key, min, max )\n\nView documentation on redis.io: [redis\\_zlexcount(...) ](https://redis.io/commands/zlexcount \"redis_zlexcount( conn_id, key, min, max )\")",
		"insertText": "redis_zlexcount( ${1:conn_id}, ${2:key}, ${3:min}, ${4:max} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_zlexcount"
	},
	{
		"documentation": "[redis\\_zrange](https://www.mivascript.com/item/mivascript-functions/redis%5Fzrange.html)  \n\nredis_zrange( conn_id, key, start, stop, options var, output var )\n\nView documentation on redis.io: [redis\\_zrange(...) ](https://redis.io/commands/zrange \"redis_zrange( conn_id, key, start, stop, options var, output var )\")",
		"insertText": "redis_zrange( ${1:conn_id}, ${2:key}, ${3:start}, ${4:stop}, ${5:options var}, ${6:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_zrange"
	},
	{
		"documentation": "[redis\\_zrangebylex](https://www.mivascript.com/item/mivascript-functions/redis%5Fzrangebylex.html)  \n\nredis_zrangebylex( conn_id, key, min, max, options var, output var )\n\nView documentation on redis.io: [redis\\_zrangebylex(...) ](https://redis.io/commands/zrangebylex \"redis_zrangebylex( conn_id, key, min, max, options var, output var )\")",
		"insertText": "redis_zrangebylex( ${1:conn_id}, ${2:key}, ${3:min}, ${4:max}, ${5:options var}, ${6:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_zrangebylex"
	},
	{
		"documentation": "[redis\\_zrangebyscore](https://www.mivascript.com/item/mivascript-functions/redis%5Fzrangebyscore.html)  \n\nredis_zrangebyscore( conn_id, key, min, max, options var, output var )\n\nView documentation on redis.io: [redis\\_zrangebyscore(...) ](https://redis.io/commands/zrangebyscore \"redis_zrangebyscore( conn_id, key, min, max, options var, output var )\")",
		"insertText": "redis_zrangebyscore( ${1:conn_id}, ${2:key}, ${3:min}, ${4:max}, ${5:options var}, ${6:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_zrangebyscore"
	},
	{
		"documentation": "[redis\\_zrank](https://www.mivascript.com/item/mivascript-functions/redis%5Fzrank.html)  \n\nredis_zrank( conn_id, key, member )\n\nView documentation on redis.io: [redis\\_zrank(...) ](https://redis.io/commands/zrank \"redis_zrank( conn_id, key, member )\")",
		"insertText": "redis_zrank( ${1:conn_id}, ${2:key}, ${3:member} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_zrank"
	},
	{
		"documentation": "[redis\\_zrem](https://www.mivascript.com/item/mivascript-functions/redis%5Fzrem.html)  \n\nredis_zrem( conn_id, key, member )\n\nView documentation on redis.io: [redis\\_zrem(...) ](https://redis.io/commands/zrem \"redis_zrem( conn_id, key, member )\")",
		"insertText": "redis_zrem( ${1:conn_id}, ${2:key}, ${3:member} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_zrem"
	},
	{
		"documentation": "[redis\\_zremrangebylex](https://www.mivascript.com/item/mivascript-functions/redis%5Fzremrangebylex.html)  \n\nredis_zremrangebylex( conn_id, key, min, max )\n\nView documentation on redis.io: [redis\\_zremrangebylex(...) ](https://redis.io/commands/zremrangebylex \"redis_zremrangebylex( conn_id, key, min, max )\")",
		"insertText": "redis_zremrangebylex( ${1:conn_id}, ${2:key}, ${3:min}, ${4:max} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_zremrangebylex"
	},
	{
		"documentation": "[redis\\_zremrangebyrank](https://www.mivascript.com/item/mivascript-functions/redis%5Fzremrangebyrank.html)  \n\nredis_zremrangebyrank( conn_id, key, start, stop )\n\nView documentation on redis.io: [redis\\_zremrangebyrank(...) ](https://redis.io/commands/zremrangebyrank \"redis_zremrangebyrank( conn_id, key, start, stop )\")",
		"insertText": "redis_zremrangebyrank( ${1:conn_id}, ${2:key}, ${3:start}, ${4:stop} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_zremrangebyrank"
	},
	{
		"documentation": "[redis\\_zremrangebyscore](https://www.mivascript.com/item/mivascript-functions/redis%5Fzremrangebyscore.html)  \n\nredis_zremrangebyscore( conn_id, key, min, max )\n\nView documentation on redis.io: [redis\\_zremrangebyscore(...) ](https://redis.io/commands/zremrangebyscore \"redis_zremrangebyscore( conn_id, key, min, max )\")",
		"insertText": "redis_zremrangebyscore( ${1:conn_id}, ${2:key}, ${3:min}, ${4:max} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_zremrangebyscore"
	},
	{
		"documentation": "[redis\\_zrevrange](https://www.mivascript.com/item/mivascript-functions/redis%5Fzrevrange.html)  \n\nredis_zrevrange( conn_id, key, start, stop, options var, output var )\n\nView documentation on redis.io: [redis\\_zrevrange(...) ](https://redis.io/commands/zrevrange \"redis_zrevrange( conn_id, key, start, stop, options var, output var )\")",
		"insertText": "redis_zrevrange( ${1:conn_id}, ${2:key}, ${3:start}, ${4:stop}, ${5:options var}, ${6:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_zrevrange"
	},
	{
		"documentation": "[redis\\_zrevrangebylex](https://www.mivascript.com/item/mivascript-functions/redis%5Fzrevrangebylex.html)  \n\nredis_zrevrangebylex( conn_id, key, max, min, options var, output var )\n\nView documentation on redis.io: [redis\\_zrevrangebylex(...) ](https://redis.io/commands/zrevrangebylex \"redis_zrevrangebylex( conn_id, key, max, min, options var, output var )\")",
		"insertText": "redis_zrevrangebylex( ${1:conn_id}, ${2:key}, ${3:max}, ${4:min}, ${5:options var}, ${6:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_zrevrangebylex"
	},
	{
		"documentation": "[redis\\_zrevrangebyscore](https://www.mivascript.com/item/mivascript-functions/redis%5Fzrevrangebyscore.html)  \n\nredis_zrevrangebyscore( conn_id, key, max, min, optoins var, output var )\n\nView documentation on redis.io: [redis\\_zrevrangebyscore(...) ](https://redis.io/commands/zrevrangebyscore \"redis_zrevrangebyscore( conn_id, key, max, min, optoins var, output var )\")",
		"insertText": "redis_zrevrangebyscore( ${1:conn_id}, ${2:key}, ${3:max}, ${4:min}, ${5:optoins var}, ${6:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_zrevrangebyscore"
	},
	{
		"documentation": "[redis\\_zrevrank](https://www.mivascript.com/item/mivascript-functions/redis%5Fzrevrank.html)  \n\nredis_zrevrank( conn_id, key, member )\n\nView documentation on redis.io: [redis\\_zrevrank(...) ](https://redis.io/commands/zrevrank \"redis_zrevrank( conn_id, key, member )\")",
		"insertText": "redis_zrevrank( ${1:conn_id}, ${2:key}, ${3:member} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_zrevrank"
	},
	{
		"documentation": "[redis\\_zscan](https://www.mivascript.com/item/mivascript-functions/redis%5Fzscan.html)  \n\nredis_zscan( conn_id, key, cursor, options var, output var )\n\nView documentation on redis.io: [redis\\_zscan(...) ](https://redis.io/commands/zscan \"redis_zscan( conn_id, key, cursor, options var, output var )\")",
		"insertText": "redis_zscan( ${1:conn_id}, ${2:key}, ${3:cursor}, ${4:options var}, ${5:output var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_zscan"
	},
	{
		"documentation": "[redis\\_zscore](https://www.mivascript.com/item/mivascript-functions/redis%5Fzscore.html)  \n\nredis_zscore( conn_id, key, member )\n\nView documentation on redis.io: [redis\\_zscore(...) ](https://redis.io/commands/zscore \"redis_zscore( conn_id, key, member )\")",
		"insertText": "redis_zscore( ${1:conn_id}, ${2:key}, ${3:member} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_zscore"
	},
	{
		"documentation": "[redis\\_zunionstore](https://www.mivascript.com/item/mivascript-functions/redis%5Fzunionstore.html)  \n\nredis_zunionstore( conn_id, destination, key, options var )\n\nView documentation on redis.io: [redis\\_zunionstore(...) ](https://redis.io/commands/zunionstore \"redis_zunionstore( conn_id, destination, key, options var )\")",
		"insertText": "redis_zunionstore( ${1:conn_id}, ${2:destination}, ${3:key}, ${4:options var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "redis_zunionstore"
	},
	{
		"documentation": "[miva\\_struct\\_member\\_callback](https://www.mivascript.com/item/mivascript-functions/miva%5Fstruct%5Fmember%5Fcallback.html)  \n\nmiva_struct_member_callback( struct var, function, data var )\n\nThis function can be used to dynamically populate structure members as they are accessed.\n\nReturn Value: Empty\n\n* struct = The structure that had the member accessed\n* function = a string containing the callback function name that will be triggered when a member does not exist in the structure (if the callback function is empty, the callback will be disabled)\n* data = The data that will be passed to the callback function",
		"insertText": "miva_struct_member_callback( ${1:struct var}, ${2:function}, ${3:data var} )$0",
		"insertTextFormat": "Snippet",
		"kind": "Function",
		"label": "miva_struct_member_callback"
	}
]