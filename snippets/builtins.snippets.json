{
    "abs": {
        "prefix": "abs",
        "body": "abs( ${1:number} )$0",
        "scope": "source.mvt, source.mv"
    },
    "acos": {
        "prefix": "acos",
        "body": "acos( ${1:number} )$0",
        "scope": "source.mvt, source.mv"
    },
    "asciichar": {
        "prefix": "asciichar",
        "body": "asciichar( ${1:number} )$0",
        "scope": "source.mvt, source.mv"
    },
    "asciivalue": {
        "prefix": "asciivalue",
        "body": "asciivalue( ${1:character} )$0",
        "scope": "source.mvt, source.mv"
    },
    "asin": {
        "prefix": "asin",
        "body": "asin( ${1:number} )$0",
        "scope": "source.mvt, source.mv"
    },
    "atan": {
        "prefix": "atan",
        "body": "atan( ${1:number} )$0",
        "scope": "source.mvt, source.mv"
    },
    "atan2": {
        "prefix": "atan2",
        "body": "atan2( ${1:x}, ${2:y} )$0",
        "scope": "source.mvt, source.mv"
    },
    "bf_decrypt": {
        "prefix": "bf_decrypt",
        "body": "bf_decrypt( ${1:key}, ${2:encrypted}, ${3:plaintext var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "bf_encrypt": {
        "prefix": "bf_encrypt",
        "body": "bf_encrypt( ${1:key}, ${2:plaintext}, ${3:encrypted var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "ceil": {
        "prefix": "ceil",
        "body": "ceil( ${1:number} )$0",
        "scope": "source.mvt, source.mv"
    },
    "cos": {
        "prefix": "cos",
        "body": "cos( ${1:number} )$0",
        "scope": "source.mvt, source.mv"
    },
    "cosh": {
        "prefix": "cosh",
        "body": "cosh( ${1:number} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_base64_decode": {
        "prefix": "crypto_base64_decode",
        "body": "crypto_base64_decode( ${1:data} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_base64_encode": {
        "prefix": "crypto_base64_encode",
        "body": "crypto_base64_encode( ${1:data} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_cipher_block_size": {
        "prefix": "crypto_cipher_block_size",
        "body": "crypto_cipher_block_size( ${1:ciphername} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_cipher_iv_length": {
        "prefix": "crypto_cipher_iv_length",
        "body": "crypto_cipher_iv_length( ${1:ciphername} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_cipher_key_length": {
        "prefix": "crypto_cipher_key_length",
        "body": "crypto_cipher_key_length( ${1:ciphername} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_cipher_mode": {
        "prefix": "crypto_cipher_mode",
        "body": "crypto_cipher_mode( ${1:ciphername} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_clear_error": {
        "prefix": "crypto_clear_error",
        "body": "crypto_clear_error()$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_digest_block_size": {
        "prefix": "crypto_digest_block_size",
        "body": "crypto_digest_block_size( ${1:digestname} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_digest_size": {
        "prefix": "crypto_digest_size",
        "body": "crypto_digest_size( ${1:digestname} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_evp_decrypt": {
        "prefix": "crypto_evp_decrypt",
        "body": "crypto_evp_decrypt( ${1:ciphername}, ${2:key}, ${3:iv}, ${4:encrypted}, ${5:plaintext var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_evp_digest": {
        "prefix": "crypto_evp_digest",
        "body": "crypto_evp_digest( ${1:digestname}, ${2:buffer var}, ${3:digest var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_evp_encrypt": {
        "prefix": "crypto_evp_encrypt",
        "body": "crypto_evp_encrypt( ${1:ciphername}, ${2:key}, ${3:iv}, ${4:plaintext}, ${5:encrypted var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_evp_encrypt_auth": {
        "prefix": "crypto_evp_encrypt_auth",
        "body": "crypto_evp_encrypt_auth( ${1:ciphername}, ${2:key}, ${3:iv}, ${4:aad}, ${5:plaintext}, ${6:encrypted var}, ${7:tag var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_evp_hmac": {
        "prefix": "crypto_evp_hmac",
        "body": "crypto_evp_hmac( ${1:digestname}, ${2:key}, ${3:buffer var}, ${4:digest var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_evp_sign": {
        "prefix": "crypto_evp_sign",
        "body": "crypto_evp_sign( ${1:digestname}, ${2:privkey}, ${3:buffer}, ${4:signature var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_evp_verify": {
        "prefix": "crypto_evp_verify",
        "body": "crypto_evp_verify( ${1:digestname}, ${2:pubkey}, ${3:buffer}, ${4:signature} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_hmac_md5": {
        "prefix": "crypto_hmac_md5",
        "body": "crypto_hmac_md5( ${1:buffer var}, ${2:key}, ${3|'hex','binary'|}, ${4:result var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_hmac_sha1": {
        "prefix": "crypto_hmac_sha1",
        "body": "crypto_hmac_sha1( ${1:value}, ${2:key}, ${3|'hex','binary'|}, ${4:output} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_hmac_sha256": {
        "prefix": "crypto_hmac_sha256",
        "body": "crypto_hmac_sha256( ${1:buffer var}, ${2:key}, ${3|'hex','binary'|}, ${4:result var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_last_error": {
        "prefix": "crypto_last_error",
        "body": "crypto_last_error()$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_last_ssl_error": {
        "prefix": "crypto_last_ssl_error",
        "body": "crypto_last_ssl_error()$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_library_version": {
        "prefix": "crypto_library_version",
        "body": "crypto_library_version( ${1:info} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_md5": {
        "prefix": "crypto_md5",
        "body": "crypto_md5( ${1:buffer} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_md5_file": {
        "prefix": "crypto_md5_file",
        "body": "crypto_md5_file( ${1:file}, ${2|'script','data'|}, ${3:hash var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_next_error": {
        "prefix": "crypto_next_error",
        "body": "crypto_next_error()$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_pbkdf1": {
        "prefix": "crypto_pbkdf1",
        "body": "crypto_pbkdf1( ${1|'md2','md5','sha1'|}, ${2:password}, ${3:salt}, ${4:iterations}, ${5:dklen}, ${6:dk var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_pbkdf2": {
        "prefix": "crypto_pbkdf2",
        "body": "crypto_pbkdf2( ${1|'md2','md5','sha1'|}, ${2:password}, ${3:salt}, ${4:iterations}, ${5:dklen}, ${6:dk var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_rand_bytes": {
        "prefix": "crypto_rand_bytes",
        "body": "crypto_rand_bytes( ${1:n} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_rand_set_rand_engine": {
        "prefix": "crypto_rand_set_rand_engine",
        "body": "crypto_rand_set_rand_engine( ${1:engine} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_sha1": {
        "prefix": "crypto_sha1",
        "body": "crypto_sha1( ${1:buffer var}, ${2|'hex','binary'|}, ${3:result var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_sha256": {
        "prefix": "crypto_sha256",
        "body": "crypto_sha256( ${1:buffer var}, ${2|'hex','binary'|}, ${3:result var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "crypto_xor": {
        "prefix": "crypto_xor",
        "body": "crypto_xor( ${1:buffer var}, ${2:dest var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "decodeattribute": {
        "prefix": "decodeattribute",
        "body": "decodeattribute( ${1:attribute} )$0",
        "scope": "source.mvt, source.mv"
    },
    "decodeentities": {
        "prefix": "decodeentities",
        "body": "decodeentities( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "dir": {
        "prefix": "dir",
        "body": "dir( ${1:path}, ${2|'script','data'|}, ${3:entries var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "encodeattribute": {
        "prefix": "encodeattribute",
        "body": "encodeattribute( ${1:attribute} )$0",
        "scope": "source.mvt, source.mv"
    },
    "encodeentities": {
        "prefix": "encodeentities",
        "body": "encodeentities( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "encodejavascriptstring": {
        "prefix": "encodejavascriptstring",
        "body": "encodejavascriptstring( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "evp_pkey_derive": {
        "prefix": "evp_pkey_derive",
        "body": "evp_pkey_derive( ${1:privkey var}, ${2:peer var}, ${3:key var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "evp_pkey_free": {
        "prefix": "evp_pkey_free",
        "body": "evp_pkey_free( ${1:key var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "evp_pkey_load_mem": {
        "prefix": "evp_pkey_load_mem",
        "body": "evp_pkey_load_mem( ${1:data}, 'pkcs12', ${2:passphrase}, ${3:pkey var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "evp_pkey_load_pubkey_mem": {
        "prefix": "evp_pkey_load_pubkey_mem",
        "body": "evp_pkey_load_pubkey_mem( ${1:data}, ${2|'pem','der'|}, ${3:pkey var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "evp_pkey_load_pubkey_x509": {
        "prefix": "evp_pkey_load_pubkey_x509",
        "body": "evp_pkey_load_pubkey_x509( ${1:x509 var}, ${2:pkey var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "exp": {
        "prefix": "exp",
        "body": "exp( ${1:number} )$0",
        "scope": "source.mvt, source.mv"
    },
    "fchmod": {
        "prefix": "fchmod",
        "body": "fchmod( ${1:path}, ${2:mode} )$0",
        "scope": "source.mvt, source.mv"
    },
    "fcopy": {
        "prefix": "fcopy",
        "body": "fcopy( ${1:source}, ${2:destination} )$0",
        "scope": "source.mvt, source.mv"
    },
    "fdelete": {
        "prefix": "fdelete",
        "body": "fdelete( ${1:path} )$0",
        "scope": "source.mvt, source.mv"
    },
    "fexists": {
        "prefix": "fexists",
        "body": "fexists( ${1:path} )$0",
        "scope": "source.mvt, source.mv"
    },
    "file_append": {
        "prefix": "file_append",
        "body": "file_append( ${1:path}, ${2|'data','script'|}, ${3:data var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "file_create": {
        "prefix": "file_create",
        "body": "file_create( ${1:path}, ${2|'data','script'|}, ${3:data var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "file_overwrite": {
        "prefix": "file_overwrite",
        "body": "file_overwrite( ${1:path}, ${2|'data','script'|}, ${3:data var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "file_read": {
        "prefix": "file_read",
        "body": "file_read( ${1:path}, ${2|'data','script'|}, ${3:data var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "file_read_bytes": {
        "prefix": "file_read_bytes",
        "body": "file_read_bytes( ${1:path}, ${2|'data','script'|}, ${3:offset}, ${4:length}, ${5:data} )$0",
        "scope": "source.mvt, source.mv"
    },
    "file_set_time": {
        "prefix": "file_set_time",
        "body": "file_set_time( ${1:path}, ${2|'data','script'|}, ${3:modified} )$0",
        "scope": "source.mvt, source.mv"
    },
    "file_touch": {
        "prefix": "file_touch",
        "body": "file_touch( ${1:file}, ${2|'data','script'|} )$0",
        "scope": "source.mvt, source.mv"
    },
    "fisdir": {
        "prefix": "fisdir",
        "body": "fisdir( ${1:path} )$0",
        "scope": "source.mvt, source.mv"
    },
    "floor": {
        "prefix": "floor",
        "body": "floor( ${1:number} )$0",
        "scope": "source.mvt, source.mv"
    },
    "fmkdir": {
        "prefix": "fmkdir",
        "body": "fmkdir( ${1:path} )$0",
        "scope": "source.mvt, source.mv"
    },
    "fmod": {
        "prefix": "fmod",
        "body": "fmod( ${1:x}, ${2:y} )$0",
        "scope": "source.mvt, source.mv"
    },
    "fmode": {
        "prefix": "fmode",
        "body": "fmode( ${1:path} )$0",
        "scope": "source.mvt, source.mv"
    },
    "frename": {
        "prefix": "frename",
        "body": "frename( ${1:source}, ${2:destination} )$0",
        "scope": "source.mvt, source.mv"
    },
    "fscopy": {
        "prefix": "fscopy",
        "body": "fscopy( ${1:data_source}, ${2:script_destination} )$0",
        "scope": "source.mvt, source.mv"
    },
    "fsize": {
        "prefix": "fsize",
        "body": "fsize( ${1:path} )$0",
        "scope": "source.mvt, source.mv"
    },
    "fsrename": {
        "prefix": "fsrename",
        "body": "fsrename( ${1:source}, ${2:destination} )$0",
        "scope": "source.mvt, source.mv"
    },
    "fsymlink": {
        "prefix": "fsymlink",
        "body": "fsymlink( ${1:source}, ${2:destination} )$0",
        "scope": "source.mvt, source.mv"
    },
    "fssymlink": {
        "prefix": "fssymlink",
        "body": "fssymlink( ${1:source}, ${2:destination} )$0",
        "scope": "source.mvt, source.mv"
    },
    "ftime": {
        "prefix": "ftime",
        "body": "ftime( ${1:path} )$0",
        "scope": "source.mvt, source.mv"
    },
    "gettoken": {
        "prefix": "gettoken",
        "body": "gettoken( ${1:delimited_string}, ${2:character}, ${3:position} )$0",
        "scope": "source.mvt, source.mv"
    },
    "glosub": {
        "prefix": "glosub",
        "body": "glosub( ${1:target_string}, ${2:search}, ${3:replace} )$0",
        "scope": "source.mvt, source.mv"
    },
    "glosub_array": {
        "prefix": "glosub_array",
        "body": "glosub_array( ${1:string}, ${2:search}, ${3:replace} )$0",
        "scope": "source.mvt, source.mv"
    },
    "indexof": {
        "prefix": "indexof",
        "body": "indexof( ${1:search_string}, ${2:target_string var}, ${3:start_number} )$0",
        "scope": "source.mvt, source.mv"
    },
    "indexofi": {
        "prefix": "indexofi",
        "body": "indexofi( ${1:search_string}, ${2:target_string var}, ${3:start_number} )$0",
        "scope": "source.mvt, source.mv"
    },
    "indexofl": {
        "prefix": "indexofl",
        "body": "indexofl( ${1:needle}, ${2:haystack var}, ${3:offset} )$0",
        "scope": "source.mvt, source.mv"
    },
    "indexofli": {
        "prefix": "indexofli",
        "body": "indexofli( ${1:needle}, ${2:haystack var}, ${3:offset} )$0",
        "scope": "source.mvt, source.mv"
    },
    "int": {
        "prefix": "int",
        "body": "int( ${1:number} )$0",
        "scope": "source.mvt, source.mv"
    },
    "isalnum": {
        "prefix": "isalnum",
        "body": "isalnum( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "isalpha": {
        "prefix": "isalpha",
        "body": "isalpha( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "isascii": {
        "prefix": "isascii",
        "body": "isascii( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "iscntrl": {
        "prefix": "iscntrl",
        "body": "iscntrl( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "isdigit": {
        "prefix": "isdigit",
        "body": "isdigit( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "isgraph": {
        "prefix": "isgraph",
        "body": "isgraph( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "islower": {
        "prefix": "islower",
        "body": "islower( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "isprint": {
        "prefix": "isprint",
        "body": "isprint( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "ispunct": {
        "prefix": "ispunct",
        "body": "ispunct( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "isspace": {
        "prefix": "isspace",
        "body": "isspace( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "isupper": {
        "prefix": "isupper",
        "body": "isupper( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "isxdigit": {
        "prefix": "isxdigit",
        "body": "isxdigit( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "keyword_extract": {
        "prefix": "keyword_extract",
        "body": "keyword_extract( ${1:string}, ${2:keywords var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "keyword_extract_merge": {
        "prefix": "keyword_extract_merge",
        "body": "keyword_extract_merge( ${1:string}, ${2:weight} )$0",
        "scope": "source.mvt, source.mv"
    },
    "keyword_extract_merge_init": {
        "prefix": "keyword_extract_merge_init",
        "body": "keyword_extract_merge_init()$0",
        "scope": "source.mvt, source.mv"
    },
    "keyword_extract_merge_results": {
        "prefix": "keyword_extract_merge_results",
        "body": "keyword_extract_merge_results( ${1:keywords var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "keyword_in": {
        "prefix": "keyword_in",
        "body": "keyword_in( ${1:keywords_array var}, ${2:search_string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "len": {
        "prefix": "len",
        "body": "len( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "len_var": {
        "prefix": "len_var",
        "body": "len_var( ${1:string var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "log": {
        "prefix": "log",
        "body": "log( ${1:number} )$0",
        "scope": "source.mvt, source.mv"
    },
    "log10": {
        "prefix": "log10",
        "body": "log10( ${1:number} )$0",
        "scope": "source.mvt, source.mv"
    },
    "ltrim": {
        "prefix": "ltrim",
        "body": "ltrim( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "makesessionid": {
        "prefix": "makesessionid",
        "body": "makesessionid()$0",
        "scope": "source.mvt, source.mv"
    },
    "max": {
        "prefix": "max",
        "body": "max( ${1:a}, ${2:b} )$0",
        "scope": "source.mvt, source.mv"
    },
    "min": {
        "prefix": "min",
        "body": "min( ${1:a}, ${2:b} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_binarysearch": {
        "prefix": "miva_array_binarysearch",
        "body": "miva_array_binarysearch( ${1:key}, ${2:array var}, ${3:callback}, ${4:data var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_clear": {
        "prefix": "miva_array_clear",
        "body": "miva_array_clear( ${1:array var}, ${2:start}, ${3:count} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_collapse": {
        "prefix": "miva_array_collapse",
        "body": "miva_array_collapse( ${1:array var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_copy": {
        "prefix": "miva_array_copy",
        "body": "miva_array_copy( ${1:source var}, ${2:sstart}, ${3:scount}, ${4:dest var}, ${5:dpos} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_copy_ref": {
        "prefix": "miva_array_copy_ref",
        "body": "miva_array_copy_ref( ${1:source var}, ${2:sstart}, ${3:scount}, ${4:dest var}, ${5:dpos} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_delete": {
        "prefix": "miva_array_delete",
        "body": "miva_array_delete( ${1:array var}, ${2:start}, ${3:count} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_deserialize": {
        "prefix": "miva_array_deserialize",
        "body": "miva_array_deserialize( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_elements": {
        "prefix": "miva_array_elements",
        "body": "miva_array_elements( ${1:aggregate var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_filter": {
        "prefix": "miva_array_filter",
        "body": "miva_array_filter( ${1:array var}, ${2:offset}, ${3:element var}, ${4:filter_expression}, ${5:output var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_filter_ref": {
        "prefix": "miva_array_filter_ref",
        "body": "miva_array_filter_ref( ${1:array var}, ${2:offset}, ${3:element var}, ${4:filter_expression}, ${5:output var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_find": {
        "prefix": "miva_array_find",
        "body": "miva_array_find( ${1:needle}, ${2:haystack var}, ${3:offset} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_insert": {
        "prefix": "miva_array_insert",
        "body": "miva_array_insert( ${1:array var}, ${2:element}, ${3:pos} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_insert_ref": {
        "prefix": "miva_array_insert_ref",
        "body": "miva_array_insert_ref( ${1:array var}, ${2:element var}, ${3:pos} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_insert_var": {
        "prefix": "miva_array_insert_var",
        "body": "miva_array_insert_var( ${1:array var}, ${2:element var}, ${3:pos} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_max": {
        "prefix": "miva_array_max",
        "body": "miva_array_max( ${1:aggregate var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_merge": {
        "prefix": "miva_array_merge",
        "body": "miva_array_merge( ${1:source var}, ${2:sstart}, ${3:scount}, ${4:dest var}, ${5:dpos} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_merge_ref": {
        "prefix": "miva_array_merge_ref",
        "body": "miva_array_merge_ref( ${1:source var}, ${2:sstart}, ${3:scount}, ${4:dest var}, ${5:dpos} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_min": {
        "prefix": "miva_array_min",
        "body": "miva_array_min( ${1:aggregate var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_next": {
        "prefix": "miva_array_next",
        "body": "miva_array_next( ${1:aggregate var}, ${2:index} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_pop": {
        "prefix": "miva_array_pop",
        "body": "miva_array_pop( ${1:array var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_pop_ref": {
        "prefix": "miva_array_pop_ref",
        "body": "miva_array_pop_ref( ${1:array var}, ${2:element var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_previous": {
        "prefix": "miva_array_previous",
        "body": "miva_array_previous( ${1:aggregate var}, ${2:index} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_search": {
        "prefix": "miva_array_search",
        "body": "miva_array_search( ${1:array var}, ${2:offset}, ${3:element var}, ${4:filter_expr} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_serialize": {
        "prefix": "miva_array_serialize",
        "body": "miva_array_serialize( ${1:aggregate var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_shift": {
        "prefix": "miva_array_shift",
        "body": "miva_array_shift( ${1:array var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_shift_ref": {
        "prefix": "miva_array_shift_ref",
        "body": "miva_array_shift_ref( ${1:array var}, ${2:element var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_array_sort": {
        "prefix": "miva_array_sort",
        "body": "miva_array_sort( ${1:aggregate var}, ${2:callback}, ${3:data var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_async_sleep": {
        "prefix": "miva_async_sleep",
        "body": "miva_async_sleep( ${1:until}, ${2:semfile}, ${3:semlocation} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_cdata_encode": {
        "prefix": "miva_cdata_encode",
        "body": "miva_cdata_encode( ${1:text} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_closelog": {
        "prefix": "miva_closelog",
        "body": "miva_closelog()$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_csv_encode": {
        "prefix": "miva_csv_encode",
        "body": "miva_csv_encode( ${1:text}, ${2:delimiter} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_element_exists": {
        "prefix": "miva_element_exists",
        "body": "miva_element_exists( ${1:array var}, ${2:index} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_getvarlist": {
        "prefix": "miva_getvarlist",
        "body": "miva_getvarlist( ${1:scope} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_hex_decode": {
        "prefix": "miva_hex_decode",
        "body": "miva_hex_decode( ${1:data} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_hex_encode": {
        "prefix": "miva_hex_encode",
        "body": "miva_hex_encode( ${1:data} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_html_strip": {
        "prefix": "miva_html_strip",
        "body": "miva_html_strip( ${1:text}, ${2:allowed_tags} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_ieee754_normalize": {
        "prefix": "miva_ieee754_normalize",
        "body": "miva_ieee754_normalize( ${1:significant_digits}, ${2:value} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_joinstring": {
        "prefix": "miva_joinstring",
        "body": "miva_joinstring( ${1:input var}, ${2:join_with}, ${3|'trim','ltrim','rtrim','lower','upper','insensitive'|} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_json_decode": {
        "prefix": "miva_json_decode",
        "body": "miva_json_decode( ${1:data}, ${2:output var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_json_decode_last_error": {
        "prefix": "miva_json_decode_last_error",
        "body": "miva_json_decode_last_error()$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_lockfile": {
        "prefix": "miva_lockfile",
        "body": "miva_lockfile( ${1:path}, ${2:location} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_member_exists": {
        "prefix": "miva_member_exists",
        "body": "miva_member_exists( ${1:structure var}, ${2:member} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_openlog": {
        "prefix": "miva_openlog",
        "body": "miva_openlog( ${1:ident}, ${2|'PID','CONS','ODELAY','NDELAY','NOWAIT','PERROR'|}, ${3|'USER','LOCAL0','LOCAL1','LOCAL2','LOCAL3','LOCAL4','LOCAL5','LOCAL6','LOCAL7'|} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_output_flush": {
        "prefix": "miva_output_flush",
        "body": "miva_output_flush()$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_output_header": {
        "prefix": "miva_output_header",
        "body": "miva_output_header( ${1:header}, ${2:value} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_setdefaultdatabase": {
        "prefix": "miva_setdefaultdatabase",
        "body": "miva_setdefaultdatabase( ${1:database} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_setdefaultlanguage": {
        "prefix": "miva_setdefaultlanguage",
        "body": "miva_setdefaultlanguage( ${1:language} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_setlanguage": {
        "prefix": "miva_setlanguage",
        "body": "miva_setlanguage( ${1:language} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_setlogmask": {
        "prefix": "miva_setlogmask",
        "body": "miva_setlogmask( ${1|'EMERG','ALERT','CRIT','ERR','WARNING','NOTICE','INFO','DEBUG'|} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_setprocessname": {
        "prefix": "miva_setprocessname",
        "body": "miva_setprocessname( ${1:name} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_sleep": {
        "prefix": "miva_sleep",
        "body": "miva_sleep( ${1:msecs} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_splitstring": {
        "prefix": "miva_splitstring",
        "body": "miva_splitstring( ${1:string}, ${2:sep}, ${3:output var}, ${4|'trim','ltrim','rtrim','lower','upper','insensitive'|} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_struct_members": {
        "prefix": "miva_struct_members",
        "body": "miva_struct_members( ${1:aggregate var}, ${2:members var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_struct_merge": {
        "prefix": "miva_struct_merge",
        "body": "miva_struct_merge( ${1:source var}, ${2:dest var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_struct_merge_ref": {
        "prefix": "miva_struct_merge_ref",
        "body": "miva_struct_merge_ref( ${1:source var}, ${2:dest var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_template_compile": {
        "prefix": "miva_template_compile",
        "body": "miva_template_compile( ${1:signat}, ${2:source var}, ${3:sourceitems var}, ${4:target}, ${5:errors var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_template_compile_dump": {
        "prefix": "miva_template_compile_dump",
        "body": "miva_template_compile_dump( ${1:source var}, ${2:errors var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_template_compile_itemlist": {
        "prefix": "miva_template_compile_itemlist",
        "body": "miva_template_compile_itemlist( ${1:signat}, ${2:source var}, ${3:sourceitems var}, ${4:target}, ${5:errors var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_variable_type": {
        "prefix": "miva_variable_type",
        "body": "miva_variable_type( ${1:variable} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_variable_value": {
        "prefix": "miva_variable_value",
        "body": "miva_variable_value( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "miva_writelog": {
        "prefix": "miva_writelog",
        "body": "miva_writelog( ${1'EMERG','ALERT','CRIT','ERR','WARNING','NOTICE','INFO','DEBUG','USER','LOCAL0','LOCAL1','LOCAL2','LOCAL3','LOCAL4','LOCAL5','LOCAL6','LOCAL7'}, ${2:message} )$0",
        "scope": "source.mvt, source.mv"
    },
    "mktime_t": {
        "prefix": "mktime_t",
        "body": "mktime_t( ${1:year}, ${2:month}, ${3:dayofmonth}, ${4:hours}, ${5:minutes}, ${6:seconds}, ${7:timezone} )$0",
        "scope": "source.mvt, source.mv"
    },
    "padl": {
        "prefix": "padl",
        "body": "padl( ${1:string}, ${2:length}, ${3:character} )$0",
        "scope": "source.mvt, source.mv"
    },
    "padr": {
        "prefix": "padr",
        "body": "padr( ${1:string}, ${2:length}, ${3:character} )$0",
        "scope": "source.mvt, source.mv"
    },
    "pkcs7_free": {
        "prefix": "pkcs7_free",
        "body": "pkcs7_free( ${1:pkcs7 var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "pkcs7_get_certs": {
        "prefix": "pkcs7_get_certs",
        "body": "pkcs7_get_certs( ${1:pkcs7 var}, ${2:x509s var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "pkcs7_load_mem": {
        "prefix": "pkcs7_load_mem",
        "body": "pkcs7_load_mem( ${1:cert}, ${2:format}, ${3:pkcs7 var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "pkcs7_verify": {
        "prefix": "pkcs7_verify",
        "body": "pkcs7_verify( ${1:pkcs7 var}, ${2:root_x509 var}, ${3:content} )$0",
        "scope": "source.mvt, source.mv"
    },
    "power": {
        "prefix": "power",
        "body": "power( ${1:number}, ${2:matissa} )$0",
        "scope": "source.mvt, source.mv"
    },
    "random": {
        "prefix": "random",
        "body": "random( ${1:max} )$0",
        "scope": "source.mvt, source.mv"
    },
    "rnd": {
        "prefix": "rnd",
        "body": "rnd( ${1:value}, ${2:precision} )$0",
        "scope": "source.mvt, source.mv"
    },
    "rsa_free": {
        "prefix": "rsa_free",
        "body": "rsa_free( ${1:rsa var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "rsa_generate_keypair": {
        "prefix": "rsa_generate_keypair",
        "body": "rsa_generate_keypair( ${1:pubkey_file}, ${2:privkey_file}, ${3:bits}, ${4|3,17,65537|}, ${5:passphrase} )$0",
        "scope": "source.mvt, source.mv"
    },
    "rsa_generate_keypair_mem": {
        "prefix": "rsa_generate_keypair_mem",
        "body": "rsa_generate_keypair_mem( ${1:pubkey var}, ${2:privkey var}, ${3:bits}, ${4|3,17,65537|}, ${5:passphrase} )$0",
        "scope": "source.mvt, source.mv"
    },
    "rsa_generate_keypair_mem_cipher": {
        "prefix": "rsa_generate_keypair_mem_cipher",
        "body": "rsa_generate_keypair_mem_cipher( ${1:pubkey var}, ${2:privkey var}, ${3:bits}, ${4|3,17,65537|}, ${5:passphrase}, ${6:ciphername} )$0",
        "scope": "source.mvt, source.mv"
    },
    "rsa_load_privatekey": {
        "prefix": "rsa_load_privatekey",
        "body": "rsa_load_privatekey( ${1:privkey_file}, ${2:rsa var}, ${3:passphrase} )$0",
        "scope": "source.mvt, source.mv"
    },
    "rsa_load_privatekey_engine": {
        "prefix": "rsa_load_privatekey_engine",
        "body": "rsa_load_privatekey_engine( ${1:engine}, ${2:key_id}, ${3:rsa var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "rsa_load_privatekey_mem": {
        "prefix": "rsa_load_privatekey_mem",
        "body": "rsa_load_privatekey_mem( ${1:privkey}, ${2:rsa var}, ${3:passphrase} )$0",
        "scope": "source.mvt, source.mv"
    },
    "rsa_load_publickey": {
        "prefix": "rsa_load_publickey",
        "body": "rsa_load_publickey( ${1:pubkey_file}, ${2:rsa var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "rsa_load_publickey_engine": {
        "prefix": "rsa_load_publickey_engine",
        "body": "rsa_load_publickey_engine( ${1:engine}, ${2:key_id}, ${3:rsa var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "rsa_load_publickey_mem": {
        "prefix": "rsa_load_publickey_mem",
        "body": "rsa_load_publickey_mem( ${1:pubkey}, ${2:rsa var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "rsa_private_decrypt": {
        "prefix": "rsa_private_decrypt",
        "body": "rsa_private_decrypt( ${1:rsa}, ${2:encrypted}, ${3:plaintext var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "rsa_private_encrypt": {
        "prefix": "rsa_private_encrypt",
        "body": "rsa_private_encrypt( ${1:rsa}, ${2:plaintext}, ${3:encrypted var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "rsa_public_decrypt": {
        "prefix": "rsa_public_decrypt",
        "body": "rsa_public_decrypt( ${1:rsa}, ${2:encrypted}, ${3:plaintext var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "rsa_public_encrypt": {
        "prefix": "rsa_public_encrypt",
        "body": "rsa_public_encrypt( ${1:rsa}, ${2:plaintext}, ${3:encrypted var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "rsa_save_privatekey": {
        "prefix": "rsa_save_privatekey",
        "body": "rsa_save_privatekey( ${1:privkey_file}, ${2:rsa var}, ${3:passphrase} )$0",
        "scope": "source.mvt, source.mv"
    },
    "rsa_save_privatekey_mem": {
        "prefix": "rsa_save_privatekey_mem",
        "body": "rsa_save_privatekey_mem( ${1:privkey var}, ${2:rsa var}, ${3:passphrase} )$0",
        "scope": "source.mvt, source.mv"
    },
    "rsa_save_privatekey_mem_cipher": {
        "prefix": "rsa_save_privatekey_mem_cipher",
        "body": "rsa_save_privatekey_mem_cipher( ${1:privkey var}, ${2:rsa var}, ${3:passphrase}, ${4:ciphername} )$0",
        "scope": "source.mvt, source.mv"
    },
    "rsa_sign": {
        "prefix": "rsa_sign",
        "body": "rsa_sign( ${1:rsa}, ${2:buffer}, ${3:signature var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "rsa_verify": {
        "prefix": "rsa_verify",
        "body": "rsa_verify( ${1:rsa}, ${2:buffer}, ${3:signature} )$0",
        "scope": "source.mvt, source.mv"
    },
    "rtrim": {
        "prefix": "rtrim",
        "body": "rtrim( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "schmod": {
        "prefix": "schmod",
        "body": "schmod( ${1:path}, ${2:mode} )$0",
        "scope": "source.mvt, source.mv"
    },
    "scopy": {
        "prefix": "scopy",
        "body": "scopy( ${1:source}, ${2:destination} )$0",
        "scope": "source.mvt, source.mv"
    },
    "sdelete": {
        "prefix": "sdelete",
        "body": "sdelete( ${1:path} )$0",
        "scope": "source.mvt, source.mv"
    },
    "sexists": {
        "prefix": "sexists",
        "body": "sexists( ${1:path} )$0",
        "scope": "source.mvt, source.mv"
    },
    "sfrename": {
        "prefix": "sfrename",
        "body": "sfrename( ${1:source}, ${2:destination} )$0",
        "scope": "source.mvt, source.mv"
    },
    "sfsymlink": {
        "prefix": "sfsymlink",
        "body": "sfsymlink( ${1:source}, ${2:destination} )$0",
        "scope": "source.mvt, source.mv"
    },
    "sin": {
        "prefix": "sin",
        "body": "sin( ${1:number} )$0",
        "scope": "source.mvt, source.mv"
    },
    "sinh": {
        "prefix": "sinh",
        "body": "sinh( ${1:number} )$0",
        "scope": "source.mvt, source.mv"
    },
    "sisdir": {
        "prefix": "sisdir",
        "body": "sisdir( ${1:path} )$0",
        "scope": "source.mvt, source.mv"
    },
    "slugify": {
        "prefix": "slugify",
        "body": "slugify( ${1:data} )$0",
        "scope": "source.mvt, source.mv"
    },
    "smkdir": {
        "prefix": "smkdir",
        "body": "smkdir( ${1:path} )$0",
        "scope": "source.mvt, source.mv"
    },
    "smode": {
        "prefix": "smode",
        "body": "smode( ${1:path} )$0",
        "scope": "source.mvt, source.mv"
    },
    "sqrt": {
        "prefix": "sqrt",
        "body": "sqrt( ${1:number} )$0",
        "scope": "source.mvt, source.mv"
    },
    "srandom": {
        "prefix": "srandom",
        "body": "srandom( ${1:seed} )$0",
        "scope": "source.mvt, source.mv"
    },
    "srename": {
        "prefix": "srename",
        "body": "srename( ${1:source}, ${2:destination} )$0",
        "scope": "source.mvt, source.mv"
    },
    "ssize": {
        "prefix": "ssize",
        "body": "ssize( ${1:path} )$0",
        "scope": "source.mvt, source.mv"
    },
    "ssymlink": {
        "prefix": "ssymlink",
        "body": "ssymlink( ${1:source}, ${2:destination} )$0",
        "scope": "source.mvt, source.mv"
    },
    "stime": {
        "prefix": "stime",
        "body": "stime( ${1:path} )$0",
        "scope": "source.mvt, source.mv"
    },
    "substring": {
        "prefix": "substring",
        "body": "substring( ${1:string}, ${2:position}, ${3:length} )$0",
        "scope": "source.mvt, source.mv"
    },
    "substring_var": {
        "prefix": "substring_var",
        "body": "substring_var( ${1:string var}, ${2:position}, ${3:length} )$0",
        "scope": "source.mvt, source.mv"
    },
    "tan": {
        "prefix": "tan",
        "body": "tan( ${1:number} )$0",
        "scope": "source.mvt, source.mv"
    },
    "tanh": {
        "prefix": "tanh",
        "body": "tanh( ${1:number} )$0",
        "scope": "source.mvt, source.mv"
    },
    "tar_create": {
        "prefix": "tar_create",
        "body": "tar_create( ${1:file}, ${2|'data','script'|}, ${3:dir}, ${4|'data','script'|}, ${5|'','compress'|} )$0",
        "scope": "source.mvt, source.mv"
    },
    "tar_directory": {
        "prefix": "tar_directory",
        "body": "tar_directory( ${1:file}, ${2:|'data','script'|}, ${3:desc var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "tar_extract": {
        "prefix": "tar_extract",
        "body": "tar_extract( ${1:file}, ${2:|'data','script'|}, ${3:dir}, ${4:|'data','script'|} )$0",
        "scope": "source.mvt, source.mv"
    },
    "time_t_dayofmonth": {
        "prefix": "time_t_dayofmonth",
        "body": "time_t_dayofmonth( ${1:timet}, ${2:time_zone} )$0",
        "scope": "source.mvt, source.mv"
    },
    "time_t_dayofweek": {
        "prefix": "time_t_dayofweek",
        "body": "time_t_dayofweek( ${1:timet}, ${2:time_zone} )$0",
        "scope": "source.mvt, source.mv"
    },
    "time_t_dayofyear": {
        "prefix": "time_t_dayofyear",
        "body": "time_t_dayofyear( ${1:timet}, ${2:time_zone} )$0",
        "scope": "source.mvt, source.mv"
    },
    "time_t_hour": {
        "prefix": "time_t_hour",
        "body": "time_t_hour( ${1:timet}, ${2:time_zone} )$0",
        "scope": "source.mvt, source.mv"
    },
    "time_t_min": {
        "prefix": "time_t_min",
        "body": "time_t_min( ${1:timet}, ${2:time_zone} )$0",
        "scope": "source.mvt, source.mv"
    },
    "time_t_month": {
        "prefix": "time_t_month",
        "body": "time_t_month( ${1:timet}, ${2:time_zone} )$0",
        "scope": "source.mvt, source.mv"
    },
    "time_t_sec": {
        "prefix": "time_t_sec",
        "body": "time_t_sec( ${1:timet}, ${2:time_zone} )$0",
        "scope": "source.mvt, source.mv"
    },
    "time_t_year": {
        "prefix": "time_t_year",
        "body": "time_t_year( ${1:timet}, ${2:time_zone} )$0",
        "scope": "source.mvt, source.mv"
    },
    "timezone": {
        "prefix": "timezone",
        "body": "timezone()$0",
        "scope": "source.mvt, source.mv"
    },
    "tokenize": {
        "prefix": "tokenize",
        "body": "tokenize( ${1:string}, ${2:variables} )$0",
        "scope": "source.mvt, source.mv"
    },
    "tolower": {
        "prefix": "tolower",
        "body": "tolower( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "toupper": {
        "prefix": "toupper",
        "body": "toupper( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "trim": {
        "prefix": "trim",
        "body": "trim( ${1:string} )$0",
        "scope": "source.mvt, source.mv"
    },
    "wdownload": {
        "prefix": "wdownload",
        "body": "wdownload( ${1:url}, ${2:filepath}, ${3|'data','script'|}, ${4:callback}, ${5:callbackdata var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "wget": {
        "prefix": "wget",
        "body": "wget( ${1:url}, ${2:filepath}, ${3|'data','script'|} )$0",
        "scope": "source.mvt, source.mv"
    },
    "x509_create": {
        "prefix": "x509_create",
        "body": "x509_create( ${1:cert}, ${2:x509 var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "x509_digest": {
        "prefix": "x509_digest",
        "body": "x509_digest( ${1:x509 var}, ${2|'md5','sha256'|}, ${3:digest var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "x509_free": {
        "prefix": "x509_free",
        "body": "x509_free( ${1:rsa var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "x509_get_extensions": {
        "prefix": "x509_get_extensions",
        "body": "x509_get_extensions( ${1:certref var}, ${2:extensions var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "x509_get_issuer_name": {
        "prefix": "x509_get_issuer_name",
        "body": "x509_get_issuer_name( ${1:certref var}, ${2:issuername var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "x509_get_subject_name": {
        "prefix": "x509_get_subject_name",
        "body": "x509_get_subject_name( ${1:certref var}, ${2:subjectname var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "x509_load": {
        "prefix": "x509_load",
        "body": "x509_load( ${1:cert}, ${2:x509 var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "x509_load_mem": {
        "prefix": "x509_load_mem",
        "body": "x509_load_mem( ${1:cert}, ${2:x509 var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "x509_pubkey_digest": {
        "prefix": "x509_pubkey_digest",
        "body": "x509_pubkey_digest( ${1:x509 var}, ${2|'md5','sha256'|}, ${3:digest var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "x509_rsa_publickey": {
        "prefix": "x509_rsa_publickey",
        "body": "x509_rsa_publickey( ${1:x509 var}, ${2:rsa var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "x509_verify": {
        "prefix": "x509_verify",
        "body": "x509_verify( ${1:x509 var}, ${2:trusted_certs} )$0",
        "scope": "source.mvt, source.mv"
    },
    "xml_parse": {
        "prefix": "xml_parse",
        "body": "xml_parse( ${1:filepath}, ${2|'data','script'|}, ${3:output var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "xml_parse_error": {
        "prefix": "xml_parse_error",
        "body": "xml_parse_error( ${1:lineno var}, ${2:error var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "xml_parse_section": {
        "prefix": "xml_parse_section",
        "body": "xml_parse_section( ${1:output var}, ${2:eof var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "xml_parse_section_getstate": {
        "prefix": "xml_parse_section_getstate",
        "body": "xml_parse_section_getstate( ${1:target var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "xml_parse_section_init": {
        "prefix": "xml_parse_section_init",
        "body": "xml_parse_section_init( ${1:filepath}, ${2|'data','script'|}, ${3:level} )$0",
        "scope": "source.mvt, source.mv"
    },
    "xml_parse_section_setstate": {
        "prefix": "xml_parse_section_setstate",
        "body": "xml_parse_section_setstate( ${1:source var} )$0",
        "scope": "source.mvt, source.mv"
    },
    "xml_parse_set_colon_replacement": {
        "prefix": "xml_parse_set_colon_replacement",
        "body": "xml_parse_set_colon_replacement( ${1:colon} )$0",
        "scope": "source.mvt, source.mv"
    },
    "xml_parse_var": {
        "prefix": "xml_parse_var",
        "body": "xml_parse_var( ${1:var var}, ${2:output var} )$0",
        "scope": "source.mvt, source.mv"
    }
}